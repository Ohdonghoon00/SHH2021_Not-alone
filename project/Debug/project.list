
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f14  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080090d4  080090d4  000190d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009214  08009214  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009214  08009214  00019214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800921c  0800921c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800921c  0800921c  0001921c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009220  08009220  00019220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000070  08009294  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08009294  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025742  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eb5  00000000  00000000  000457e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ec8  00000000  00000000  00048698  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d60  00000000  00000000  0004a560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d09d  00000000  00000000  0004c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012e54  00000000  00000000  0007935d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011588b  00000000  00000000  0008c1b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a1a3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cf8  00000000  00000000  001a1ab8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080090bc 	.word	0x080090bc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	080090bc 	.word	0x080090bc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b972 	b.w	8000dc8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	4688      	mov	r8, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14b      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4615      	mov	r5, r2
 8000b0e:	d967      	bls.n	8000be0 <__udivmoddi4+0xe4>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0720 	rsb	r7, r2, #32
 8000b1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b22:	4095      	lsls	r5, r2
 8000b24:	ea47 0803 	orr.w	r8, r7, r3
 8000b28:	4094      	lsls	r4, r2
 8000b2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2e:	0c23      	lsrs	r3, r4, #16
 8000b30:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b34:	fa1f fc85 	uxth.w	ip, r5
 8000b38:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b40:	fb07 f10c 	mul.w	r1, r7, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x60>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b4e:	f080 811b 	bcs.w	8000d88 <__udivmoddi4+0x28c>
 8000b52:	4299      	cmp	r1, r3
 8000b54:	f240 8118 	bls.w	8000d88 <__udivmoddi4+0x28c>
 8000b58:	3f02      	subs	r7, #2
 8000b5a:	442b      	add	r3, r5
 8000b5c:	1a5b      	subs	r3, r3, r1
 8000b5e:	b2a4      	uxth	r4, r4
 8000b60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b6c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b70:	45a4      	cmp	ip, r4
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x8c>
 8000b74:	192c      	adds	r4, r5, r4
 8000b76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7a:	f080 8107 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b7e:	45a4      	cmp	ip, r4
 8000b80:	f240 8104 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b84:	3802      	subs	r0, #2
 8000b86:	442c      	add	r4, r5
 8000b88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b8c:	eba4 040c 	sub.w	r4, r4, ip
 8000b90:	2700      	movs	r7, #0
 8000b92:	b11e      	cbz	r6, 8000b9c <__udivmoddi4+0xa0>
 8000b94:	40d4      	lsrs	r4, r2
 8000b96:	2300      	movs	r3, #0
 8000b98:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9c:	4639      	mov	r1, r7
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0xbe>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80eb 	beq.w	8000d82 <__udivmoddi4+0x286>
 8000bac:	2700      	movs	r7, #0
 8000bae:	e9c6 0100 	strd	r0, r1, [r6]
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	4639      	mov	r1, r7
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f783 	clz	r7, r3
 8000bbe:	2f00      	cmp	r7, #0
 8000bc0:	d147      	bne.n	8000c52 <__udivmoddi4+0x156>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0xd0>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80fa 	bhi.w	8000dc0 <__udivmoddi4+0x2c4>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d0e0      	beq.n	8000b9c <__udivmoddi4+0xa0>
 8000bda:	e9c6 4800 	strd	r4, r8, [r6]
 8000bde:	e7dd      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000be0:	b902      	cbnz	r2, 8000be4 <__udivmoddi4+0xe8>
 8000be2:	deff      	udf	#255	; 0xff
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	f040 808f 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bee:	1b49      	subs	r1, r1, r5
 8000bf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bf4:	fa1f f885 	uxth.w	r8, r5
 8000bf8:	2701      	movs	r7, #1
 8000bfa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bfe:	0c23      	lsrs	r3, r4, #16
 8000c00:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb08 f10c 	mul.w	r1, r8, ip
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c10:	18eb      	adds	r3, r5, r3
 8000c12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	f200 80cd 	bhi.w	8000db8 <__udivmoddi4+0x2bc>
 8000c1e:	4684      	mov	ip, r0
 8000c20:	1a59      	subs	r1, r3, r1
 8000c22:	b2a3      	uxth	r3, r4
 8000c24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c28:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c30:	fb08 f800 	mul.w	r8, r8, r0
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x14c>
 8000c38:	192c      	adds	r4, r5, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x14a>
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	f200 80b6 	bhi.w	8000db2 <__udivmoddi4+0x2b6>
 8000c46:	4618      	mov	r0, r3
 8000c48:	eba4 0408 	sub.w	r4, r4, r8
 8000c4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c50:	e79f      	b.n	8000b92 <__udivmoddi4+0x96>
 8000c52:	f1c7 0c20 	rsb	ip, r7, #32
 8000c56:	40bb      	lsls	r3, r7
 8000c58:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c5c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c60:	fa01 f407 	lsl.w	r4, r1, r7
 8000c64:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c68:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c70:	4325      	orrs	r5, r4
 8000c72:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c76:	0c2c      	lsrs	r4, r5, #16
 8000c78:	fb08 3319 	mls	r3, r8, r9, r3
 8000c7c:	fa1f fa8e 	uxth.w	sl, lr
 8000c80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c84:	fb09 f40a 	mul.w	r4, r9, sl
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c8e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1e 0303 	adds.w	r3, lr, r3
 8000c98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c9c:	f080 8087 	bcs.w	8000dae <__udivmoddi4+0x2b2>
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	f240 8084 	bls.w	8000dae <__udivmoddi4+0x2b2>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4473      	add	r3, lr
 8000cac:	1b1b      	subs	r3, r3, r4
 8000cae:	b2ad      	uxth	r5, r5
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cbc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cc0:	45a2      	cmp	sl, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	d26b      	bcs.n	8000da6 <__udivmoddi4+0x2aa>
 8000cce:	45a2      	cmp	sl, r4
 8000cd0:	d969      	bls.n	8000da6 <__udivmoddi4+0x2aa>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4474      	add	r4, lr
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	fba0 8902 	umull	r8, r9, r0, r2
 8000cde:	eba4 040a 	sub.w	r4, r4, sl
 8000ce2:	454c      	cmp	r4, r9
 8000ce4:	46c2      	mov	sl, r8
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	d354      	bcc.n	8000d94 <__udivmoddi4+0x298>
 8000cea:	d051      	beq.n	8000d90 <__udivmoddi4+0x294>
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d069      	beq.n	8000dc4 <__udivmoddi4+0x2c8>
 8000cf0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cf4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cf8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cfc:	40fd      	lsrs	r5, r7
 8000cfe:	40fc      	lsrs	r4, r7
 8000d00:	ea4c 0505 	orr.w	r5, ip, r5
 8000d04:	e9c6 5400 	strd	r5, r4, [r6]
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e747      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f703 	lsr.w	r7, r0, r3
 8000d14:	4095      	lsls	r5, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d22:	4338      	orrs	r0, r7
 8000d24:	0c01      	lsrs	r1, r0, #16
 8000d26:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d2a:	fa1f f885 	uxth.w	r8, r5
 8000d2e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d36:	fb07 f308 	mul.w	r3, r7, r8
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x256>
 8000d42:	1869      	adds	r1, r5, r1
 8000d44:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d48:	d22f      	bcs.n	8000daa <__udivmoddi4+0x2ae>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d92d      	bls.n	8000daa <__udivmoddi4+0x2ae>
 8000d4e:	3f02      	subs	r7, #2
 8000d50:	4429      	add	r1, r5
 8000d52:	1acb      	subs	r3, r1, r3
 8000d54:	b281      	uxth	r1, r0
 8000d56:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d62:	fb00 f308 	mul.w	r3, r0, r8
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x27e>
 8000d6a:	1869      	adds	r1, r5, r1
 8000d6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d70:	d217      	bcs.n	8000da2 <__udivmoddi4+0x2a6>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d915      	bls.n	8000da2 <__udivmoddi4+0x2a6>
 8000d76:	3802      	subs	r0, #2
 8000d78:	4429      	add	r1, r5
 8000d7a:	1ac9      	subs	r1, r1, r3
 8000d7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d80:	e73b      	b.n	8000bfa <__udivmoddi4+0xfe>
 8000d82:	4637      	mov	r7, r6
 8000d84:	4630      	mov	r0, r6
 8000d86:	e709      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d88:	4607      	mov	r7, r0
 8000d8a:	e6e7      	b.n	8000b5c <__udivmoddi4+0x60>
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	e6fb      	b.n	8000b88 <__udivmoddi4+0x8c>
 8000d90:	4541      	cmp	r1, r8
 8000d92:	d2ab      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d94:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d98:	eb69 020e 	sbc.w	r2, r9, lr
 8000d9c:	3801      	subs	r0, #1
 8000d9e:	4613      	mov	r3, r2
 8000da0:	e7a4      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da2:	4660      	mov	r0, ip
 8000da4:	e7e9      	b.n	8000d7a <__udivmoddi4+0x27e>
 8000da6:	4618      	mov	r0, r3
 8000da8:	e795      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000daa:	4667      	mov	r7, ip
 8000dac:	e7d1      	b.n	8000d52 <__udivmoddi4+0x256>
 8000dae:	4681      	mov	r9, r0
 8000db0:	e77c      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db2:	3802      	subs	r0, #2
 8000db4:	442c      	add	r4, r5
 8000db6:	e747      	b.n	8000c48 <__udivmoddi4+0x14c>
 8000db8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dbc:	442b      	add	r3, r5
 8000dbe:	e72f      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dc0:	4638      	mov	r0, r7
 8000dc2:	e708      	b.n	8000bd6 <__udivmoddi4+0xda>
 8000dc4:	4637      	mov	r7, r6
 8000dc6:	e6e9      	b.n	8000b9c <__udivmoddi4+0xa0>

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <BSP_I2C2_Init+0x70>)
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <BSP_I2C2_Init+0x74>)
 8000dda:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <BSP_I2C2_Init+0x78>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	4918      	ldr	r1, [pc, #96]	; (8000e44 <BSP_I2C2_Init+0x78>)
 8000de4:	600a      	str	r2, [r1, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d122      	bne.n	8000e30 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000dea:	4814      	ldr	r0, [pc, #80]	; (8000e3c <BSP_I2C2_Init+0x70>)
 8000dec:	f002 ffa6 	bl	8003d3c <HAL_I2C_GetState>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d11c      	bne.n	8000e30 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000df6:	4811      	ldr	r0, [pc, #68]	; (8000e3c <BSP_I2C2_Init+0x70>)
 8000df8:	f000 f8fe 	bl	8000ff8 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d116      	bne.n	8000e30 <BSP_I2C2_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000e02:	480e      	ldr	r0, [pc, #56]	; (8000e3c <BSP_I2C2_Init+0x70>)
 8000e04:	f000 f8b4 	bl	8000f70 <MX_I2C2_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <BSP_I2C2_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8000e0e:	f06f 0307 	mvn.w	r3, #7
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	e00c      	b.n	8000e30 <BSP_I2C2_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e16:	2100      	movs	r1, #0
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <BSP_I2C2_Init+0x70>)
 8000e1a:	f003 f9c5 	bl	80041a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <BSP_I2C2_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8000e24:	f06f 0307 	mvn.w	r3, #7
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	e001      	b.n	8000e30 <BSP_I2C2_Init+0x64>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000e30:	687b      	ldr	r3, [r7, #4]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000009c 	.word	0x2000009c
 8000e40:	40005800 	.word	0x40005800
 8000e44:	2000008c 	.word	0x2000008c

08000e48 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <BSP_I2C2_DeInit+0x48>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d014      	beq.n	8000e84 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <BSP_I2C2_DeInit+0x48>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <BSP_I2C2_DeInit+0x48>)
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <BSP_I2C2_DeInit+0x48>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d10b      	bne.n	8000e84 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <BSP_I2C2_DeInit+0x4c>)
 8000e6e:	f000 f909 	bl	8001084 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <BSP_I2C2_DeInit+0x4c>)
 8000e74:	f002 fcf1 	bl	800385a <HAL_I2C_DeInit>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000e7e:	f06f 0307 	mvn.w	r3, #7
 8000e82:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000e84:	687b      	ldr	r3, [r7, #4]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000008c 	.word	0x2000008c
 8000e94:	2000009c 	.word	0x2000009c

08000e98 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	60ba      	str	r2, [r7, #8]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	81fb      	strh	r3, [r7, #14]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	81bb      	strh	r3, [r7, #12]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8000eb2:	89ba      	ldrh	r2, [r7, #12]
 8000eb4:	89f9      	ldrh	r1, [r7, #14]
 8000eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <BSP_I2C2_WriteReg+0x60>)
 8000ec8:	f002 fd0a 	bl	80038e0 <HAL_I2C_Mem_Write>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00c      	beq.n	8000eec <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <BSP_I2C2_WriteReg+0x60>)
 8000ed4:	f002 ff40 	bl	8003d58 <HAL_I2C_GetError>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	d103      	bne.n	8000ee6 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000ede:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e002      	b.n	8000eec <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000ee6:	f06f 0303 	mvn.w	r3, #3
 8000eea:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000eec:	697b      	ldr	r3, [r7, #20]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000009c 	.word	0x2000009c

08000efc <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af04      	add	r7, sp, #16
 8000f02:	60ba      	str	r2, [r7, #8]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4603      	mov	r3, r0
 8000f08:	81fb      	strh	r3, [r7, #14]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	81bb      	strh	r3, [r7, #12]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8000f16:	89ba      	ldrh	r2, [r7, #12]
 8000f18:	89f9      	ldrh	r1, [r7, #14]
 8000f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <BSP_I2C2_ReadReg+0x60>)
 8000f2c:	f002 fdec 	bl	8003b08 <HAL_I2C_Mem_Read>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00c      	beq.n	8000f50 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8000f36:	4809      	ldr	r0, [pc, #36]	; (8000f5c <BSP_I2C2_ReadReg+0x60>)
 8000f38:	f002 ff0e 	bl	8003d58 <HAL_I2C_GetError>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	d103      	bne.n	8000f4a <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000f42:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e002      	b.n	8000f50 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000f4a:	f06f 0303 	mvn.w	r3, #3
 8000f4e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000f50:	697b      	ldr	r3, [r7, #20]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000009c 	.word	0x2000009c

08000f60 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000f64:	f001 ffba 	bl	8002edc <HAL_GetTick>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C2;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <MX_I2C2_Init+0x80>)
 8000f80:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <MX_I2C2_Init+0x84>)
 8000f86:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2201      	movs	r2, #1
 8000f92:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f002 fbc2 	bl	800373c <HAL_I2C_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f003 f8ef 	bl	80041a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f003 f931 	bl	800423e <HAL_I2CEx_ConfigDigitalFilter>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40005800 	.word	0x40005800
 8000ff4:	307075b1 	.word	0x307075b1

08000ff8 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <I2C2_MspInit+0x84>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001004:	4a1d      	ldr	r2, [pc, #116]	; (800107c <I2C2_MspInit+0x84>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <I2C2_MspInit+0x84>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101e:	2312      	movs	r3, #18
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001022:	2301      	movs	r3, #1
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800102a:	2304      	movs	r3, #4
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4812      	ldr	r0, [pc, #72]	; (8001080 <I2C2_MspInit+0x88>)
 8001036:	f002 f8cd 	bl	80031d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800103a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001040:	2312      	movs	r3, #18
 8001042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001044:	2301      	movs	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 800104c:	2304      	movs	r3, #4
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <I2C2_MspInit+0x88>)
 8001058:	f002 f8bc 	bl	80031d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <I2C2_MspInit+0x84>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <I2C2_MspInit+0x84>)
 8001062:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001066:	6593      	str	r3, [r2, #88]	; 0x58
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <I2C2_MspInit+0x84>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000
 8001080:	48000400 	.word	0x48000400

08001084 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <I2C2_MspDeInit+0x30>)
 800108e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001090:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <I2C2_MspDeInit+0x30>)
 8001092:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001096:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8001098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <I2C2_MspDeInit+0x34>)
 800109e:	f002 fa2b 	bl	80034f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 80010a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <I2C2_MspDeInit+0x34>)
 80010a8:	f002 fa26 	bl	80034f8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	48000400 	.word	0x48000400

080010bc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 30000))
 80010c4:	bf00      	nop
 80010c6:	1d39      	adds	r1, r7, #4
 80010c8:	f247 5330 	movw	r3, #30000	; 0x7530
 80010cc:	2201      	movs	r2, #1
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <__io_putchar+0x28>)
 80010d0:	f006 f818 	bl	8007104 <HAL_UART_Transmit>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f5      	bne.n	80010c6 <__io_putchar+0xa>
	{
	}
	return ch;
 80010da:	687b      	ldr	r3, [r7, #4]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200001b4 	.word	0x200001b4

080010e8 <__io_getchar>:
int __io_getchar(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]
	while(HAL_OK != HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 30000))
 80010f2:	bf00      	nop
 80010f4:	1df9      	adds	r1, r7, #7
 80010f6:	f247 5330 	movw	r3, #30000	; 0x7530
 80010fa:	2201      	movs	r2, #1
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <__io_getchar+0x2c>)
 80010fe:	f006 f898 	bl	8007232 <HAL_UART_Receive>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f5      	bne.n	80010f4 <__io_getchar+0xc>
	{
	}
	return ch;
 8001108:	79fb      	ldrb	r3, [r7, #7]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001b4 	.word	0x200001b4

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b093      	sub	sp, #76	; 0x4c
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111e:	f001 fe75 	bl	8002e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001122:	f000 f8e9 	bl	80012f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001126:	f000 faa9 	bl	800167c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800112a:	f000 fa5b 	bl	80015e4 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 800112e:	f000 f9b7 	bl	80014a0 <MX_TIM15_Init>
  MX_TIM3_Init();
 8001132:	f000 f959 	bl	80013e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2); // Add PWM Servo Motor
 8001136:	2104      	movs	r1, #4
 8001138:	4863      	ldr	r0, [pc, #396]	; (80012c8 <main+0x1b0>)
 800113a:	f004 fe1d 	bl	8005d78 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  double gyro_z_offset = 210;
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	4c62      	ldr	r4, [pc, #392]	; (80012cc <main+0x1b4>)
 8001144:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double turning_angle = 0;
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	f04f 0400 	mov.w	r4, #0
 8001150:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    double cal_turning_angle =0;
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	f04f 0400 	mov.w	r4, #0
 800115c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    double servo_motor_pwm = 0;
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	f04f 0400 	mov.w	r4, #0
 8001168:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double kiosk_location = 45;
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	4c57      	ldr	r4, [pc, #348]	; (80012d0 <main+0x1b8>)
 8001172:	e9c7 3408 	strd	r3, r4, [r7, #32]
    double real_servo_angle = 0;
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	f04f 0400 	mov.w	r4, #0
 800117e:	e9c7 3406 	strd	r3, r4, [r7, #24]
    dataRdyIntReceived = 0;
 8001182:	4b54      	ldr	r3, [pc, #336]	; (80012d4 <main+0x1bc>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
    MEMS_Init();
 8001188:	f000 fade 	bl	8001748 <MEMS_Init>
	  	  //HAL_Delay(1000);
    	  //HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
    	  	//HAL_UART_Transmit(&huart1, (uint8_t*)data, COUNTOF(data)-1, 100);
    	  	//printf("START \r\n");
    	  	//HAL_Delay(1000);
    	  	if (dataRdyIntReceived != 0)
 800118c:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <main+0x1bc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0fb      	beq.n	800118c <main+0x74>
    	  	{
    	  		dataRdyIntReceived = 0;
 8001194:	4b4f      	ldr	r3, [pc, #316]	; (80012d4 <main+0x1bc>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
    	  		LSM6DSL_Axes_t acc_axes;
    	  		LSM6DSL_Axes_t gyro_axes;
    	  		//LSM6DSL_Axes_t magnato_axes;

    	  		LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4619      	mov	r1, r3
 80011a0:	484d      	ldr	r0, [pc, #308]	; (80012d8 <main+0x1c0>)
 80011a2:	f000 ff5d 	bl	8002060 <LSM6DSL_ACC_GetAxes>
    	  		LSM6DSL_GYRO_GetAxes(&MotionSensor, &gyro_axes);
 80011a6:	463b      	mov	r3, r7
 80011a8:	4619      	mov	r1, r3
 80011aa:	484b      	ldr	r0, [pc, #300]	; (80012d8 <main+0x1c0>)
 80011ac:	f001 f826 	bl	80021fc <LSM6DSL_GYRO_GetAxes>

    	  		// print gyro value
    	  		//printf("gyro_x = %5d, gyro_y = %5d, gyro_z = %5d\r\n", (int)gyro_axes.x, (int)gyro_axes.y, (int)gyro_axes.z);

    	  		// print gyro_z
    	  		printf(" gyro_z = %5d\r\n", (int)gyro_axes.z);
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	4619      	mov	r1, r3
 80011b4:	4849      	ldr	r0, [pc, #292]	; (80012dc <main+0x1c4>)
 80011b6:	f007 f89d 	bl	80082f4 <iprintf>

    	  		// calibration and integral
    	  		turning_angle = turning_angle + ((int)gyro_axes.z - gyro_z_offset) * (0.0385); // 0.0385 = 26hz
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9c1 	bl	8000544 <__aeabi_i2d>
 80011c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011c6:	f7ff f86f 	bl	80002a8 <__aeabi_dsub>
 80011ca:	4603      	mov	r3, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	4618      	mov	r0, r3
 80011d0:	4621      	mov	r1, r4
 80011d2:	a339      	add	r3, pc, #228	; (adr r3, 80012b8 <main+0x1a0>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff fa1e 	bl	8000618 <__aeabi_dmul>
 80011dc:	4603      	mov	r3, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	461a      	mov	r2, r3
 80011e2:	4623      	mov	r3, r4
 80011e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80011e8:	f7ff f860 	bl	80002ac <__adddf3>
 80011ec:	4603      	mov	r3, r0
 80011ee:	460c      	mov	r4, r1
 80011f0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    	  	    printf(" angle = %5d \r\n ", (int)turning_angle);
 80011f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80011f8:	f7ff fc20 	bl	8000a3c <__aeabi_d2iz>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4619      	mov	r1, r3
 8001200:	4837      	ldr	r0, [pc, #220]	; (80012e0 <main+0x1c8>)
 8001202:	f007 f877 	bl	80082f4 <iprintf>
    	  	    cal_turning_angle = turning_angle * 90 / 90000;
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <main+0x1cc>)
 800120c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001210:	f7ff fa02 	bl	8000618 <__aeabi_dmul>
 8001214:	4603      	mov	r3, r0
 8001216:	460c      	mov	r4, r1
 8001218:	4618      	mov	r0, r3
 800121a:	4621      	mov	r1, r4
 800121c:	a328      	add	r3, pc, #160	; (adr r3, 80012c0 <main+0x1a8>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff fb23 	bl	800086c <__aeabi_ddiv>
 8001226:	4603      	mov	r3, r0
 8001228:	460c      	mov	r4, r1
 800122a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    	  	    printf(" cal_angle = %5d \r\n", (int)cal_turning_angle);
 800122e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001232:	f7ff fc03 	bl	8000a3c <__aeabi_d2iz>
 8001236:	4603      	mov	r3, r0
 8001238:	4619      	mov	r1, r3
 800123a:	482b      	ldr	r0, [pc, #172]	; (80012e8 <main+0x1d0>)
 800123c:	f007 f85a 	bl	80082f4 <iprintf>

    	  	    real_servo_angle = kiosk_location - (int)cal_turning_angle;
 8001240:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001244:	f7ff fbfa 	bl	8000a3c <__aeabi_d2iz>
 8001248:	4603      	mov	r3, r0
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f97a 	bl	8000544 <__aeabi_i2d>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	461a      	mov	r2, r3
 8001256:	4623      	mov	r3, r4
 8001258:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800125c:	f7ff f824 	bl	80002a8 <__aeabi_dsub>
 8001260:	4603      	mov	r3, r0
 8001262:	460c      	mov	r4, r1
 8001264:	e9c7 3406 	strd	r3, r4, [r7, #24]
    	  	    servo_motor_pwm = real_servo_angle * 80 / 180 + 40;
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <main+0x1d4>)
 800126e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001272:	f7ff f9d1 	bl	8000618 <__aeabi_dmul>
 8001276:	4603      	mov	r3, r0
 8001278:	460c      	mov	r4, r1
 800127a:	4618      	mov	r0, r3
 800127c:	4621      	mov	r1, r4
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <main+0x1d8>)
 8001284:	f7ff faf2 	bl	800086c <__aeabi_ddiv>
 8001288:	4603      	mov	r3, r0
 800128a:	460c      	mov	r4, r1
 800128c:	4618      	mov	r0, r3
 800128e:	4621      	mov	r1, r4
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <main+0x1dc>)
 8001296:	f7ff f809 	bl	80002ac <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    	  	    __HAL_TIM_SetCompare(&htim15, TIM_CHANNEL_2, servo_motor_pwm);
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <main+0x1b0>)
 80012a4:	681c      	ldr	r4, [r3, #0]
 80012a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012aa:	f7ff fbef 	bl	8000a8c <__aeabi_d2uiz>
 80012ae:	4603      	mov	r3, r0
 80012b0:	63a3      	str	r3, [r4, #56]	; 0x38
    	  	if (dataRdyIntReceived != 0)
 80012b2:	e76b      	b.n	800118c <main+0x74>
 80012b4:	f3af 8000 	nop.w
 80012b8:	a1cac083 	.word	0xa1cac083
 80012bc:	3fa3b645 	.word	0x3fa3b645
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40f5f900 	.word	0x40f5f900
 80012c8:	200000e8 	.word	0x200000e8
 80012cc:	406a4000 	.word	0x406a4000
 80012d0:	40468000 	.word	0x40468000
 80012d4:	20000180 	.word	0x20000180
 80012d8:	20000184 	.word	0x20000184
 80012dc:	080090d4 	.word	0x080090d4
 80012e0:	080090e4 	.word	0x080090e4
 80012e4:	40568000 	.word	0x40568000
 80012e8:	080090f8 	.word	0x080090f8
 80012ec:	40540000 	.word	0x40540000
 80012f0:	40668000 	.word	0x40668000
 80012f4:	40440000 	.word	0x40440000

080012f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0bc      	sub	sp, #240	; 0xf0
 80012fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001302:	2244      	movs	r2, #68	; 0x44
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f006 ffec 	bl	80082e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800130c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2294      	movs	r2, #148	; 0x94
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f006 ffde 	bl	80082e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001328:	2000      	movs	r0, #0
 800132a:	f002 fff5 	bl	8004318 <HAL_PWREx_ControlVoltageScaling>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001334:	f000 fa6c 	bl	8001810 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001338:	2310      	movs	r3, #16
 800133a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800133e:	2301      	movs	r3, #1
 8001340:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800134a:	2360      	movs	r3, #96	; 0x60
 800134c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001350:	2302      	movs	r3, #2
 8001352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001356:	2301      	movs	r3, #1
 8001358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800135c:	2301      	movs	r3, #1
 800135e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001362:	233c      	movs	r3, #60	; 0x3c
 8001364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001368:	2302      	movs	r3, #2
 800136a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800137e:	4618      	mov	r0, r3
 8001380:	f003 f86e 	bl	8004460 <HAL_RCC_OscConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800138a:	f000 fa41 	bl	8001810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138e:	230f      	movs	r3, #15
 8001390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001394:	2303      	movs	r3, #3
 8001396:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013b0:	2105      	movs	r1, #5
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fc7a 	bl	8004cac <HAL_RCC_ClockConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013be:	f000 fa27 	bl	8001810 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 80013c2:	2381      	movs	r3, #129	; 0x81
 80013c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013c6:	2300      	movs	r3, #0
 80013c8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 ff1b 	bl	800520c <HAL_RCCEx_PeriphCLKConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80013dc:	f000 fa18 	bl	8001810 <Error_Handler>
  }
}
 80013e0:	bf00      	nop
 80013e2:	37f0      	adds	r7, #240	; 0xf0
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]
 800140a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800140c:	4b22      	ldr	r3, [pc, #136]	; (8001498 <MX_TIM3_Init+0xb0>)
 800140e:	4a23      	ldr	r2, [pc, #140]	; (800149c <MX_TIM3_Init+0xb4>)
 8001410:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 320-1;
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <MX_TIM3_Init+0xb0>)
 8001414:	f240 123f 	movw	r2, #319	; 0x13f
 8001418:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <MX_TIM3_Init+0xb0>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <MX_TIM3_Init+0xb0>)
 8001422:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001426:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <MX_TIM3_Init+0xb0>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <MX_TIM3_Init+0xb0>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001434:	4818      	ldr	r0, [pc, #96]	; (8001498 <MX_TIM3_Init+0xb0>)
 8001436:	f004 fc48 	bl	8005cca <HAL_TIM_PWM_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001440:	f000 f9e6 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	4811      	ldr	r0, [pc, #68]	; (8001498 <MX_TIM3_Init+0xb0>)
 8001454:	f005 fce2 	bl	8006e1c <HAL_TIMEx_MasterConfigSynchronization>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800145e:	f000 f9d7 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001462:	2360      	movs	r3, #96	; 0x60
 8001464:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500-1;
 8001466:	f240 13f3 	movw	r3, #499	; 0x1f3
 800146a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001474:	463b      	mov	r3, r7
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	4807      	ldr	r0, [pc, #28]	; (8001498 <MX_TIM3_Init+0xb0>)
 800147c:	f004 fea2 	bl	80061c4 <HAL_TIM_PWM_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001486:	f000 f9c3 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800148a:	4803      	ldr	r0, [pc, #12]	; (8001498 <MX_TIM3_Init+0xb0>)
 800148c:	f000 fa34 	bl	80018f8 <HAL_TIM_MspPostInit>

}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	; 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000134 	.word	0x20000134
 800149c:	40000400 	.word	0x40000400

080014a0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b09a      	sub	sp, #104	; 0x68
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]
 80014d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	222c      	movs	r2, #44	; 0x2c
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f006 ff02 	bl	80082e4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80014e0:	4b3e      	ldr	r3, [pc, #248]	; (80015dc <MX_TIM15_Init+0x13c>)
 80014e2:	4a3f      	ldr	r2, [pc, #252]	; (80015e0 <MX_TIM15_Init+0x140>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2399;
 80014e6:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <MX_TIM15_Init+0x13c>)
 80014e8:	f640 125f 	movw	r2, #2399	; 0x95f
 80014ec:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <MX_TIM15_Init+0x13c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80014f4:	4b39      	ldr	r3, [pc, #228]	; (80015dc <MX_TIM15_Init+0x13c>)
 80014f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014fa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	4b37      	ldr	r3, [pc, #220]	; (80015dc <MX_TIM15_Init+0x13c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <MX_TIM15_Init+0x13c>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001508:	4b34      	ldr	r3, [pc, #208]	; (80015dc <MX_TIM15_Init+0x13c>)
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800150e:	4833      	ldr	r0, [pc, #204]	; (80015dc <MX_TIM15_Init+0x13c>)
 8001510:	f004 fb84 	bl	8005c1c <HAL_TIM_Base_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800151a:	f000 f979 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001522:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001524:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001528:	4619      	mov	r1, r3
 800152a:	482c      	ldr	r0, [pc, #176]	; (80015dc <MX_TIM15_Init+0x13c>)
 800152c:	f004 ff5a 	bl	80063e4 <HAL_TIM_ConfigClockSource>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 8001536:	f000 f96b 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800153a:	4828      	ldr	r0, [pc, #160]	; (80015dc <MX_TIM15_Init+0x13c>)
 800153c:	f004 fbc5 	bl	8005cca <HAL_TIM_PWM_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8001546:	f000 f963 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001552:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001556:	4619      	mov	r1, r3
 8001558:	4820      	ldr	r0, [pc, #128]	; (80015dc <MX_TIM15_Init+0x13c>)
 800155a:	f005 fc5f 	bl	8006e1c <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 8001564:	f000 f954 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001568:	2360      	movs	r3, #96	; 0x60
 800156a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 15;
 800156c:	230f      	movs	r3, #15
 800156e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001570:	2300      	movs	r3, #0
 8001572:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001574:	2300      	movs	r3, #0
 8001576:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800157c:	2300      	movs	r3, #0
 800157e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001584:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001588:	2204      	movs	r2, #4
 800158a:	4619      	mov	r1, r3
 800158c:	4813      	ldr	r0, [pc, #76]	; (80015dc <MX_TIM15_Init+0x13c>)
 800158e:	f004 fe19 	bl	80061c4 <HAL_TIM_PWM_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8001598:	f000 f93a 	bl	8001810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <MX_TIM15_Init+0x13c>)
 80015c0:	f005 fcb4 	bl	8006f2c <HAL_TIMEx_ConfigBreakDeadTime>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 80015ca:	f000 f921 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80015ce:	4803      	ldr	r0, [pc, #12]	; (80015dc <MX_TIM15_Init+0x13c>)
 80015d0:	f000 f992 	bl	80018f8 <HAL_TIM_MspPostInit>

}
 80015d4:	bf00      	nop
 80015d6:	3768      	adds	r7, #104	; 0x68
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200000e8 	.word	0x200000e8
 80015e0:	40014000 	.word	0x40014000

080015e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <MX_USART1_UART_Init+0x90>)
 80015ea:	4a23      	ldr	r2, [pc, #140]	; (8001678 <MX_USART1_UART_Init+0x94>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ee:	4b21      	ldr	r3, [pc, #132]	; (8001674 <MX_USART1_UART_Init+0x90>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <MX_USART1_UART_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <MX_USART1_UART_Init+0x90>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <MX_USART1_UART_Init+0x90>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <MX_USART1_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800162c:	4811      	ldr	r0, [pc, #68]	; (8001674 <MX_USART1_UART_Init+0x90>)
 800162e:	f005 fd19 	bl	8007064 <HAL_UART_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001638:	f000 f8ea 	bl	8001810 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163c:	2100      	movs	r1, #0
 800163e:	480d      	ldr	r0, [pc, #52]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001640:	f006 fd42 	bl	80080c8 <HAL_UARTEx_SetTxFifoThreshold>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800164a:	f000 f8e1 	bl	8001810 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800164e:	2100      	movs	r1, #0
 8001650:	4808      	ldr	r0, [pc, #32]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001652:	f006 fd77 	bl	8008144 <HAL_UARTEx_SetRxFifoThreshold>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800165c:	f000 f8d8 	bl	8001810 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001662:	f006 fcf8 	bl	8008056 <HAL_UARTEx_DisableFifoMode>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800166c:	f000 f8d0 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200001b4 	.word	0x200001b4
 8001678:	40013800 	.word	0x40013800

0800167c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b29      	ldr	r3, [pc, #164]	; (8001738 <MX_GPIO_Init+0xbc>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a28      	ldr	r2, [pc, #160]	; (8001738 <MX_GPIO_Init+0xbc>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <MX_GPIO_Init+0xbc>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <MX_GPIO_Init+0xbc>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a22      	ldr	r2, [pc, #136]	; (8001738 <MX_GPIO_Init+0xbc>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <MX_GPIO_Init+0xbc>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c2:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <MX_GPIO_Init+0xbc>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a1c      	ldr	r2, [pc, #112]	; (8001738 <MX_GPIO_Init+0xbc>)
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_GPIO_Init+0xbc>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EXLED_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	f244 0102 	movw	r1, #16386	; 0x4002
 80016e0:	4816      	ldr	r0, [pc, #88]	; (800173c <MX_GPIO_Init+0xc0>)
 80016e2:	f001 fffb 	bl	80036dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXLED_Pin PB14 */
  GPIO_InitStruct.Pin = EXLED_Pin|GPIO_PIN_14;
 80016e6:	f244 0302 	movw	r3, #16386	; 0x4002
 80016ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4619      	mov	r1, r3
 80016fe:	480f      	ldr	r0, [pc, #60]	; (800173c <MX_GPIO_Init+0xc0>)
 8001700:	f001 fd68 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001704:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <MX_GPIO_Init+0xc4>)
 800170c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	4619      	mov	r1, r3
 8001718:	480a      	ldr	r0, [pc, #40]	; (8001744 <MX_GPIO_Init+0xc8>)
 800171a:	f001 fd5b 	bl	80031d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2105      	movs	r1, #5
 8001722:	2028      	movs	r0, #40	; 0x28
 8001724:	f001 fcc1 	bl	80030aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001728:	2028      	movs	r0, #40	; 0x28
 800172a:	f001 fcda 	bl	80030e2 <HAL_NVIC_EnableIRQ>

}
 800172e:	bf00      	nop
 8001730:	3720      	adds	r7, #32
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	48000400 	.word	0x48000400
 8001740:	10110000 	.word	0x10110000
 8001744:	48000c00 	.word	0x48000c00

08001748 <MEMS_Init>:

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
	LSM6DSL_IO_t io_ctx;
	uint8_t id;
	LSM6DSL_AxesRaw_t axes;

	io_ctx.BusType		= LSM6DSL_I2C_BUS;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
	io_ctx.Address		= LSM6DSL_I2C_ADD_L;
 8001752:	23d5      	movs	r3, #213	; 0xd5
 8001754:	763b      	strb	r3, [r7, #24]
	io_ctx.Init			= BSP_I2C2_Init;
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <MEMS_Init+0x84>)
 8001758:	60fb      	str	r3, [r7, #12]
	io_ctx.DeInit		= BSP_I2C2_DeInit;
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MEMS_Init+0x88>)
 800175c:	613b      	str	r3, [r7, #16]
	io_ctx.ReadReg		= BSP_I2C2_ReadReg;
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <MEMS_Init+0x8c>)
 8001760:	623b      	str	r3, [r7, #32]
	io_ctx.WriteReg		= BSP_I2C2_WriteReg;
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MEMS_Init+0x90>)
 8001764:	61fb      	str	r3, [r7, #28]
	io_ctx.GetTick		= BSP_GetTick;
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <MEMS_Init+0x94>)
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
	LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	4619      	mov	r1, r3
 8001770:	481b      	ldr	r0, [pc, #108]	; (80017e0 <MEMS_Init+0x98>)
 8001772:	f000 fabd 	bl	8001cf0 <LSM6DSL_RegisterBusIO>


	LSM6DSL_ReadID(&MotionSensor, &id);
 8001776:	f107 030b 	add.w	r3, r7, #11
 800177a:	4619      	mov	r1, r3
 800177c:	4818      	ldr	r0, [pc, #96]	; (80017e0 <MEMS_Init+0x98>)
 800177e:	f000 fb86 	bl	8001e8e <LSM6DSL_ReadID>
	if (id != LSM6DSL_ID)
 8001782:	7afb      	ldrb	r3, [r7, #11]
 8001784:	2b6a      	cmp	r3, #106	; 0x6a
 8001786:	d001      	beq.n	800178c <MEMS_Init+0x44>
	{
		Error_Handler();
 8001788:	f000 f842 	bl	8001810 <Error_Handler>
	}

	LSM6DSL_Init(&MotionSensor);
 800178c:	4814      	ldr	r0, [pc, #80]	; (80017e0 <MEMS_Init+0x98>)
 800178e:	f000 fb15 	bl	8001dbc <LSM6DSL_Init>


	LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f);
 8001792:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 8001796:	4812      	ldr	r0, [pc, #72]	; (80017e0 <MEMS_Init+0x98>)
 8001798:	f000 fbfa 	bl	8001f90 <LSM6DSL_ACC_SetOutputDataRate>
	LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);
 800179c:	2104      	movs	r1, #4
 800179e:	4810      	ldr	r0, [pc, #64]	; (80017e0 <MEMS_Init+0x98>)
 80017a0:	f000 fc12 	bl	8001fc8 <LSM6DSL_ACC_SetFullScale>
	LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);
 80017a4:	2101      	movs	r1, #1
 80017a6:	480e      	ldr	r0, [pc, #56]	; (80017e0 <MEMS_Init+0x98>)
 80017a8:	f000 fd97 	bl	80022da <LSM6DSL_ACC_Set_INT1_DRDY>
	LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	480b      	ldr	r0, [pc, #44]	; (80017e0 <MEMS_Init+0x98>)
 80017b2:	f000 fc31 	bl	8002018 <LSM6DSL_ACC_GetAxesRaw>

	LSM6DSL_ACC_Enable(&MotionSensor);
 80017b6:	480a      	ldr	r0, [pc, #40]	; (80017e0 <MEMS_Init+0x98>)
 80017b8:	f000 fb7f 	bl	8001eba <LSM6DSL_ACC_Enable>
	LSM6DSL_GYRO_Enable(&MotionSensor);
 80017bc:	4808      	ldr	r0, [pc, #32]	; (80017e0 <MEMS_Init+0x98>)
 80017be:	f000 fca6 	bl	800210e <LSM6DSL_GYRO_Enable>
	//LIS3MDL_MAG_Enable(&MotionSensor);
}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	08000dcd 	.word	0x08000dcd
 80017d0:	08000e49 	.word	0x08000e49
 80017d4:	08000efd 	.word	0x08000efd
 80017d8:	08000e99 	.word	0x08000e99
 80017dc:	08000f61 	.word	0x08000f61
 80017e0:	20000184 	.word	0x20000184

080017e4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_11)
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017f4:	d104      	bne.n	8001800 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		dataRdyIntReceived++;
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_GPIO_EXTI_Callback+0x28>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_GPIO_EXTI_Callback+0x28>)
 80017fe:	6013      	str	r3, [r2, #0]
	}
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	20000180 	.word	0x20000180

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001816:	e7fe      	b.n	8001816 <Error_Handler+0x6>

08001818 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_MspInit+0x44>)
 8001820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_MspInit+0x44>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6613      	str	r3, [r2, #96]	; 0x60
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_MspInit+0x44>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_MspInit+0x44>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <HAL_MspInit+0x44>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	6593      	str	r3, [r2, #88]	; 0x58
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_MspInit+0x44>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <HAL_TIM_PWM_MspInit+0x44>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d113      	bne.n	800189a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_TIM_PWM_MspInit+0x48>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <HAL_TIM_PWM_MspInit+0x48>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6593      	str	r3, [r2, #88]	; 0x58
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_TIM_PWM_MspInit+0x48>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	201d      	movs	r0, #29
 8001890:	f001 fc0b 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001894:	201d      	movs	r0, #29
 8001896:	f001 fc24 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40000400 	.word	0x40000400
 80018a8:	40021000 	.word	0x40021000

080018ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <HAL_TIM_Base_MspInit+0x44>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d113      	bne.n	80018e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <HAL_TIM_Base_MspInit+0x48>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <HAL_TIM_Base_MspInit+0x48>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6613      	str	r3, [r2, #96]	; 0x60
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_TIM_Base_MspInit+0x48>)
 80018cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	2018      	movs	r0, #24
 80018dc:	f001 fbe5 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80018e0:	2018      	movs	r0, #24
 80018e2:	f001 fbfe 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40014000 	.word	0x40014000
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a22      	ldr	r2, [pc, #136]	; (80019a0 <HAL_TIM_MspPostInit+0xa8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d11c      	bne.n	8001954 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <HAL_TIM_MspPostInit+0xac>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a21      	ldr	r2, [pc, #132]	; (80019a4 <HAL_TIM_MspPostInit+0xac>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001926:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <HAL_TIM_MspPostInit+0xac>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001932:	2310      	movs	r3, #16
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001942:	2302      	movs	r3, #2
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4816      	ldr	r0, [pc, #88]	; (80019a8 <HAL_TIM_MspPostInit+0xb0>)
 800194e:	f001 fc41 	bl	80031d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001952:	e021      	b.n	8001998 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM15)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <HAL_TIM_MspPostInit+0xb4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d11c      	bne.n	8001998 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_TIM_MspPostInit+0xac>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_TIM_MspPostInit+0xac>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_TIM_MspPostInit+0xac>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001976:	2308      	movs	r3, #8
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001986:	230e      	movs	r3, #14
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f001 fc1e 	bl	80031d4 <HAL_GPIO_Init>
}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40000400 	.word	0x40000400
 80019a4:	40021000 	.word	0x40021000
 80019a8:	48000400 	.word	0x48000400
 80019ac:	40014000 	.word	0x40014000

080019b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <HAL_UART_MspInit+0x8c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d12f      	bne.n	8001a32 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019d2:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_UART_MspInit+0x90>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d6:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <HAL_UART_MspInit+0x90>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019dc:	6613      	str	r3, [r2, #96]	; 0x60
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_UART_MspInit+0x90>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_UART_MspInit+0x90>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <HAL_UART_MspInit+0x90>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_UART_MspInit+0x90>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a02:	23c0      	movs	r3, #192	; 0xc0
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a12:	2307      	movs	r3, #7
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4809      	ldr	r0, [pc, #36]	; (8001a44 <HAL_UART_MspInit+0x94>)
 8001a1e:	f001 fbd9 	bl	80031d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2025      	movs	r0, #37	; 0x25
 8001a28:	f001 fb3f 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a2c:	2025      	movs	r0, #37	; 0x25
 8001a2e:	f001 fb58 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	; 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40013800 	.word	0x40013800
 8001a40:	40021000 	.word	0x40021000
 8001a44:	48000400 	.word	0x48000400

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <NMI_Handler+0x4>

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a94:	f001 fa0e 	bl	8002eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001aa2:	f004 fa6f 	bl	8005f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200000e8 	.word	0x200000e8

08001ab0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <TIM3_IRQHandler+0x10>)
 8001ab6:	f004 fa65 	bl	8005f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000134 	.word	0x20000134

08001ac4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <USART1_IRQHandler+0x10>)
 8001aca:	f005 fc83 	bl	80073d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200001b4 	.word	0x200001b4

08001ad8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001adc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ae0:	f001 fe14 	bl	800370c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e00a      	b.n	8001b10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001afa:	f7ff faf5 	bl	80010e8 <__io_getchar>
 8001afe:	4601      	mov	r1, r0
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	60ba      	str	r2, [r7, #8]
 8001b06:	b2ca      	uxtb	r2, r1
 8001b08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	dbf0      	blt.n	8001afa <_read+0x12>
	}

return len;
 8001b18:	687b      	ldr	r3, [r7, #4]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e009      	b.n	8001b48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	60ba      	str	r2, [r7, #8]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fabd 	bl	80010bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	dbf1      	blt.n	8001b34 <_write+0x12>
	}
	return len;
 8001b50:	687b      	ldr	r3, [r7, #4]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_close>:

int _close(int file)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
	return -1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b82:	605a      	str	r2, [r3, #4]
	return 0;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_isatty>:

int _isatty(int file)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
	return 1;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
	return 0;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bcc:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <_sbrk+0x5c>)
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <_sbrk+0x60>)
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d102      	bne.n	8001be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <_sbrk+0x64>)
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <_sbrk+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d207      	bcs.n	8001c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf4:	f006 fb4c 	bl	8008290 <__errno>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	230c      	movs	r3, #12
 8001bfc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	e009      	b.n	8001c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <_sbrk+0x64>)
 8001c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200a0000 	.word	0x200a0000
 8001c24:	00000400 	.word	0x00000400
 8001c28:	20000090 	.word	0x20000090
 8001c2c:	20000248 	.word	0x20000248

08001c30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <SystemInit+0x64>)
 8001c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3a:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <SystemInit+0x64>)
 8001c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <SystemInit+0x68>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a13      	ldr	r2, [pc, #76]	; (8001c98 <SystemInit+0x68>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <SystemInit+0x68>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <SystemInit+0x68>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <SystemInit+0x68>)
 8001c5c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c60:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <SystemInit+0x68>)
 8001c68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <SystemInit+0x68>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <SystemInit+0x68>)
 8001c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <SystemInit+0x68>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SystemInit+0x64>)
 8001c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c86:	609a      	str	r2, [r3, #8]
#endif
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00
 8001c98:	40021000 	.word	0x40021000

08001c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca0:	f7ff ffc6 	bl	8001c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ca4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ca6:	e003      	b.n	8001cb0 <LoopCopyDataInit>

08001ca8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001caa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cae:	3104      	adds	r1, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cb0:	480a      	ldr	r0, [pc, #40]	; (8001cdc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cb4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cb6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001cb8:	d3f6      	bcc.n	8001ca8 <CopyDataInit>
	ldr	r2, =_sbss
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001cbc:	e002      	b.n	8001cc4 <LoopFillZerobss>

08001cbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cbe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001cc0:	f842 3b04 	str.w	r3, [r2], #4

08001cc4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <LoopForever+0x16>)
	cmp	r2, r3
 8001cc6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cc8:	d3f9      	bcc.n	8001cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cca:	f006 fae7 	bl	800829c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cce:	f7ff fa23 	bl	8001118 <main>

08001cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cd2:	e7fe      	b.n	8001cd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cd4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001cd8:	08009224 	.word	0x08009224
	ldr	r0, =_sdata
 8001cdc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ce0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001ce4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001ce8:	20000248 	.word	0x20000248

08001cec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC1_IRQHandler>
	...

08001cf0 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	e04d      	b.n	8001da8 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	7b1a      	ldrb	r2, [r3, #12]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	699a      	ldr	r2, [r3, #24]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <LSM6DSL_RegisterBusIO+0xc4>)
 8001d48:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a1a      	ldr	r2, [pc, #104]	; (8001db8 <LSM6DSL_RegisterBusIO+0xc8>)
 8001d4e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e020      	b.n	8001da8 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4798      	blx	r3
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	e016      	b.n	8001da8 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d112      	bne.n	8001da8 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10d      	bne.n	8001da8 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001d8c:	230c      	movs	r3, #12
 8001d8e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8001d90:	7afb      	ldrb	r3, [r7, #11]
 8001d92:	461a      	mov	r2, r3
 8001d94:	2112      	movs	r1, #18
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fa84 	bl	80022a4 <LSM6DSL_Write_Reg>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001da8:	68fb      	ldr	r3, [r7, #12]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	08002561 	.word	0x08002561
 8001db8:	08002597 	.word	0x08002597

08001dbc <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	331c      	adds	r3, #28
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 fd99 	bl	8002902 <lsm6dsl_auto_increment_set>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dda:	e054      	b.n	8001e86 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	331c      	adds	r3, #28
 8001de0:	2101      	movs	r1, #1
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 fd34 	bl	8002850 <lsm6dsl_block_data_update_set>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
 8001df2:	e048      	b.n	8001e86 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	331c      	adds	r3, #28
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 ffe0 	bl	8002dc0 <lsm6dsl_fifo_mode_set>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	e03c      	b.n	8001e86 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2204      	movs	r2, #4
 8001e10:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	331c      	adds	r3, #28
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fc64 	bl	80026e8 <lsm6dsl_xl_data_rate_set>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	e02c      	b.n	8001e86 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	331c      	adds	r3, #28
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 fbfa 	bl	800262c <lsm6dsl_xl_full_scale_set>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	e020      	b.n	8001e86 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2204      	movs	r2, #4
 8001e48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	331c      	adds	r3, #28
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fcd6 	bl	8002804 <lsm6dsl_gy_data_rate_set>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e010      	b.n	8001e86 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	331c      	adds	r3, #28
 8001e68:	2106      	movs	r1, #6
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fc62 	bl	8002734 <lsm6dsl_gy_full_scale_set>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e004      	b.n	8001e86 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	331c      	adds	r3, #28
 8001e9c:	6839      	ldr	r1, [r7, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fd1e 	bl	80028e0 <lsm6dsl_device_id_get>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	e000      	b.n	8001eb2 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e014      	b.n	8001efa <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f103 021c 	add.w	r2, r3, #28
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f000 fc02 	bl	80026e8 <lsm6dsl_xl_data_rate_set>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e004      	b.n	8001efa <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	331c      	adds	r3, #28
 8001f16:	f107 020b 	add.w	r2, r7, #11
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 fbab 	bl	8002678 <lsm6dsl_xl_full_scale_get>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2c:	e023      	b.n	8001f76 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8001f2e:	7afb      	ldrb	r3, [r7, #11]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d81b      	bhi.n	8001f6c <LSM6DSL_ACC_GetSensitivity+0x68>
 8001f34:	a201      	add	r2, pc, #4	; (adr r2, 8001f3c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8001f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3a:	bf00      	nop
 8001f3c:	08001f4d 	.word	0x08001f4d
 8001f40:	08001f65 	.word	0x08001f65
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f5d 	.word	0x08001f5d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8001f50:	601a      	str	r2, [r3, #0]
      break;
 8001f52:	e00f      	b.n	8001f74 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8001f58:	601a      	str	r2, [r3, #0]
      break;
 8001f5a:	e00b      	b.n	8001f74 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8001f60:	601a      	str	r2, [r3, #0]
      break;
 8001f62:	e007      	b.n	8001f74 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <LSM6DSL_ACC_GetSensitivity+0x88>)
 8001f68:	601a      	str	r2, [r3, #0]
      break;
 8001f6a:	e003      	b.n	8001f74 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	60fb      	str	r3, [r7, #12]
      break;
 8001f72:	bf00      	nop
  }

  return ret;
 8001f74:	68fb      	ldr	r3, [r7, #12]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	3d79db23 	.word	0x3d79db23
 8001f84:	3df9db23 	.word	0x3df9db23
 8001f88:	3e79db23 	.word	0x3e79db23
 8001f8c:	3ef9db23 	.word	0x3ef9db23

08001f90 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d106      	bne.n	8001fb4 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001fa6:	ed97 0a00 	vldr	s0, [r7]
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f9ca 	bl	8002344 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	e005      	b.n	8001fc0 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001fb4:	ed97 0a00 	vldr	s0, [r7]
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fa4f 	bl	800245c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8001fbe:	4603      	mov	r3, r0
  }
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	dd0b      	ble.n	8001ff0 <LSM6DSL_ACC_SetFullScale+0x28>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	dd06      	ble.n	8001fec <LSM6DSL_ACC_SetFullScale+0x24>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	dc01      	bgt.n	8001fe8 <LSM6DSL_ACC_SetFullScale+0x20>
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e004      	b.n	8001ff2 <LSM6DSL_ACC_SetFullScale+0x2a>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e002      	b.n	8001ff2 <LSM6DSL_ACC_SetFullScale+0x2a>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e000      	b.n	8001ff2 <LSM6DSL_ACC_SetFullScale+0x2a>
 8001ff0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8001ff2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	331c      	adds	r3, #28
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fb15 	bl	800262c <lsm6dsl_xl_full_scale_set>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
 800200c:	e000      	b.n	8002010 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	331c      	adds	r3, #28
 8002026:	f107 0208 	add.w	r2, r7, #8
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fc46 	bl	80028be <lsm6dsl_acceleration_raw_get>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	e00c      	b.n	8002058 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800203e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002046:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800204e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	331c      	adds	r3, #28
 8002074:	f107 0210 	add.w	r2, r7, #16
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fc1f 	bl	80028be <lsm6dsl_acceleration_raw_get>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	e03c      	b.n	8002106 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	4619      	mov	r1, r3
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ff36 	bl	8001f04 <LSM6DSL_ACC_GetSensitivity>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	e030      	b.n	8002106 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80020a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80020b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020bc:	ee17 2a90 	vmov	r2, s15
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80020c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80020d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020dc:	ee17 2a90 	vmov	r2, s15
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80020e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020e8:	ee07 3a90 	vmov	s15, r3
 80020ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80020f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020fc:	ee17 2a90 	vmov	r2, s15
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e014      	b.n	800214e <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f103 021c 	add.w	r2, r3, #28
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f000 fb66 	bl	8002804 <lsm6dsl_gy_data_rate_set>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	e004      	b.n	800214e <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	331c      	adds	r3, #28
 800216a:	f107 020b 	add.w	r2, r7, #11
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fb05 	bl	8002780 <lsm6dsl_gy_full_scale_get>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
 8002180:	e02d      	b.n	80021de <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8002182:	7afb      	ldrb	r3, [r7, #11]
 8002184:	2b06      	cmp	r3, #6
 8002186:	d825      	bhi.n	80021d4 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8002188:	a201      	add	r2, pc, #4	; (adr r2, 8002190 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800218a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218e:	bf00      	nop
 8002190:	080021b5 	.word	0x080021b5
 8002194:	080021ad 	.word	0x080021ad
 8002198:	080021bd 	.word	0x080021bd
 800219c:	080021d5 	.word	0x080021d5
 80021a0:	080021c5 	.word	0x080021c5
 80021a4:	080021d5 	.word	0x080021d5
 80021a8:	080021cd 	.word	0x080021cd
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80021b0:	601a      	str	r2, [r3, #0]
      break;
 80021b2:	e013      	b.n	80021dc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80021b8:	601a      	str	r2, [r3, #0]
      break;
 80021ba:	e00f      	b.n	80021dc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80021c0:	601a      	str	r2, [r3, #0]
      break;
 80021c2:	e00b      	b.n	80021dc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80021c8:	601a      	str	r2, [r3, #0]
      break;
 80021ca:	e007      	b.n	80021dc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80021d0:	601a      	str	r2, [r3, #0]
      break;
 80021d2:	e003      	b.n	80021dc <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
 80021d8:	60fb      	str	r3, [r7, #12]
      break;
 80021da:	bf00      	nop
  }

  return ret;
 80021dc:	68fb      	ldr	r3, [r7, #12]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	408c0000 	.word	0x408c0000
 80021ec:	410c0000 	.word	0x410c0000
 80021f0:	418c0000 	.word	0x418c0000
 80021f4:	420c0000 	.word	0x420c0000
 80021f8:	428c0000 	.word	0x428c0000

080021fc <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	331c      	adds	r3, #28
 800220a:	f107 0210 	add.w	r2, r7, #16
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fb43 	bl	800289c <lsm6dsl_angular_rate_raw_get>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
 8002220:	e03c      	b.n	800229c <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff95 	bl	8002158 <LSM6DSL_GYRO_GetSensitivity>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8002234:	f04f 33ff 	mov.w	r3, #4294967295
 8002238:	e030      	b.n	800229c <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800223a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002246:	edd7 7a03 	vldr	s15, [r7, #12]
 800224a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002252:	ee17 2a90 	vmov	r2, s15
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800225a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002266:	edd7 7a03 	vldr	s15, [r7, #12]
 800226a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002272:	ee17 2a90 	vmov	r2, s15
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800227a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002286:	edd7 7a03 	vldr	s15, [r7, #12]
 800228a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002292:	ee17 2a90 	vmov	r2, s15
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	70fb      	strb	r3, [r7, #3]
 80022b0:	4613      	mov	r3, r2
 80022b2:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f103 001c 	add.w	r0, r3, #28
 80022ba:	1cba      	adds	r2, r7, #2
 80022bc:	78f9      	ldrb	r1, [r7, #3]
 80022be:	2301      	movs	r3, #1
 80022c0:	f000 f99c 	bl	80025fc <lsm6dsl_write_reg>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	e000      	b.n	80022d2 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <LSM6DSL_ACC_Set_INT1_DRDY>:
 * @param  pObj the device pObj
 * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	331c      	adds	r3, #28
 80022ea:	f107 020c 	add.w	r2, r7, #12
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fc8f 	bl	8002c14 <lsm6dsl_pin_int1_route_get>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 80022fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002300:	e01b      	b.n	800233a <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d811      	bhi.n	800232c <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	b2da      	uxtb	r2, r3
 8002310:	7b3b      	ldrb	r3, [r7, #12]
 8002312:	f362 0300 	bfi	r3, r2, #0, #1
 8002316:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	331c      	adds	r3, #28
 800231c:	68f9      	ldr	r1, [r7, #12]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fb15 	bl	800294e <lsm6dsl_pin_int1_route_set>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 800232a:	e002      	b.n	8002332 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
 8002330:	e003      	b.n	800233a <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
 8002336:	e000      	b.n	800233a <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002350:	edd7 7a00 	vldr	s15, [r7]
 8002354:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002360:	d801      	bhi.n	8002366 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8002362:	2301      	movs	r3, #1
 8002364:	e058      	b.n	8002418 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002366:	edd7 7a00 	vldr	s15, [r7]
 800236a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800236e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002376:	d801      	bhi.n	800237c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002378:	2302      	movs	r3, #2
 800237a:	e04d      	b.n	8002418 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800237c:	edd7 7a00 	vldr	s15, [r7]
 8002380:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002440 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8002384:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238c:	d801      	bhi.n	8002392 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800238e:	2303      	movs	r3, #3
 8002390:	e042      	b.n	8002418 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002392:	edd7 7a00 	vldr	s15, [r7]
 8002396:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002444 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800239a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800239e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a2:	d801      	bhi.n	80023a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80023a4:	2304      	movs	r3, #4
 80023a6:	e037      	b.n	8002418 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80023a8:	edd7 7a00 	vldr	s15, [r7]
 80023ac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002448 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 80023b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b8:	d801      	bhi.n	80023be <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80023ba:	2305      	movs	r3, #5
 80023bc:	e02c      	b.n	8002418 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80023be:	edd7 7a00 	vldr	s15, [r7]
 80023c2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800244c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80023c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ce:	d801      	bhi.n	80023d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80023d0:	2306      	movs	r3, #6
 80023d2:	e021      	b.n	8002418 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80023d4:	edd7 7a00 	vldr	s15, [r7]
 80023d8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002450 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80023dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e4:	d801      	bhi.n	80023ea <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80023e6:	2307      	movs	r3, #7
 80023e8:	e016      	b.n	8002418 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80023ea:	edd7 7a00 	vldr	s15, [r7]
 80023ee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002454 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80023f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fa:	d801      	bhi.n	8002400 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80023fc:	2308      	movs	r3, #8
 80023fe:	e00b      	b.n	8002418 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002400:	edd7 7a00 	vldr	s15, [r7]
 8002404:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002458 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8002408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002410:	d801      	bhi.n	8002416 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8002412:	2309      	movs	r3, #9
 8002414:	e000      	b.n	8002418 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002416:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8002418:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	331c      	adds	r3, #28
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f960 	bl	80026e8 <lsm6dsl_xl_data_rate_set>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	e000      	b.n	8002436 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	42500000 	.word	0x42500000
 8002444:	42d00000 	.word	0x42d00000
 8002448:	43500000 	.word	0x43500000
 800244c:	43d00000 	.word	0x43d00000
 8002450:	44504000 	.word	0x44504000
 8002454:	44cf8000 	.word	0x44cf8000
 8002458:	45502000 	.word	0x45502000

0800245c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002468:	edd7 7a00 	vldr	s15, [r7]
 800246c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002478:	d801      	bhi.n	800247e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800247a:	2301      	movs	r3, #1
 800247c:	e058      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800247e:	edd7 7a00 	vldr	s15, [r7]
 8002482:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	d801      	bhi.n	8002494 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002490:	2302      	movs	r3, #2
 8002492:	e04d      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002494:	edd7 7a00 	vldr	s15, [r7]
 8002498:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002544 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800249c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	d801      	bhi.n	80024aa <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e042      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80024aa:	edd7 7a00 	vldr	s15, [r7]
 80024ae:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002548 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 80024b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	d801      	bhi.n	80024c0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 80024bc:	2304      	movs	r3, #4
 80024be:	e037      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80024c0:	edd7 7a00 	vldr	s15, [r7]
 80024c4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800254c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80024c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	d801      	bhi.n	80024d6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80024d2:	2305      	movs	r3, #5
 80024d4:	e02c      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80024d6:	edd7 7a00 	vldr	s15, [r7]
 80024da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002550 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80024de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e6:	d801      	bhi.n	80024ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80024e8:	2306      	movs	r3, #6
 80024ea:	e021      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80024ec:	edd7 7a00 	vldr	s15, [r7]
 80024f0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002554 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80024f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fc:	d801      	bhi.n	8002502 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80024fe:	2307      	movs	r3, #7
 8002500:	e016      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002502:	edd7 7a00 	vldr	s15, [r7]
 8002506:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002558 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800250a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	d801      	bhi.n	8002518 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8002514:	2308      	movs	r3, #8
 8002516:	e00b      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002518:	edd7 7a00 	vldr	s15, [r7]
 800251c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800255c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	d801      	bhi.n	800252e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800252a:	2309      	movs	r3, #9
 800252c:	e000      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800252e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	42500000 	.word	0x42500000
 8002548:	42d00000 	.word	0x42d00000
 800254c:	43500000 	.word	0x43500000
 8002550:	43d00000 	.word	0x43d00000
 8002554:	44504000 	.word	0x44504000
 8002558:	44cf8000 	.word	0x44cf8000
 800255c:	45502000 	.word	0x45502000

08002560 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	461a      	mov	r2, r3
 800256c:	460b      	mov	r3, r1
 800256e:	72fb      	strb	r3, [r7, #11]
 8002570:	4613      	mov	r3, r2
 8002572:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	695c      	ldr	r4, [r3, #20]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	7b1b      	ldrb	r3, [r3, #12]
 8002580:	b298      	uxth	r0, r3
 8002582:	7afb      	ldrb	r3, [r7, #11]
 8002584:	b299      	uxth	r1, r3
 8002586:	893b      	ldrh	r3, [r7, #8]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	47a0      	blx	r4
 800258c:	4603      	mov	r3, r0
}
 800258e:	4618      	mov	r0, r3
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd90      	pop	{r4, r7, pc}

08002596 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002596:	b590      	push	{r4, r7, lr}
 8002598:	b087      	sub	sp, #28
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	461a      	mov	r2, r3
 80025a2:	460b      	mov	r3, r1
 80025a4:	72fb      	strb	r3, [r7, #11]
 80025a6:	4613      	mov	r3, r2
 80025a8:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	691c      	ldr	r4, [r3, #16]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	7b1b      	ldrb	r3, [r3, #12]
 80025b6:	b298      	uxth	r0, r3
 80025b8:	7afb      	ldrb	r3, [r7, #11]
 80025ba:	b299      	uxth	r1, r3
 80025bc:	893b      	ldrh	r3, [r7, #8]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	47a0      	blx	r4
 80025c2:	4603      	mov	r3, r0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd90      	pop	{r4, r7, pc}

080025cc <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	461a      	mov	r2, r3
 80025d8:	460b      	mov	r3, r1
 80025da:	72fb      	strb	r3, [r7, #11]
 80025dc:	4613      	mov	r3, r2
 80025de:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685c      	ldr	r4, [r3, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6898      	ldr	r0, [r3, #8]
 80025e8:	893b      	ldrh	r3, [r7, #8]
 80025ea:	7af9      	ldrb	r1, [r7, #11]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	47a0      	blx	r4
 80025f0:	6178      	str	r0, [r7, #20]
  return ret;
 80025f2:	697b      	ldr	r3, [r7, #20]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd90      	pop	{r4, r7, pc}

080025fc <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	461a      	mov	r2, r3
 8002608:	460b      	mov	r3, r1
 800260a:	72fb      	strb	r3, [r7, #11]
 800260c:	4613      	mov	r3, r2
 800260e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681c      	ldr	r4, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6898      	ldr	r0, [r3, #8]
 8002618:	893b      	ldrh	r3, [r7, #8]
 800261a:	7af9      	ldrb	r1, [r7, #11]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	47a0      	blx	r4
 8002620:	6178      	str	r0, [r7, #20]
  return ret;
 8002622:	697b      	ldr	r3, [r7, #20]
}
 8002624:	4618      	mov	r0, r3
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	bd90      	pop	{r4, r7, pc}

0800262c <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8002638:	f107 0208 	add.w	r2, r7, #8
 800263c:	2301      	movs	r3, #1
 800263e:	2110      	movs	r1, #16
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ffc3 	bl	80025cc <lsm6dsl_read_reg>
 8002646:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10f      	bne.n	800266e <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	b2da      	uxtb	r2, r3
 8002656:	7a3b      	ldrb	r3, [r7, #8]
 8002658:	f362 0383 	bfi	r3, r2, #2, #2
 800265c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800265e:	f107 0208 	add.w	r2, r7, #8
 8002662:	2301      	movs	r3, #1
 8002664:	2110      	movs	r1, #16
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ffc8 	bl	80025fc <lsm6dsl_write_reg>
 800266c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800266e:	68fb      	ldr	r3, [r7, #12]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8002682:	f107 0208 	add.w	r2, r7, #8
 8002686:	2301      	movs	r3, #1
 8002688:	2110      	movs	r1, #16
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ff9e 	bl	80025cc <lsm6dsl_read_reg>
 8002690:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8002692:	7a3b      	ldrb	r3, [r7, #8]
 8002694:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b03      	cmp	r3, #3
 800269c:	d81a      	bhi.n	80026d4 <lsm6dsl_xl_full_scale_get+0x5c>
 800269e:	a201      	add	r2, pc, #4	; (adr r2, 80026a4 <lsm6dsl_xl_full_scale_get+0x2c>)
 80026a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a4:	080026b5 	.word	0x080026b5
 80026a8:	080026bd 	.word	0x080026bd
 80026ac:	080026c5 	.word	0x080026c5
 80026b0:	080026cd 	.word	0x080026cd
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
      break;
 80026ba:	e00f      	b.n	80026dc <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
      break;
 80026c2:	e00b      	b.n	80026dc <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2202      	movs	r2, #2
 80026c8:	701a      	strb	r2, [r3, #0]
      break;
 80026ca:	e007      	b.n	80026dc <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2203      	movs	r2, #3
 80026d0:	701a      	strb	r2, [r3, #0]
      break;
 80026d2:	e003      	b.n	80026dc <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2204      	movs	r2, #4
 80026d8:	701a      	strb	r2, [r3, #0]
      break;
 80026da:	bf00      	nop
  }

  return ret;
 80026dc:	68fb      	ldr	r3, [r7, #12]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop

080026e8 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80026f4:	f107 0208 	add.w	r2, r7, #8
 80026f8:	2301      	movs	r3, #1
 80026fa:	2110      	movs	r1, #16
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff65 	bl	80025cc <lsm6dsl_read_reg>
 8002702:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10f      	bne.n	800272a <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	b2da      	uxtb	r2, r3
 8002712:	7a3b      	ldrb	r3, [r7, #8]
 8002714:	f362 1307 	bfi	r3, r2, #4, #4
 8002718:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800271a:	f107 0208 	add.w	r2, r7, #8
 800271e:	2301      	movs	r3, #1
 8002720:	2110      	movs	r1, #16
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff ff6a 	bl	80025fc <lsm6dsl_write_reg>
 8002728:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800272a:	68fb      	ldr	r3, [r7, #12]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8002740:	f107 0208 	add.w	r2, r7, #8
 8002744:	2301      	movs	r3, #1
 8002746:	2111      	movs	r1, #17
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff ff3f 	bl	80025cc <lsm6dsl_read_reg>
 800274e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	b2da      	uxtb	r2, r3
 800275e:	7a3b      	ldrb	r3, [r7, #8]
 8002760:	f362 0343 	bfi	r3, r2, #1, #3
 8002764:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8002766:	f107 0208 	add.w	r2, r7, #8
 800276a:	2301      	movs	r3, #1
 800276c:	2111      	movs	r1, #17
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff ff44 	bl	80025fc <lsm6dsl_write_reg>
 8002774:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002776:	68fb      	ldr	r3, [r7, #12]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800278a:	f107 0208 	add.w	r2, r7, #8
 800278e:	2301      	movs	r3, #1
 8002790:	2111      	movs	r1, #17
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ff1a 	bl	80025cc <lsm6dsl_read_reg>
 8002798:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 800279a:	7a3b      	ldrb	r3, [r7, #8]
 800279c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d824      	bhi.n	80027f0 <lsm6dsl_gy_full_scale_get+0x70>
 80027a6:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <lsm6dsl_gy_full_scale_get+0x2c>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027c9 	.word	0x080027c9
 80027b0:	080027d1 	.word	0x080027d1
 80027b4:	080027d9 	.word	0x080027d9
 80027b8:	080027f1 	.word	0x080027f1
 80027bc:	080027e1 	.word	0x080027e1
 80027c0:	080027f1 	.word	0x080027f1
 80027c4:	080027e9 	.word	0x080027e9
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
      break;
 80027ce:	e013      	b.n	80027f8 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
      break;
 80027d6:	e00f      	b.n	80027f8 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2202      	movs	r2, #2
 80027dc:	701a      	strb	r2, [r3, #0]
      break;
 80027de:	e00b      	b.n	80027f8 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2204      	movs	r2, #4
 80027e4:	701a      	strb	r2, [r3, #0]
      break;
 80027e6:	e007      	b.n	80027f8 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2206      	movs	r2, #6
 80027ec:	701a      	strb	r2, [r3, #0]
      break;
 80027ee:	e003      	b.n	80027f8 <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2207      	movs	r2, #7
 80027f4:	701a      	strb	r2, [r3, #0]
      break;
 80027f6:	bf00      	nop
  }

  return ret;
 80027f8:	68fb      	ldr	r3, [r7, #12]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop

08002804 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8002810:	f107 0208 	add.w	r2, r7, #8
 8002814:	2301      	movs	r3, #1
 8002816:	2111      	movs	r1, #17
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff fed7 	bl	80025cc <lsm6dsl_read_reg>
 800281e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10f      	bne.n	8002846 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	b2da      	uxtb	r2, r3
 800282e:	7a3b      	ldrb	r3, [r7, #8]
 8002830:	f362 1307 	bfi	r3, r2, #4, #4
 8002834:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8002836:	f107 0208 	add.w	r2, r7, #8
 800283a:	2301      	movs	r3, #1
 800283c:	2111      	movs	r1, #17
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff fedc 	bl	80025fc <lsm6dsl_write_reg>
 8002844:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002846:	68fb      	ldr	r3, [r7, #12]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800285c:	f107 0208 	add.w	r2, r7, #8
 8002860:	2301      	movs	r3, #1
 8002862:	2112      	movs	r1, #18
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff feb1 	bl	80025cc <lsm6dsl_read_reg>
 800286a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10f      	bne.n	8002892 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	b2da      	uxtb	r2, r3
 800287a:	7a3b      	ldrb	r3, [r7, #8]
 800287c:	f362 1386 	bfi	r3, r2, #6, #1
 8002880:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8002882:	f107 0208 	add.w	r2, r7, #8
 8002886:	2301      	movs	r3, #1
 8002888:	2112      	movs	r1, #18
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff feb6 	bl	80025fc <lsm6dsl_write_reg>
 8002890:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80028a6:	2306      	movs	r3, #6
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	2122      	movs	r1, #34	; 0x22
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff fe8d 	bl	80025cc <lsm6dsl_read_reg>
 80028b2:	60f8      	str	r0, [r7, #12]
  return ret;
 80028b4:	68fb      	ldr	r3, [r7, #12]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80028c8:	2306      	movs	r3, #6
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	2128      	movs	r1, #40	; 0x28
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff fe7c 	bl	80025cc <lsm6dsl_read_reg>
 80028d4:	60f8      	str	r0, [r7, #12]
  return ret;
 80028d6:	68fb      	ldr	r3, [r7, #12]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80028ea:	2301      	movs	r3, #1
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	210f      	movs	r1, #15
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fe6b 	bl	80025cc <lsm6dsl_read_reg>
 80028f6:	60f8      	str	r0, [r7, #12]
  return ret;
 80028f8:	68fb      	ldr	r3, [r7, #12]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800290e:	f107 0208 	add.w	r2, r7, #8
 8002912:	2301      	movs	r3, #1
 8002914:	2112      	movs	r1, #18
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff fe58 	bl	80025cc <lsm6dsl_read_reg>
 800291c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10f      	bne.n	8002944 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	b2da      	uxtb	r2, r3
 800292c:	7a3b      	ldrb	r3, [r7, #8]
 800292e:	f362 0382 	bfi	r3, r2, #2, #1
 8002932:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8002934:	f107 0208 	add.w	r2, r7, #8
 8002938:	2301      	movs	r3, #1
 800293a:	2112      	movs	r1, #18
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff fe5d 	bl	80025fc <lsm6dsl_write_reg>
 8002942:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002944:	68fb      	ldr	r3, [r7, #12]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b08a      	sub	sp, #40	; 0x28
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8002958:	f107 021c 	add.w	r2, r7, #28
 800295c:	2301      	movs	r3, #1
 800295e:	210d      	movs	r1, #13
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff fe33 	bl	80025cc <lsm6dsl_read_reg>
 8002966:	6278      	str	r0, [r7, #36]	; 0x24
  if(ret == 0){
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	2b00      	cmp	r3, #0
 800296c:	d147      	bne.n	80029fe <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 800296e:	783b      	ldrb	r3, [r7, #0]
 8002970:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002974:	b2da      	uxtb	r2, r3
 8002976:	7f3b      	ldrb	r3, [r7, #28]
 8002978:	f362 0300 	bfi	r3, r2, #0, #1
 800297c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 800297e:	783b      	ldrb	r3, [r7, #0]
 8002980:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002984:	b2da      	uxtb	r2, r3
 8002986:	7f3b      	ldrb	r3, [r7, #28]
 8002988:	f362 0341 	bfi	r3, r2, #1, #1
 800298c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 800298e:	783b      	ldrb	r3, [r7, #0]
 8002990:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002994:	b2da      	uxtb	r2, r3
 8002996:	7f3b      	ldrb	r3, [r7, #28]
 8002998:	f362 0382 	bfi	r3, r2, #2, #1
 800299c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 800299e:	783b      	ldrb	r3, [r7, #0]
 80029a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	7f3b      	ldrb	r3, [r7, #28]
 80029a8:	f362 03c3 	bfi	r3, r2, #3, #1
 80029ac:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 80029ae:	783b      	ldrb	r3, [r7, #0]
 80029b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	7f3b      	ldrb	r3, [r7, #28]
 80029b8:	f362 1304 	bfi	r3, r2, #4, #1
 80029bc:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 80029be:	783b      	ldrb	r3, [r7, #0]
 80029c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	7f3b      	ldrb	r3, [r7, #28]
 80029c8:	f362 1345 	bfi	r3, r2, #5, #1
 80029cc:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80029ce:	783b      	ldrb	r3, [r7, #0]
 80029d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	7f3b      	ldrb	r3, [r7, #28]
 80029d8:	f362 1386 	bfi	r3, r2, #6, #1
 80029dc:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 80029de:	783b      	ldrb	r3, [r7, #0]
 80029e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	7f3b      	ldrb	r3, [r7, #28]
 80029e8:	f362 13c7 	bfi	r3, r2, #7, #1
 80029ec:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 80029ee:	f107 021c 	add.w	r2, r7, #28
 80029f2:	2301      	movs	r3, #1
 80029f4:	210d      	movs	r1, #13
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fe00 	bl	80025fc <lsm6dsl_write_reg>
 80029fc:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d107      	bne.n	8002a14 <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8002a04:	f107 0218 	add.w	r2, r7, #24
 8002a08:	2301      	movs	r3, #1
 8002a0a:	215e      	movs	r1, #94	; 0x5e
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff fddd 	bl	80025cc <lsm6dsl_read_reg>
 8002a12:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d107      	bne.n	8002a2a <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 8002a1a:	f107 0214 	add.w	r2, r7, #20
 8002a1e:	2301      	movs	r3, #1
 8002a20:	215f      	movs	r1, #95	; 0x5f
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff fdd2 	bl	80025cc <lsm6dsl_read_reg>
 8002a28:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d147      	bne.n	8002ac0 <lsm6dsl_pin_int1_route_set+0x172>
        md1_cfg.int1_timer           = val.int1_timer;
 8002a30:	787b      	ldrb	r3, [r7, #1]
 8002a32:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	7e3b      	ldrb	r3, [r7, #24]
 8002a3a:	f362 0300 	bfi	r3, r2, #0, #1
 8002a3e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_tilt            = val.int1_tilt;
 8002a40:	787b      	ldrb	r3, [r7, #1]
 8002a42:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	7e3b      	ldrb	r3, [r7, #24]
 8002a4a:	f362 0341 	bfi	r3, r2, #1, #1
 8002a4e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_6d              = val.int1_6d;
 8002a50:	787b      	ldrb	r3, [r7, #1]
 8002a52:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	7e3b      	ldrb	r3, [r7, #24]
 8002a5a:	f362 0382 	bfi	r3, r2, #2, #1
 8002a5e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_double_tap      = val.int1_double_tap;
 8002a60:	787b      	ldrb	r3, [r7, #1]
 8002a62:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	7e3b      	ldrb	r3, [r7, #24]
 8002a6a:	f362 03c3 	bfi	r3, r2, #3, #1
 8002a6e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_ff              = val.int1_ff;
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	7e3b      	ldrb	r3, [r7, #24]
 8002a7a:	f362 1304 	bfi	r3, r2, #4, #1
 8002a7e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_wu              = val.int1_wu;
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	7e3b      	ldrb	r3, [r7, #24]
 8002a8a:	f362 1345 	bfi	r3, r2, #5, #1
 8002a8e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_single_tap      = val.int1_single_tap;
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	7e3b      	ldrb	r3, [r7, #24]
 8002a9a:	f362 1386 	bfi	r3, r2, #6, #1
 8002a9e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_inact_state     = val.int1_inact_state;
 8002aa0:	787b      	ldrb	r3, [r7, #1]
 8002aa2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	7e3b      	ldrb	r3, [r7, #24]
 8002aaa:	f362 13c7 	bfi	r3, r2, #7, #1
 8002aae:	763b      	strb	r3, [r7, #24]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8002ab0:	f107 0218 	add.w	r2, r7, #24
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	215e      	movs	r1, #94	; 0x5e
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff fd9f 	bl	80025fc <lsm6dsl_write_reg>
 8002abe:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d107      	bne.n	8002ad6 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8002ac6:	f107 0210 	add.w	r2, r7, #16
 8002aca:	2301      	movs	r3, #1
 8002acc:	2113      	movs	r1, #19
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff fd7c 	bl	80025cc <lsm6dsl_read_reg>
 8002ad4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10f      	bne.n	8002afc <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8002adc:	78bb      	ldrb	r3, [r7, #2]
 8002ade:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	7c3b      	ldrb	r3, [r7, #16]
 8002ae6:	f362 1304 	bfi	r3, r2, #4, #1
 8002aea:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8002aec:	f107 0210 	add.w	r2, r7, #16
 8002af0:	2301      	movs	r3, #1
 8002af2:	2113      	movs	r1, #19
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff fd81 	bl	80025fc <lsm6dsl_write_reg>
 8002afa:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002b02:	f107 0220 	add.w	r2, r7, #32
 8002b06:	2301      	movs	r3, #1
 8002b08:	211a      	movs	r1, #26
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff fd5e 	bl	80025cc <lsm6dsl_read_reg>
 8002b10:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d111      	bne.n	8002b3c <lsm6dsl_pin_int1_route_set+0x1ee>
     master_config.drdy_on_int1   = val.den_drdy_int1;
 8002b18:	78bb      	ldrb	r3, [r7, #2]
 8002b1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b24:	f362 13c7 	bfi	r3, r2, #7, #1
 8002b28:	f887 3020 	strb.w	r3, [r7, #32]
     ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002b2c:	f107 0220 	add.w	r2, r7, #32
 8002b30:	2301      	movs	r3, #1
 8002b32:	211a      	movs	r1, #26
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff fd61 	bl	80025fc <lsm6dsl_write_reg>
 8002b3a:	6278      	str	r0, [r7, #36]	; 0x24
                             (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d158      	bne.n	8002bf4 <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8002b42:	f107 020c 	add.w	r2, r7, #12
 8002b46:	2301      	movs	r3, #1
 8002b48:	2158      	movs	r1, #88	; 0x58
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff fd3e 	bl	80025cc <lsm6dsl_read_reg>
 8002b50:	6278      	str	r0, [r7, #36]	; 0x24
    if ((val.int1_6d != 0x00U) ||
 8002b52:	787b      	ldrb	r3, [r7, #1]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d141      	bne.n	8002be2 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8002b5e:	787b      	ldrb	r3, [r7, #1]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d13b      	bne.n	8002be2 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8002b6a:	787b      	ldrb	r3, [r7, #1]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d135      	bne.n	8002be2 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8002b76:	787b      	ldrb	r3, [r7, #1]
 8002b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7c:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d12f      	bne.n	8002be2 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8002b82:	787b      	ldrb	r3, [r7, #1]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d129      	bne.n	8002be2 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U)||
 8002b8e:	787b      	ldrb	r3, [r7, #1]
 8002b90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002b94:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d123      	bne.n	8002be2 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8002b9a:	7d3b      	ldrb	r3, [r7, #20]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U)||
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d11d      	bne.n	8002be2 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8002ba6:	7d3b      	ldrb	r3, [r7, #20]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d117      	bne.n	8002be2 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8002bb2:	7d3b      	ldrb	r3, [r7, #20]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d111      	bne.n	8002be2 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002bbe:	7d3b      	ldrb	r3, [r7, #20]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10b      	bne.n	8002be2 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002bca:	7d3b      	ldrb	r3, [r7, #20]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state!= 0x00U) ){
 8002bd6:	7d3b      	ldrb	r3, [r7, #20]
 8002bd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bdc:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d004      	beq.n	8002bec <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8002be2:	7b3b      	ldrb	r3, [r7, #12]
 8002be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be8:	733b      	strb	r3, [r7, #12]
 8002bea:	e003      	b.n	8002bf4 <lsm6dsl_pin_int1_route_set+0x2a6>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8002bec:	7b3b      	ldrb	r3, [r7, #12]
 8002bee:	f36f 13c7 	bfc	r3, #7, #1
 8002bf2:	733b      	strb	r3, [r7, #12]
    }
  }
  if(ret == 0){    
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d107      	bne.n	8002c0a <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8002bfa:	f107 020c 	add.w	r2, r7, #12
 8002bfe:	2301      	movs	r3, #1
 8002c00:	2158      	movs	r1, #88	; 0x58
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff fcfa 	bl	80025fc <lsm6dsl_write_reg>
 8002c08:	6278      	str	r0, [r7, #36]	; 0x24
  }
  return ret;
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3728      	adds	r7, #40	; 0x28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;

  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8002c1e:	f107 0214 	add.w	r2, r7, #20
 8002c22:	2301      	movs	r3, #1
 8002c24:	210d      	movs	r1, #13
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff fcd0 	bl	80025cc <lsm6dsl_read_reg>
 8002c2c:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 80c0 	bne.w	8002db6 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8002c36:	7d3b      	ldrb	r3, [r7, #20]
 8002c38:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002c3c:	b2d9      	uxtb	r1, r3
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	7813      	ldrb	r3, [r2, #0]
 8002c42:	f361 0300 	bfi	r3, r1, #0, #1
 8002c46:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8002c48:	7d3b      	ldrb	r3, [r7, #20]
 8002c4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002c4e:	b2d9      	uxtb	r1, r3
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	7813      	ldrb	r3, [r2, #0]
 8002c54:	f361 0341 	bfi	r3, r1, #1, #1
 8002c58:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8002c5a:	7d3b      	ldrb	r3, [r7, #20]
 8002c5c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c60:	b2d9      	uxtb	r1, r3
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	7813      	ldrb	r3, [r2, #0]
 8002c66:	f361 0382 	bfi	r3, r1, #2, #1
 8002c6a:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8002c6c:	7d3b      	ldrb	r3, [r7, #20]
 8002c6e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002c72:	b2d9      	uxtb	r1, r3
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	7813      	ldrb	r3, [r2, #0]
 8002c78:	f361 03c3 	bfi	r3, r1, #3, #1
 8002c7c:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8002c7e:	7d3b      	ldrb	r3, [r7, #20]
 8002c80:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c84:	b2d9      	uxtb	r1, r3
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	7813      	ldrb	r3, [r2, #0]
 8002c8a:	f361 1304 	bfi	r3, r1, #4, #1
 8002c8e:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 8002c90:	7d3b      	ldrb	r3, [r7, #20]
 8002c92:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002c96:	b2d9      	uxtb	r1, r3
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	7813      	ldrb	r3, [r2, #0]
 8002c9c:	f361 1345 	bfi	r3, r1, #5, #1
 8002ca0:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 8002ca2:	7d3b      	ldrb	r3, [r7, #20]
 8002ca4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002ca8:	b2d9      	uxtb	r1, r3
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	7813      	ldrb	r3, [r2, #0]
 8002cae:	f361 1386 	bfi	r3, r1, #6, #1
 8002cb2:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8002cb4:	7d3b      	ldrb	r3, [r7, #20]
 8002cb6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002cba:	b2d9      	uxtb	r1, r3
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	7813      	ldrb	r3, [r2, #0]
 8002cc0:	f361 13c7 	bfi	r3, r1, #7, #1
 8002cc4:	7013      	strb	r3, [r2, #0]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8002cc6:	f107 0210 	add.w	r2, r7, #16
 8002cca:	2301      	movs	r3, #1
 8002ccc:	215e      	movs	r1, #94	; 0x5e
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff fc7c 	bl	80025cc <lsm6dsl_read_reg>
 8002cd4:	61f8      	str	r0, [r7, #28]
    if(ret == 0){
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d16c      	bne.n	8002db6 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_timer       = md1_cfg.int1_timer;
 8002cdc:	7c3b      	ldrb	r3, [r7, #16]
 8002cde:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002ce2:	b2d9      	uxtb	r1, r3
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	7853      	ldrb	r3, [r2, #1]
 8002ce8:	f361 0300 	bfi	r3, r1, #0, #1
 8002cec:	7053      	strb	r3, [r2, #1]
    val->int1_tilt        = md1_cfg.int1_tilt;
 8002cee:	7c3b      	ldrb	r3, [r7, #16]
 8002cf0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002cf4:	b2d9      	uxtb	r1, r3
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	7853      	ldrb	r3, [r2, #1]
 8002cfa:	f361 0341 	bfi	r3, r1, #1, #1
 8002cfe:	7053      	strb	r3, [r2, #1]
    val->int1_6d          = md1_cfg.int1_6d;
 8002d00:	7c3b      	ldrb	r3, [r7, #16]
 8002d02:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002d06:	b2d9      	uxtb	r1, r3
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	7853      	ldrb	r3, [r2, #1]
 8002d0c:	f361 0382 	bfi	r3, r1, #2, #1
 8002d10:	7053      	strb	r3, [r2, #1]
    val->int1_double_tap  = md1_cfg.int1_double_tap;
 8002d12:	7c3b      	ldrb	r3, [r7, #16]
 8002d14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002d18:	b2d9      	uxtb	r1, r3
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	7853      	ldrb	r3, [r2, #1]
 8002d1e:	f361 03c3 	bfi	r3, r1, #3, #1
 8002d22:	7053      	strb	r3, [r2, #1]
    val->int1_ff          = md1_cfg.int1_ff;
 8002d24:	7c3b      	ldrb	r3, [r7, #16]
 8002d26:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002d2a:	b2d9      	uxtb	r1, r3
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	7853      	ldrb	r3, [r2, #1]
 8002d30:	f361 1304 	bfi	r3, r1, #4, #1
 8002d34:	7053      	strb	r3, [r2, #1]
    val->int1_wu          = md1_cfg.int1_wu;
 8002d36:	7c3b      	ldrb	r3, [r7, #16]
 8002d38:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002d3c:	b2d9      	uxtb	r1, r3
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	7853      	ldrb	r3, [r2, #1]
 8002d42:	f361 1345 	bfi	r3, r1, #5, #1
 8002d46:	7053      	strb	r3, [r2, #1]
    val->int1_single_tap  = md1_cfg.int1_single_tap;
 8002d48:	7c3b      	ldrb	r3, [r7, #16]
 8002d4a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002d4e:	b2d9      	uxtb	r1, r3
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	7853      	ldrb	r3, [r2, #1]
 8002d54:	f361 1386 	bfi	r3, r1, #6, #1
 8002d58:	7053      	strb	r3, [r2, #1]
    val->int1_inact_state = md1_cfg.int1_inact_state;
 8002d5a:	7c3b      	ldrb	r3, [r7, #16]
 8002d5c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002d60:	b2d9      	uxtb	r1, r3
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	7853      	ldrb	r3, [r2, #1]
 8002d66:	f361 13c7 	bfi	r3, r1, #7, #1
 8002d6a:	7053      	strb	r3, [r2, #1]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8002d6c:	f107 020c 	add.w	r2, r7, #12
 8002d70:	2301      	movs	r3, #1
 8002d72:	2113      	movs	r1, #19
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff fc29 	bl	80025cc <lsm6dsl_read_reg>
 8002d7a:	61f8      	str	r0, [r7, #28]
      if(ret == 0){
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d119      	bne.n	8002db6 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8002d82:	7b3b      	ldrb	r3, [r7, #12]
 8002d84:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002d88:	b2d9      	uxtb	r1, r3
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	7893      	ldrb	r3, [r2, #2]
 8002d8e:	f361 0300 	bfi	r3, r1, #0, #1
 8002d92:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002d94:	f107 0218 	add.w	r2, r7, #24
 8002d98:	2301      	movs	r3, #1
 8002d9a:	211a      	movs	r1, #26
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff fc15 	bl	80025cc <lsm6dsl_read_reg>
 8002da2:	61f8      	str	r0, [r7, #28]
                               (uint8_t*)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8002da4:	7e3b      	ldrb	r3, [r7, #24]
 8002da6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002daa:	b2d9      	uxtb	r1, r3
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	7893      	ldrb	r3, [r2, #2]
 8002db0:	f361 0300 	bfi	r3, r1, #0, #1
 8002db4:	7093      	strb	r3, [r2, #2]
      }
    }
  }
  return ret;
 8002db6:	69fb      	ldr	r3, [r7, #28]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3720      	adds	r7, #32
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8002dcc:	f107 0208 	add.w	r2, r7, #8
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	210a      	movs	r1, #10
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff fbf9 	bl	80025cc <lsm6dsl_read_reg>
 8002dda:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	7a3b      	ldrb	r3, [r7, #8]
 8002dec:	f362 0302 	bfi	r3, r2, #0, #3
 8002df0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8002df2:	f107 0208 	add.w	r2, r7, #8
 8002df6:	2301      	movs	r3, #1
 8002df8:	210a      	movs	r1, #10
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff fbfe 	bl	80025fc <lsm6dsl_write_reg>
 8002e00:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002e02:	68fb      	ldr	r3, [r7, #12]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e16:	2003      	movs	r0, #3
 8002e18:	f000 f93c 	bl	8003094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f000 f80d 	bl	8002e3c <HAL_InitTick>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	71fb      	strb	r3, [r7, #7]
 8002e2c:	e001      	b.n	8002e32 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e2e:	f7fe fcf3 	bl	8001818 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e32:	79fb      	ldrb	r3, [r7, #7]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e48:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <HAL_InitTick+0x6c>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d023      	beq.n	8002e98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_InitTick+0x70>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <HAL_InitTick+0x6c>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f949 	bl	80030fe <HAL_SYSTICK_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10f      	bne.n	8002e92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b0f      	cmp	r3, #15
 8002e76:	d809      	bhi.n	8002e8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	f000 f913 	bl	80030aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e84:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <HAL_InitTick+0x74>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e007      	b.n	8002e9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
 8002e90:	e004      	b.n	8002e9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	e001      	b.n	8002e9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000008 	.word	0x20000008
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	20000004 	.word	0x20000004

08002eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_IncTick+0x20>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_IncTick+0x24>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <HAL_IncTick+0x24>)
 8002ec6:	6013      	str	r3, [r2, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000008 	.word	0x20000008
 8002ed8:	20000240 	.word	0x20000240

08002edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <HAL_GetTick+0x14>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20000240 	.word	0x20000240

08002ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <__NVIC_SetPriorityGrouping+0x44>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f10:	4013      	ands	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f26:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <__NVIC_SetPriorityGrouping+0x44>)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	60d3      	str	r3, [r2, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <__NVIC_GetPriorityGrouping+0x18>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	f003 0307 	and.w	r3, r3, #7
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	db0b      	blt.n	8002f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	f003 021f 	and.w	r2, r3, #31
 8002f70:	4907      	ldr	r1, [pc, #28]	; (8002f90 <__NVIC_EnableIRQ+0x38>)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	2001      	movs	r0, #1
 8002f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000e100 	.word	0xe000e100

08002f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db0a      	blt.n	8002fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	490c      	ldr	r1, [pc, #48]	; (8002fe0 <__NVIC_SetPriority+0x4c>)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	0112      	lsls	r2, r2, #4
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fbc:	e00a      	b.n	8002fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4908      	ldr	r1, [pc, #32]	; (8002fe4 <__NVIC_SetPriority+0x50>)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	3b04      	subs	r3, #4
 8002fcc:	0112      	lsls	r2, r2, #4
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	761a      	strb	r2, [r3, #24]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000e100 	.word	0xe000e100
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f1c3 0307 	rsb	r3, r3, #7
 8003002:	2b04      	cmp	r3, #4
 8003004:	bf28      	it	cs
 8003006:	2304      	movcs	r3, #4
 8003008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3304      	adds	r3, #4
 800300e:	2b06      	cmp	r3, #6
 8003010:	d902      	bls.n	8003018 <NVIC_EncodePriority+0x30>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3b03      	subs	r3, #3
 8003016:	e000      	b.n	800301a <NVIC_EncodePriority+0x32>
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	f04f 32ff 	mov.w	r2, #4294967295
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	401a      	ands	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003030:	f04f 31ff 	mov.w	r1, #4294967295
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	43d9      	mvns	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	4313      	orrs	r3, r2
         );
}
 8003042:	4618      	mov	r0, r3
 8003044:	3724      	adds	r7, #36	; 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003060:	d301      	bcc.n	8003066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003062:	2301      	movs	r3, #1
 8003064:	e00f      	b.n	8003086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <SysTick_Config+0x40>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306e:	210f      	movs	r1, #15
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	f7ff ff8e 	bl	8002f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <SysTick_Config+0x40>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <SysTick_Config+0x40>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	e000e010 	.word	0xe000e010

08003094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff ff29 	bl	8002ef4 <__NVIC_SetPriorityGrouping>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030bc:	f7ff ff3e 	bl	8002f3c <__NVIC_GetPriorityGrouping>
 80030c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	f7ff ff8e 	bl	8002fe8 <NVIC_EncodePriority>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff5d 	bl	8002f94 <__NVIC_SetPriority>
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff31 	bl	8002f58 <__NVIC_EnableIRQ>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ffa2 	bl	8003050 <SysTick_Config>
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d005      	beq.n	800313a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2204      	movs	r2, #4
 8003132:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
 8003138:	e047      	b.n	80031ca <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 020e 	bic.w	r2, r2, #14
 8003148:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003168:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	f003 021c 	and.w	r2, r3, #28
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2101      	movs	r1, #1
 8003178:	fa01 f202 	lsl.w	r2, r1, r2
 800317c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003186:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00c      	beq.n	80031aa <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800319e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031a8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
    }
  }
  return status;
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e2:	e166      	b.n	80034b2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	2101      	movs	r1, #1
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	4013      	ands	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8158 	beq.w	80034ac <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d00b      	beq.n	800321c <HAL_GPIO_Init+0x48>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d007      	beq.n	800321c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003210:	2b11      	cmp	r3, #17
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b12      	cmp	r3, #18
 800321a:	d130      	bne.n	800327e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	2203      	movs	r2, #3
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003252:	2201      	movs	r2, #1
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	f003 0201 	and.w	r2, r3, #1
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	2203      	movs	r2, #3
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4013      	ands	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0xea>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b12      	cmp	r3, #18
 80032bc:	d123      	bne.n	8003306 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	08da      	lsrs	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3208      	adds	r2, #8
 80032c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	220f      	movs	r2, #15
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	08da      	lsrs	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3208      	adds	r2, #8
 8003300:	6939      	ldr	r1, [r7, #16]
 8003302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	2203      	movs	r2, #3
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4013      	ands	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0203 	and.w	r2, r3, #3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80b2 	beq.w	80034ac <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003348:	4b61      	ldr	r3, [pc, #388]	; (80034d0 <HAL_GPIO_Init+0x2fc>)
 800334a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334c:	4a60      	ldr	r2, [pc, #384]	; (80034d0 <HAL_GPIO_Init+0x2fc>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6613      	str	r3, [r2, #96]	; 0x60
 8003354:	4b5e      	ldr	r3, [pc, #376]	; (80034d0 <HAL_GPIO_Init+0x2fc>)
 8003356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003360:	4a5c      	ldr	r2, [pc, #368]	; (80034d4 <HAL_GPIO_Init+0x300>)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	3302      	adds	r3, #2
 8003368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	220f      	movs	r2, #15
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800338a:	d02b      	beq.n	80033e4 <HAL_GPIO_Init+0x210>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a52      	ldr	r2, [pc, #328]	; (80034d8 <HAL_GPIO_Init+0x304>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d025      	beq.n	80033e0 <HAL_GPIO_Init+0x20c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a51      	ldr	r2, [pc, #324]	; (80034dc <HAL_GPIO_Init+0x308>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d01f      	beq.n	80033dc <HAL_GPIO_Init+0x208>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a50      	ldr	r2, [pc, #320]	; (80034e0 <HAL_GPIO_Init+0x30c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d019      	beq.n	80033d8 <HAL_GPIO_Init+0x204>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a4f      	ldr	r2, [pc, #316]	; (80034e4 <HAL_GPIO_Init+0x310>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d013      	beq.n	80033d4 <HAL_GPIO_Init+0x200>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a4e      	ldr	r2, [pc, #312]	; (80034e8 <HAL_GPIO_Init+0x314>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00d      	beq.n	80033d0 <HAL_GPIO_Init+0x1fc>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a4d      	ldr	r2, [pc, #308]	; (80034ec <HAL_GPIO_Init+0x318>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d007      	beq.n	80033cc <HAL_GPIO_Init+0x1f8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a4c      	ldr	r2, [pc, #304]	; (80034f0 <HAL_GPIO_Init+0x31c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d101      	bne.n	80033c8 <HAL_GPIO_Init+0x1f4>
 80033c4:	2307      	movs	r3, #7
 80033c6:	e00e      	b.n	80033e6 <HAL_GPIO_Init+0x212>
 80033c8:	2308      	movs	r3, #8
 80033ca:	e00c      	b.n	80033e6 <HAL_GPIO_Init+0x212>
 80033cc:	2306      	movs	r3, #6
 80033ce:	e00a      	b.n	80033e6 <HAL_GPIO_Init+0x212>
 80033d0:	2305      	movs	r3, #5
 80033d2:	e008      	b.n	80033e6 <HAL_GPIO_Init+0x212>
 80033d4:	2304      	movs	r3, #4
 80033d6:	e006      	b.n	80033e6 <HAL_GPIO_Init+0x212>
 80033d8:	2303      	movs	r3, #3
 80033da:	e004      	b.n	80033e6 <HAL_GPIO_Init+0x212>
 80033dc:	2302      	movs	r3, #2
 80033de:	e002      	b.n	80033e6 <HAL_GPIO_Init+0x212>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <HAL_GPIO_Init+0x212>
 80033e4:	2300      	movs	r3, #0
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	f002 0203 	and.w	r2, r2, #3
 80033ec:	0092      	lsls	r2, r2, #2
 80033ee:	4093      	lsls	r3, r2
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033f6:	4937      	ldr	r1, [pc, #220]	; (80034d4 <HAL_GPIO_Init+0x300>)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	3302      	adds	r3, #2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003404:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <HAL_GPIO_Init+0x320>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	43db      	mvns	r3, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003428:	4a32      	ldr	r2, [pc, #200]	; (80034f4 <HAL_GPIO_Init+0x320>)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800342e:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <HAL_GPIO_Init+0x320>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	43db      	mvns	r3, r3
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4013      	ands	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003452:	4a28      	ldr	r2, [pc, #160]	; (80034f4 <HAL_GPIO_Init+0x320>)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003458:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <HAL_GPIO_Init+0x320>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	43db      	mvns	r3, r3
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4013      	ands	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800347c:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <HAL_GPIO_Init+0x320>)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003482:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <HAL_GPIO_Init+0x320>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	43db      	mvns	r3, r3
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034a6:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <HAL_GPIO_Init+0x320>)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	3301      	adds	r3, #1
 80034b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f47f ae91 	bne.w	80031e4 <HAL_GPIO_Init+0x10>
  }
}
 80034c2:	bf00      	nop
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40010000 	.word	0x40010000
 80034d8:	48000400 	.word	0x48000400
 80034dc:	48000800 	.word	0x48000800
 80034e0:	48000c00 	.word	0x48000c00
 80034e4:	48001000 	.word	0x48001000
 80034e8:	48001400 	.word	0x48001400
 80034ec:	48001800 	.word	0x48001800
 80034f0:	48001c00 	.word	0x48001c00
 80034f4:	40010400 	.word	0x40010400

080034f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003506:	e0c9      	b.n	800369c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003508:	2201      	movs	r2, #1
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80bc 	beq.w	8003696 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800351e:	4a66      	ldr	r2, [pc, #408]	; (80036b8 <HAL_GPIO_DeInit+0x1c0>)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3302      	adds	r3, #2
 8003526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	220f      	movs	r2, #15
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4013      	ands	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003546:	d02b      	beq.n	80035a0 <HAL_GPIO_DeInit+0xa8>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a5c      	ldr	r2, [pc, #368]	; (80036bc <HAL_GPIO_DeInit+0x1c4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d025      	beq.n	800359c <HAL_GPIO_DeInit+0xa4>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a5b      	ldr	r2, [pc, #364]	; (80036c0 <HAL_GPIO_DeInit+0x1c8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d01f      	beq.n	8003598 <HAL_GPIO_DeInit+0xa0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a5a      	ldr	r2, [pc, #360]	; (80036c4 <HAL_GPIO_DeInit+0x1cc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d019      	beq.n	8003594 <HAL_GPIO_DeInit+0x9c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a59      	ldr	r2, [pc, #356]	; (80036c8 <HAL_GPIO_DeInit+0x1d0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <HAL_GPIO_DeInit+0x98>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a58      	ldr	r2, [pc, #352]	; (80036cc <HAL_GPIO_DeInit+0x1d4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00d      	beq.n	800358c <HAL_GPIO_DeInit+0x94>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a57      	ldr	r2, [pc, #348]	; (80036d0 <HAL_GPIO_DeInit+0x1d8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d007      	beq.n	8003588 <HAL_GPIO_DeInit+0x90>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a56      	ldr	r2, [pc, #344]	; (80036d4 <HAL_GPIO_DeInit+0x1dc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <HAL_GPIO_DeInit+0x8c>
 8003580:	2307      	movs	r3, #7
 8003582:	e00e      	b.n	80035a2 <HAL_GPIO_DeInit+0xaa>
 8003584:	2308      	movs	r3, #8
 8003586:	e00c      	b.n	80035a2 <HAL_GPIO_DeInit+0xaa>
 8003588:	2306      	movs	r3, #6
 800358a:	e00a      	b.n	80035a2 <HAL_GPIO_DeInit+0xaa>
 800358c:	2305      	movs	r3, #5
 800358e:	e008      	b.n	80035a2 <HAL_GPIO_DeInit+0xaa>
 8003590:	2304      	movs	r3, #4
 8003592:	e006      	b.n	80035a2 <HAL_GPIO_DeInit+0xaa>
 8003594:	2303      	movs	r3, #3
 8003596:	e004      	b.n	80035a2 <HAL_GPIO_DeInit+0xaa>
 8003598:	2302      	movs	r3, #2
 800359a:	e002      	b.n	80035a2 <HAL_GPIO_DeInit+0xaa>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_GPIO_DeInit+0xaa>
 80035a0:	2300      	movs	r3, #0
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	f002 0203 	and.w	r2, r2, #3
 80035a8:	0092      	lsls	r2, r2, #2
 80035aa:	4093      	lsls	r3, r2
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d132      	bne.n	8003618 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80035b2:	4b49      	ldr	r3, [pc, #292]	; (80036d8 <HAL_GPIO_DeInit+0x1e0>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	4947      	ldr	r1, [pc, #284]	; (80036d8 <HAL_GPIO_DeInit+0x1e0>)
 80035bc:	4013      	ands	r3, r2
 80035be:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80035c0:	4b45      	ldr	r3, [pc, #276]	; (80036d8 <HAL_GPIO_DeInit+0x1e0>)
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	4943      	ldr	r1, [pc, #268]	; (80036d8 <HAL_GPIO_DeInit+0x1e0>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80035ce:	4b42      	ldr	r3, [pc, #264]	; (80036d8 <HAL_GPIO_DeInit+0x1e0>)
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	4940      	ldr	r1, [pc, #256]	; (80036d8 <HAL_GPIO_DeInit+0x1e0>)
 80035d8:	4013      	ands	r3, r2
 80035da:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80035dc:	4b3e      	ldr	r3, [pc, #248]	; (80036d8 <HAL_GPIO_DeInit+0x1e0>)
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	493c      	ldr	r1, [pc, #240]	; (80036d8 <HAL_GPIO_DeInit+0x1e0>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	220f      	movs	r2, #15
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80035fa:	4a2f      	ldr	r2, [pc, #188]	; (80036b8 <HAL_GPIO_DeInit+0x1c0>)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	089b      	lsrs	r3, r3, #2
 8003600:	3302      	adds	r3, #2
 8003602:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	43da      	mvns	r2, r3
 800360a:	482b      	ldr	r0, [pc, #172]	; (80036b8 <HAL_GPIO_DeInit+0x1c0>)
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	400a      	ands	r2, r1
 8003612:	3302      	adds	r3, #2
 8003614:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	2103      	movs	r1, #3
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	08da      	lsrs	r2, r3, #3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3208      	adds	r2, #8
 8003634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	220f      	movs	r2, #15
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	08d2      	lsrs	r2, r2, #3
 800364c:	4019      	ands	r1, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3208      	adds	r2, #8
 8003652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2103      	movs	r1, #3
 8003660:	fa01 f303 	lsl.w	r3, r1, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	401a      	ands	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	2101      	movs	r1, #1
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	401a      	ands	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	2103      	movs	r1, #3
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	401a      	ands	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	3301      	adds	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f47f af2f 	bne.w	8003508 <HAL_GPIO_DeInit+0x10>
  }
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40010000 	.word	0x40010000
 80036bc:	48000400 	.word	0x48000400
 80036c0:	48000800 	.word	0x48000800
 80036c4:	48000c00 	.word	0x48000c00
 80036c8:	48001000 	.word	0x48001000
 80036cc:	48001400 	.word	0x48001400
 80036d0:	48001800 	.word	0x48001800
 80036d4:	48001c00 	.word	0x48001c00
 80036d8:	40010400 	.word	0x40010400

080036dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	807b      	strh	r3, [r7, #2]
 80036e8:	4613      	mov	r3, r2
 80036ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036ec:	787b      	ldrb	r3, [r7, #1]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036f2:	887a      	ldrh	r2, [r7, #2]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036f8:	e002      	b.n	8003700 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036fa:	887a      	ldrh	r2, [r7, #2]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003716:	4b08      	ldr	r3, [pc, #32]	; (8003738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d006      	beq.n	8003730 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003722:	4a05      	ldr	r2, [pc, #20]	; (8003738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe f85a 	bl	80017e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40010400 	.word	0x40010400

0800373c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e081      	b.n	8003852 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f8a8 	bl	80038b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2224      	movs	r2, #36	; 0x24
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800378c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800379c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d107      	bne.n	80037b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	e006      	b.n	80037c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d104      	bne.n	80037d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	ea42 0103 	orr.w	r1, r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	021a      	lsls	r2, r3, #8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69d9      	ldr	r1, [r3, #28]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1a      	ldr	r2, [r3, #32]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e021      	b.n	80038b0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2224      	movs	r2, #36	; 0x24
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f821 	bl	80038cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	4608      	mov	r0, r1
 80038ea:	4611      	mov	r1, r2
 80038ec:	461a      	mov	r2, r3
 80038ee:	4603      	mov	r3, r0
 80038f0:	817b      	strh	r3, [r7, #10]
 80038f2:	460b      	mov	r3, r1
 80038f4:	813b      	strh	r3, [r7, #8]
 80038f6:	4613      	mov	r3, r2
 80038f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b20      	cmp	r3, #32
 8003904:	f040 80f9 	bne.w	8003afa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_I2C_Mem_Write+0x34>
 800390e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	d105      	bne.n	8003920 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0ed      	b.n	8003afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_I2C_Mem_Write+0x4e>
 800392a:	2302      	movs	r3, #2
 800392c:	e0e6      	b.n	8003afc <HAL_I2C_Mem_Write+0x21c>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003936:	f7ff fad1 	bl	8002edc <HAL_GetTick>
 800393a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2319      	movs	r3, #25
 8003942:	2201      	movs	r2, #1
 8003944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fadd 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0d1      	b.n	8003afc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2221      	movs	r2, #33	; 0x21
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2240      	movs	r2, #64	; 0x40
 8003964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003980:	88f8      	ldrh	r0, [r7, #6]
 8003982:	893a      	ldrh	r2, [r7, #8]
 8003984:	8979      	ldrh	r1, [r7, #10]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	4603      	mov	r3, r0
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f9ed 	bl	8003d70 <I2C_RequestMemoryWrite>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0a9      	b.n	8003afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2bff      	cmp	r3, #255	; 0xff
 80039b0:	d90e      	bls.n	80039d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	22ff      	movs	r2, #255	; 0xff
 80039b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	8979      	ldrh	r1, [r7, #10]
 80039c0:	2300      	movs	r3, #0
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fbbf 	bl	800414c <I2C_TransferConfig>
 80039ce:	e00f      	b.n	80039f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	8979      	ldrh	r1, [r7, #10]
 80039e2:	2300      	movs	r3, #0
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fbae 	bl	800414c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fac7 	bl	8003f88 <I2C_WaitOnTXISFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e07b      	b.n	8003afc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d034      	beq.n	8003aa8 <HAL_I2C_Mem_Write+0x1c8>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d130      	bne.n	8003aa8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2180      	movs	r1, #128	; 0x80
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fa59 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e04d      	b.n	8003afc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2bff      	cmp	r3, #255	; 0xff
 8003a68:	d90e      	bls.n	8003a88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	22ff      	movs	r2, #255	; 0xff
 8003a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	8979      	ldrh	r1, [r7, #10]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fb63 	bl	800414c <I2C_TransferConfig>
 8003a86:	e00f      	b.n	8003aa8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	8979      	ldrh	r1, [r7, #10]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fb52 	bl	800414c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d19e      	bne.n	80039f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 faa6 	bl	8004008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e01a      	b.n	8003afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2220      	movs	r2, #32
 8003acc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <HAL_I2C_Mem_Write+0x224>)
 8003ada:	400b      	ands	r3, r1
 8003adc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e000      	b.n	8003afc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
  }
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	fe00e800 	.word	0xfe00e800

08003b08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	817b      	strh	r3, [r7, #10]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	813b      	strh	r3, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	f040 80fd 	bne.w	8003d2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_I2C_Mem_Read+0x34>
 8003b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d105      	bne.n	8003b48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0f1      	b.n	8003d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_I2C_Mem_Read+0x4e>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e0ea      	b.n	8003d2c <HAL_I2C_Mem_Read+0x224>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b5e:	f7ff f9bd 	bl	8002edc <HAL_GetTick>
 8003b62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	2319      	movs	r3, #25
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f9c9 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0d5      	b.n	8003d2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2222      	movs	r2, #34	; 0x22
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2240      	movs	r2, #64	; 0x40
 8003b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a3a      	ldr	r2, [r7, #32]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ba8:	88f8      	ldrh	r0, [r7, #6]
 8003baa:	893a      	ldrh	r2, [r7, #8]
 8003bac:	8979      	ldrh	r1, [r7, #10]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f92d 	bl	8003e18 <I2C_RequestMemoryRead>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0ad      	b.n	8003d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2bff      	cmp	r3, #255	; 0xff
 8003bd8:	d90e      	bls.n	8003bf8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	22ff      	movs	r2, #255	; 0xff
 8003bde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	8979      	ldrh	r1, [r7, #10]
 8003be8:	4b52      	ldr	r3, [pc, #328]	; (8003d34 <HAL_I2C_Mem_Read+0x22c>)
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 faab 	bl	800414c <I2C_TransferConfig>
 8003bf6:	e00f      	b.n	8003c18 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	8979      	ldrh	r1, [r7, #10]
 8003c0a:	4b4a      	ldr	r3, [pc, #296]	; (8003d34 <HAL_I2C_Mem_Read+0x22c>)
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fa9a 	bl	800414c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2104      	movs	r1, #4
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f970 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e07c      	b.n	8003d2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d034      	beq.n	8003cd8 <HAL_I2C_Mem_Read+0x1d0>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d130      	bne.n	8003cd8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f941 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e04d      	b.n	8003d2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2bff      	cmp	r3, #255	; 0xff
 8003c98:	d90e      	bls.n	8003cb8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	22ff      	movs	r2, #255	; 0xff
 8003c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	8979      	ldrh	r1, [r7, #10]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fa4b 	bl	800414c <I2C_TransferConfig>
 8003cb6:	e00f      	b.n	8003cd8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	8979      	ldrh	r1, [r7, #10]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fa3a 	bl	800414c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d19a      	bne.n	8003c18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f98e 	bl	8004008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e01a      	b.n	8003d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_I2C_Mem_Read+0x230>)
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e000      	b.n	8003d2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
  }
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	80002400 	.word	0x80002400
 8003d38:	fe00e800 	.word	0xfe00e800

08003d3c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4a:	b2db      	uxtb	r3, r3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4603      	mov	r3, r0
 8003d80:	817b      	strh	r3, [r7, #10]
 8003d82:	460b      	mov	r3, r1
 8003d84:	813b      	strh	r3, [r7, #8]
 8003d86:	4613      	mov	r3, r2
 8003d88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	8979      	ldrh	r1, [r7, #10]
 8003d90:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <I2C_RequestMemoryWrite+0xa4>)
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f9d7 	bl	800414c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	69b9      	ldr	r1, [r7, #24]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f8f0 	bl	8003f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e02c      	b.n	8003e0c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d105      	bne.n	8003dc4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003db8:	893b      	ldrh	r3, [r7, #8]
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc2:	e015      	b.n	8003df0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dc4:	893b      	ldrh	r3, [r7, #8]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	69b9      	ldr	r1, [r7, #24]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f8d6 	bl	8003f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e012      	b.n	8003e0c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003de6:	893b      	ldrh	r3, [r7, #8]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2200      	movs	r2, #0
 8003df8:	2180      	movs	r1, #128	; 0x80
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f884 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	80002000 	.word	0x80002000

08003e18 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	4608      	mov	r0, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	461a      	mov	r2, r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	817b      	strh	r3, [r7, #10]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	813b      	strh	r3, [r7, #8]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	8979      	ldrh	r1, [r7, #10]
 8003e38:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <I2C_RequestMemoryRead+0xa4>)
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f984 	bl	800414c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	69b9      	ldr	r1, [r7, #24]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f89d 	bl	8003f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e02c      	b.n	8003eb2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d105      	bne.n	8003e6a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e5e:	893b      	ldrh	r3, [r7, #8]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
 8003e68:	e015      	b.n	8003e96 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e6a:	893b      	ldrh	r3, [r7, #8]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	69b9      	ldr	r1, [r7, #24]
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f883 	bl	8003f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e012      	b.n	8003eb2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e8c:	893b      	ldrh	r3, [r7, #8]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2140      	movs	r1, #64	; 0x40
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f831 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	80002000 	.word	0x80002000

08003ec0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d103      	bne.n	8003ede <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d007      	beq.n	8003efc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	619a      	str	r2, [r3, #24]
  }
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f18:	e022      	b.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d01e      	beq.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7fe ffdb 	bl	8002edc <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d113      	bne.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	f043 0220 	orr.w	r2, r3, #32
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e00f      	b.n	8003f80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	bf0c      	ite	eq
 8003f70:	2301      	moveq	r3, #1
 8003f72:	2300      	movne	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d0cd      	beq.n	8003f1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f94:	e02c      	b.n	8003ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f870 	bl	8004080 <I2C_IsAcknowledgeFailed>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e02a      	b.n	8004000 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d01e      	beq.n	8003ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb2:	f7fe ff93 	bl	8002edc <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d302      	bcc.n	8003fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d113      	bne.n	8003ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fcc:	f043 0220 	orr.w	r2, r3, #32
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e007      	b.n	8004000 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d1cb      	bne.n	8003f96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004014:	e028      	b.n	8004068 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f830 	bl	8004080 <I2C_IsAcknowledgeFailed>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e026      	b.n	8004078 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402a:	f7fe ff57 	bl	8002edc <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	429a      	cmp	r2, r3
 8004038:	d302      	bcc.n	8004040 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d113      	bne.n	8004068 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e007      	b.n	8004078 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b20      	cmp	r3, #32
 8004074:	d1cf      	bne.n	8004016 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b10      	cmp	r3, #16
 8004098:	d151      	bne.n	800413e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800409a:	e022      	b.n	80040e2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a2:	d01e      	beq.n	80040e2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a4:	f7fe ff1a 	bl	8002edc <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d302      	bcc.n	80040ba <I2C_IsAcknowledgeFailed+0x3a>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d113      	bne.n	80040e2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	f043 0220 	orr.w	r2, r3, #32
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e02e      	b.n	8004140 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d1d5      	bne.n	800409c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2210      	movs	r2, #16
 80040f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2220      	movs	r2, #32
 80040fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff fedd 	bl	8003ec0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <I2C_IsAcknowledgeFailed+0xc8>)
 8004112:	400b      	ands	r3, r1
 8004114:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	f043 0204 	orr.w	r2, r3, #4
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	fe00e800 	.word	0xfe00e800

0800414c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	817b      	strh	r3, [r7, #10]
 800415a:	4613      	mov	r3, r2
 800415c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	0d5b      	lsrs	r3, r3, #21
 8004168:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800416c:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <I2C_TransferConfig+0x58>)
 800416e:	430b      	orrs	r3, r1
 8004170:	43db      	mvns	r3, r3
 8004172:	ea02 0103 	and.w	r1, r2, r3
 8004176:	897b      	ldrh	r3, [r7, #10]
 8004178:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800417c:	7a7b      	ldrb	r3, [r7, #9]
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	431a      	orrs	r2, r3
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	431a      	orrs	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	03ff63ff 	.word	0x03ff63ff

080041a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d138      	bne.n	8004230 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e032      	b.n	8004232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2224      	movs	r2, #36	; 0x24
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6819      	ldr	r1, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e000      	b.n	8004232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004230:	2302      	movs	r3, #2
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800423e:	b480      	push	{r7}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b20      	cmp	r3, #32
 8004252:	d139      	bne.n	80042c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800425e:	2302      	movs	r3, #2
 8004260:	e033      	b.n	80042ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2224      	movs	r2, #36	; 0x24
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0201 	bic.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004290:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	e000      	b.n	80042ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
  }
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <HAL_PWREx_GetVoltageRange+0x3c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e8:	d102      	bne.n	80042f0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80042ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ee:	e00b      	b.n	8004308 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_PWREx_GetVoltageRange+0x3c>)
 80042f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fe:	d102      	bne.n	8004306 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004304:	e000      	b.n	8004308 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004306:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004308:	4618      	mov	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40007000 	.word	0x40007000

08004318 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d141      	bne.n	80043aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004326:	4b4b      	ldr	r3, [pc, #300]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004332:	d131      	bne.n	8004398 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004334:	4b47      	ldr	r3, [pc, #284]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800433a:	4a46      	ldr	r2, [pc, #280]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004340:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004344:	4b43      	ldr	r3, [pc, #268]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800434c:	4a41      	ldr	r2, [pc, #260]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004352:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004354:	4b40      	ldr	r3, [pc, #256]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2232      	movs	r2, #50	; 0x32
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	4a3f      	ldr	r2, [pc, #252]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004360:	fba2 2303 	umull	r2, r3, r2, r3
 8004364:	0c9b      	lsrs	r3, r3, #18
 8004366:	3301      	adds	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800436a:	e002      	b.n	8004372 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3b01      	subs	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004372:	4b38      	ldr	r3, [pc, #224]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437e:	d102      	bne.n	8004386 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f2      	bne.n	800436c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004386:	4b33      	ldr	r3, [pc, #204]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004392:	d158      	bne.n	8004446 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e057      	b.n	8004448 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004398:	4b2e      	ldr	r3, [pc, #184]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800439e:	4a2d      	ldr	r2, [pc, #180]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043a8:	e04d      	b.n	8004446 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b0:	d141      	bne.n	8004436 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043b2:	4b28      	ldr	r3, [pc, #160]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043be:	d131      	bne.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043c0:	4b24      	ldr	r3, [pc, #144]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c6:	4a23      	ldr	r2, [pc, #140]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043d0:	4b20      	ldr	r3, [pc, #128]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043d8:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80043e0:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2232      	movs	r2, #50	; 0x32
 80043e6:	fb02 f303 	mul.w	r3, r2, r3
 80043ea:	4a1c      	ldr	r2, [pc, #112]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	0c9b      	lsrs	r3, r3, #18
 80043f2:	3301      	adds	r3, #1
 80043f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043f6:	e002      	b.n	80043fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440a:	d102      	bne.n	8004412 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f2      	bne.n	80043f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441e:	d112      	bne.n	8004446 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e011      	b.n	8004448 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800442a:	4a0a      	ldr	r2, [pc, #40]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004430:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004434:	e007      	b.n	8004446 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800443e:	4a05      	ldr	r2, [pc, #20]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004440:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004444:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40007000 	.word	0x40007000
 8004458:	20000000 	.word	0x20000000
 800445c:	431bde83 	.word	0x431bde83

08004460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f000 bc16 	b.w	8004ca0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004474:	4ba0      	ldr	r3, [pc, #640]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800447e:	4b9e      	ldr	r3, [pc, #632]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80e4 	beq.w	800465e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <HAL_RCC_OscConfig+0x4c>
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b0c      	cmp	r3, #12
 80044a0:	f040 808b 	bne.w	80045ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	f040 8087 	bne.w	80045ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ac:	4b92      	ldr	r3, [pc, #584]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_OscConfig+0x64>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e3ed      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1a      	ldr	r2, [r3, #32]
 80044c8:	4b8b      	ldr	r3, [pc, #556]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_RCC_OscConfig+0x7e>
 80044d4:	4b88      	ldr	r3, [pc, #544]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044dc:	e005      	b.n	80044ea <HAL_RCC_OscConfig+0x8a>
 80044de:	4b86      	ldr	r3, [pc, #536]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80044e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d223      	bcs.n	8004536 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fdc8 	bl	8005088 <RCC_SetFlashLatencyFromMSIRange>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e3ce      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004502:	4b7d      	ldr	r3, [pc, #500]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a7c      	ldr	r2, [pc, #496]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004508:	f043 0308 	orr.w	r3, r3, #8
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b7a      	ldr	r3, [pc, #488]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	4977      	ldr	r1, [pc, #476]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004520:	4b75      	ldr	r3, [pc, #468]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	4972      	ldr	r1, [pc, #456]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004530:	4313      	orrs	r3, r2
 8004532:	604b      	str	r3, [r1, #4]
 8004534:	e025      	b.n	8004582 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004536:	4b70      	ldr	r3, [pc, #448]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a6f      	ldr	r2, [pc, #444]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 800453c:	f043 0308 	orr.w	r3, r3, #8
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b6d      	ldr	r3, [pc, #436]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	496a      	ldr	r1, [pc, #424]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004554:	4b68      	ldr	r3, [pc, #416]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	4965      	ldr	r1, [pc, #404]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fd88 	bl	8005088 <RCC_SetFlashLatencyFromMSIRange>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e38e      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004582:	f000 fcbf 	bl	8004f04 <HAL_RCC_GetSysClockFreq>
 8004586:	4601      	mov	r1, r0
 8004588:	4b5b      	ldr	r3, [pc, #364]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	4a5a      	ldr	r2, [pc, #360]	; (80046fc <HAL_RCC_OscConfig+0x29c>)
 8004594:	5cd3      	ldrb	r3, [r2, r3]
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	fa21 f303 	lsr.w	r3, r1, r3
 800459e:	4a58      	ldr	r2, [pc, #352]	; (8004700 <HAL_RCC_OscConfig+0x2a0>)
 80045a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045a2:	4b58      	ldr	r3, [pc, #352]	; (8004704 <HAL_RCC_OscConfig+0x2a4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe fc48 	bl	8002e3c <HAL_InitTick>
 80045ac:	4603      	mov	r3, r0
 80045ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d052      	beq.n	800465c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	e372      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d032      	beq.n	8004628 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045c2:	4b4d      	ldr	r3, [pc, #308]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a4c      	ldr	r2, [pc, #304]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ce:	f7fe fc85 	bl	8002edc <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d6:	f7fe fc81 	bl	8002edc <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e35b      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045e8:	4b43      	ldr	r3, [pc, #268]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f4:	4b40      	ldr	r3, [pc, #256]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a3f      	ldr	r2, [pc, #252]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80045fa:	f043 0308 	orr.w	r3, r3, #8
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	4b3d      	ldr	r3, [pc, #244]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	493a      	ldr	r1, [pc, #232]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 800460e:	4313      	orrs	r3, r2
 8004610:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004612:	4b39      	ldr	r3, [pc, #228]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	4935      	ldr	r1, [pc, #212]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004622:	4313      	orrs	r3, r2
 8004624:	604b      	str	r3, [r1, #4]
 8004626:	e01a      	b.n	800465e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004628:	4b33      	ldr	r3, [pc, #204]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a32      	ldr	r2, [pc, #200]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 800462e:	f023 0301 	bic.w	r3, r3, #1
 8004632:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004634:	f7fe fc52 	bl	8002edc <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800463c:	f7fe fc4e 	bl	8002edc <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e328      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800464e:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x1dc>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800465c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d073      	beq.n	8004752 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d005      	beq.n	800467c <HAL_RCC_OscConfig+0x21c>
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b0c      	cmp	r3, #12
 8004674:	d10e      	bne.n	8004694 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b03      	cmp	r3, #3
 800467a:	d10b      	bne.n	8004694 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	4b1e      	ldr	r3, [pc, #120]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d063      	beq.n	8004750 <HAL_RCC_OscConfig+0x2f0>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d15f      	bne.n	8004750 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e305      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469c:	d106      	bne.n	80046ac <HAL_RCC_OscConfig+0x24c>
 800469e:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e01d      	b.n	80046e8 <HAL_RCC_OscConfig+0x288>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b4:	d10c      	bne.n	80046d0 <HAL_RCC_OscConfig+0x270>
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a0f      	ldr	r2, [pc, #60]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a0c      	ldr	r2, [pc, #48]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	e00b      	b.n	80046e8 <HAL_RCC_OscConfig+0x288>
 80046d0:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a08      	ldr	r2, [pc, #32]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a05      	ldr	r2, [pc, #20]	; (80046f8 <HAL_RCC_OscConfig+0x298>)
 80046e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01b      	beq.n	8004728 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f0:	f7fe fbf4 	bl	8002edc <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046f6:	e010      	b.n	800471a <HAL_RCC_OscConfig+0x2ba>
 80046f8:	40021000 	.word	0x40021000
 80046fc:	0800911c 	.word	0x0800911c
 8004700:	20000000 	.word	0x20000000
 8004704:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004708:	f7fe fbe8 	bl	8002edc <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	; 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e2c2      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800471a:	4baf      	ldr	r3, [pc, #700]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x2a8>
 8004726:	e014      	b.n	8004752 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fe fbd8 	bl	8002edc <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004730:	f7fe fbd4 	bl	8002edc <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	; 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e2ae      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004742:	4ba5      	ldr	r3, [pc, #660]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x2d0>
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d060      	beq.n	8004820 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d005      	beq.n	8004770 <HAL_RCC_OscConfig+0x310>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b0c      	cmp	r3, #12
 8004768:	d119      	bne.n	800479e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d116      	bne.n	800479e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004770:	4b99      	ldr	r3, [pc, #612]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_OscConfig+0x328>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e28b      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004788:	4b93      	ldr	r3, [pc, #588]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	4990      	ldr	r1, [pc, #576]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800479c:	e040      	b.n	8004820 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d023      	beq.n	80047ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a6:	4b8c      	ldr	r3, [pc, #560]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a8b      	ldr	r2, [pc, #556]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b2:	f7fe fb93 	bl	8002edc <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ba:	f7fe fb8f 	bl	8002edc <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e269      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047cc:	4b82      	ldr	r3, [pc, #520]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d8:	4b7f      	ldr	r3, [pc, #508]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	497c      	ldr	r1, [pc, #496]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]
 80047ec:	e018      	b.n	8004820 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ee:	4b7a      	ldr	r3, [pc, #488]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a79      	ldr	r2, [pc, #484]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fa:	f7fe fb6f 	bl	8002edc <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004802:	f7fe fb6b 	bl	8002edc <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e245      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004814:	4b70      	ldr	r3, [pc, #448]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f0      	bne.n	8004802 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d03c      	beq.n	80048a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01c      	beq.n	800486e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004834:	4b68      	ldr	r3, [pc, #416]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800483a:	4a67      	ldr	r2, [pc, #412]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fe fb4a 	bl	8002edc <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800484c:	f7fe fb46 	bl	8002edc <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e220      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800485e:	4b5e      	ldr	r3, [pc, #376]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ef      	beq.n	800484c <HAL_RCC_OscConfig+0x3ec>
 800486c:	e01b      	b.n	80048a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486e:	4b5a      	ldr	r3, [pc, #360]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004874:	4a58      	ldr	r2, [pc, #352]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487e:	f7fe fb2d 	bl	8002edc <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004886:	f7fe fb29 	bl	8002edc <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e203      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004898:	4b4f      	ldr	r3, [pc, #316]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 800489a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1ef      	bne.n	8004886 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80a6 	beq.w	8004a00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b4:	2300      	movs	r3, #0
 80048b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048b8:	4b47      	ldr	r3, [pc, #284]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10d      	bne.n	80048e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c4:	4b44      	ldr	r3, [pc, #272]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80048c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c8:	4a43      	ldr	r2, [pc, #268]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80048ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ce:	6593      	str	r3, [r2, #88]	; 0x58
 80048d0:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80048d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048dc:	2301      	movs	r3, #1
 80048de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e0:	4b3e      	ldr	r3, [pc, #248]	; (80049dc <HAL_RCC_OscConfig+0x57c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d118      	bne.n	800491e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ec:	4b3b      	ldr	r3, [pc, #236]	; (80049dc <HAL_RCC_OscConfig+0x57c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a3a      	ldr	r2, [pc, #232]	; (80049dc <HAL_RCC_OscConfig+0x57c>)
 80048f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f8:	f7fe faf0 	bl	8002edc <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004900:	f7fe faec 	bl	8002edc <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e1c6      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004912:	4b32      	ldr	r3, [pc, #200]	; (80049dc <HAL_RCC_OscConfig+0x57c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d108      	bne.n	8004938 <HAL_RCC_OscConfig+0x4d8>
 8004926:	4b2c      	ldr	r3, [pc, #176]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492c:	4a2a      	ldr	r2, [pc, #168]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004936:	e024      	b.n	8004982 <HAL_RCC_OscConfig+0x522>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b05      	cmp	r3, #5
 800493e:	d110      	bne.n	8004962 <HAL_RCC_OscConfig+0x502>
 8004940:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004946:	4a24      	ldr	r2, [pc, #144]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004948:	f043 0304 	orr.w	r3, r3, #4
 800494c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004950:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004956:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004960:	e00f      	b.n	8004982 <HAL_RCC_OscConfig+0x522>
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004968:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004972:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 8004974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004978:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 800497a:	f023 0304 	bic.w	r3, r3, #4
 800497e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d016      	beq.n	80049b8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498a:	f7fe faa7 	bl	8002edc <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004990:	e00a      	b.n	80049a8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004992:	f7fe faa3 	bl	8002edc <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e17b      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a8:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <HAL_RCC_OscConfig+0x578>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0ed      	beq.n	8004992 <HAL_RCC_OscConfig+0x532>
 80049b6:	e01a      	b.n	80049ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fe fa90 	bl	8002edc <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049be:	e00f      	b.n	80049e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fe fa8c 	bl	8002edc <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d906      	bls.n	80049e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e164      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000
 80049dc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049e0:	4ba8      	ldr	r3, [pc, #672]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e8      	bne.n	80049c0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ee:	7ffb      	ldrb	r3, [r7, #31]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d105      	bne.n	8004a00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f4:	4ba3      	ldr	r3, [pc, #652]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	4aa2      	ldr	r2, [pc, #648]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 80049fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d03c      	beq.n	8004a86 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01c      	beq.n	8004a4e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a14:	4b9b      	ldr	r3, [pc, #620]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a1a:	4a9a      	ldr	r2, [pc, #616]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a24:	f7fe fa5a 	bl	8002edc <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a2c:	f7fe fa56 	bl	8002edc <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e130      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a3e:	4b91      	ldr	r3, [pc, #580]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0ef      	beq.n	8004a2c <HAL_RCC_OscConfig+0x5cc>
 8004a4c:	e01b      	b.n	8004a86 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a4e:	4b8d      	ldr	r3, [pc, #564]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a54:	4a8b      	ldr	r2, [pc, #556]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004a56:	f023 0301 	bic.w	r3, r3, #1
 8004a5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5e:	f7fe fa3d 	bl	8002edc <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a66:	f7fe fa39 	bl	8002edc <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e113      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a78:	4b82      	ldr	r3, [pc, #520]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1ef      	bne.n	8004a66 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 8107 	beq.w	8004c9e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	f040 80cb 	bne.w	8004c30 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a9a:	4b7a      	ldr	r3, [pc, #488]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f003 0203 	and.w	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d12c      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d123      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d11b      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d113      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	3b01      	subs	r3, #1
 8004aee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d109      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	085b      	lsrs	r3, r3, #1
 8004b00:	3b01      	subs	r3, #1
 8004b02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d06d      	beq.n	8004be4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b0c      	cmp	r3, #12
 8004b0c:	d068      	beq.n	8004be0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b0e:	4b5d      	ldr	r3, [pc, #372]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b1a:	4b5a      	ldr	r3, [pc, #360]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0ba      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b2a:	4b56      	ldr	r3, [pc, #344]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a55      	ldr	r2, [pc, #340]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004b30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b36:	f7fe f9d1 	bl	8002edc <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3e:	f7fe f9cd 	bl	8002edc <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e0a7      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b50:	4b4c      	ldr	r3, [pc, #304]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f0      	bne.n	8004b3e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b5c:	4b49      	ldr	r3, [pc, #292]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	4b49      	ldr	r3, [pc, #292]	; (8004c88 <HAL_RCC_OscConfig+0x828>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b6c:	3a01      	subs	r2, #1
 8004b6e:	0112      	lsls	r2, r2, #4
 8004b70:	4311      	orrs	r1, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b76:	0212      	lsls	r2, r2, #8
 8004b78:	4311      	orrs	r1, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b7e:	0852      	lsrs	r2, r2, #1
 8004b80:	3a01      	subs	r2, #1
 8004b82:	0552      	lsls	r2, r2, #21
 8004b84:	4311      	orrs	r1, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b8a:	0852      	lsrs	r2, r2, #1
 8004b8c:	3a01      	subs	r2, #1
 8004b8e:	0652      	lsls	r2, r2, #25
 8004b90:	4311      	orrs	r1, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b96:	06d2      	lsls	r2, r2, #27
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	493a      	ldr	r1, [pc, #232]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ba0:	4b38      	ldr	r3, [pc, #224]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a37      	ldr	r2, [pc, #220]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004baa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bac:	4b35      	ldr	r3, [pc, #212]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4a34      	ldr	r2, [pc, #208]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bb8:	f7fe f990 	bl	8002edc <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc0:	f7fe f98c 	bl	8002edc <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e066      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd2:	4b2c      	ldr	r3, [pc, #176]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bde:	e05e      	b.n	8004c9e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e05d      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be4:	4b27      	ldr	r3, [pc, #156]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d156      	bne.n	8004c9e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bf0:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a23      	ldr	r2, [pc, #140]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bfc:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a20      	ldr	r2, [pc, #128]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c08:	f7fe f968 	bl	8002edc <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c10:	f7fe f964 	bl	8002edc <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e03e      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c22:	4b18      	ldr	r3, [pc, #96]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x7b0>
 8004c2e:	e036      	b.n	8004c9e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b0c      	cmp	r3, #12
 8004c34:	d031      	beq.n	8004c9a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c36:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c40:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d105      	bne.n	8004c5a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c54:	f023 0303 	bic.w	r3, r3, #3
 8004c58:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <HAL_RCC_OscConfig+0x824>)
 8004c60:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c68:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6a:	f7fe f937 	bl	8002edc <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c70:	e00c      	b.n	8004c8c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c72:	f7fe f933 	bl	8002edc <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d905      	bls.n	8004c8c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e00d      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
 8004c84:	40021000 	.word	0x40021000
 8004c88:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_RCC_OscConfig+0x848>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1ec      	bne.n	8004c72 <HAL_RCC_OscConfig+0x812>
 8004c98:	e001      	b.n	8004c9e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3720      	adds	r7, #32
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40021000 	.word	0x40021000

08004cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e10f      	b.n	8004ee4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc4:	4b89      	ldr	r3, [pc, #548]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d910      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd2:	4b86      	ldr	r3, [pc, #536]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 020f 	bic.w	r2, r3, #15
 8004cda:	4984      	ldr	r1, [pc, #528]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	4b82      	ldr	r3, [pc, #520]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0f7      	b.n	8004ee4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8089 	beq.w	8004e14 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d133      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0a:	4b79      	ldr	r3, [pc, #484]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e0e4      	b.n	8004ee4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004d1a:	f000 fa0f 	bl	800513c <RCC_GetSysClockFreqFromPLLSource>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	4b74      	ldr	r3, [pc, #464]	; (8004ef4 <HAL_RCC_ClockConfig+0x248>)
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d955      	bls.n	8004dd2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d26:	4b72      	ldr	r3, [pc, #456]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10a      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d32:	4b6f      	ldr	r3, [pc, #444]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d3a:	4a6d      	ldr	r2, [pc, #436]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d42:	2380      	movs	r3, #128	; 0x80
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	e044      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d03e      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0x126>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d13a      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d5c:	4b64      	ldr	r3, [pc, #400]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d64:	4a62      	ldr	r2, [pc, #392]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d6c:	2380      	movs	r3, #128	; 0x80
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	e02f      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d107      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d7a:	4b5d      	ldr	r3, [pc, #372]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d115      	bne.n	8004db2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e0ac      	b.n	8004ee4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d107      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d92:	4b57      	ldr	r3, [pc, #348]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e0a0      	b.n	8004ee4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004da2:	4b53      	ldr	r3, [pc, #332]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e098      	b.n	8004ee4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004db2:	f000 f8a7 	bl	8004f04 <HAL_RCC_GetSysClockFreq>
 8004db6:	4602      	mov	r2, r0
 8004db8:	4b4e      	ldr	r3, [pc, #312]	; (8004ef4 <HAL_RCC_ClockConfig+0x248>)
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d909      	bls.n	8004dd2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dbe:	4b4c      	ldr	r3, [pc, #304]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc6:	4a4a      	ldr	r2, [pc, #296]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dcc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dd2:	4b47      	ldr	r3, [pc, #284]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f023 0203 	bic.w	r2, r3, #3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	4944      	ldr	r1, [pc, #272]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de4:	f7fe f87a 	bl	8002edc <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dea:	e00a      	b.n	8004e02 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dec:	f7fe f876 	bl	8002edc <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e070      	b.n	8004ee4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e02:	4b3b      	ldr	r3, [pc, #236]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 020c 	and.w	r2, r3, #12
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d1eb      	bne.n	8004dec <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d009      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e20:	4b33      	ldr	r3, [pc, #204]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4930      	ldr	r1, [pc, #192]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	608b      	str	r3, [r1, #8]
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b80      	cmp	r3, #128	; 0x80
 8004e38:	d105      	bne.n	8004e46 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e3a:	4b2d      	ldr	r3, [pc, #180]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004e40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e44:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e46:	4b29      	ldr	r3, [pc, #164]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d210      	bcs.n	8004e76 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e54:	4b25      	ldr	r3, [pc, #148]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f023 020f 	bic.w	r2, r3, #15
 8004e5c:	4923      	ldr	r1, [pc, #140]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e64:	4b21      	ldr	r3, [pc, #132]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d001      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e036      	b.n	8004ee4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d008      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e82:	4b1b      	ldr	r3, [pc, #108]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	4918      	ldr	r1, [pc, #96]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d009      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ea0:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4910      	ldr	r1, [pc, #64]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004eb4:	f000 f826 	bl	8004f04 <HAL_RCC_GetSysClockFreq>
 8004eb8:	4601      	mov	r1, r0
 8004eba:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	091b      	lsrs	r3, r3, #4
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	4a0c      	ldr	r2, [pc, #48]	; (8004ef8 <HAL_RCC_ClockConfig+0x24c>)
 8004ec6:	5cd3      	ldrb	r3, [r2, r3]
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <HAL_RCC_ClockConfig+0x250>)
 8004ed2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <HAL_RCC_ClockConfig+0x254>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fd ffaf 	bl	8002e3c <HAL_InitTick>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	73fb      	strb	r3, [r7, #15]

  return status;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40022000 	.word	0x40022000
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	04c4b400 	.word	0x04c4b400
 8004ef8:	0800911c 	.word	0x0800911c
 8004efc:	20000000 	.word	0x20000000
 8004f00:	20000004 	.word	0x20000004

08004f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b089      	sub	sp, #36	; 0x24
 8004f08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f12:	4b3d      	ldr	r3, [pc, #244]	; (8005008 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f1c:	4b3a      	ldr	r3, [pc, #232]	; (8005008 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_RCC_GetSysClockFreq+0x34>
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b0c      	cmp	r3, #12
 8004f30:	d121      	bne.n	8004f76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d11e      	bne.n	8004f76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f38:	4b33      	ldr	r3, [pc, #204]	; (8005008 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d107      	bne.n	8004f54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f44:	4b30      	ldr	r3, [pc, #192]	; (8005008 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4a:	0a1b      	lsrs	r3, r3, #8
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	e005      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f54:	4b2c      	ldr	r3, [pc, #176]	; (8005008 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	091b      	lsrs	r3, r3, #4
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f60:	4a2a      	ldr	r2, [pc, #168]	; (800500c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10d      	bne.n	8004f8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f74:	e00a      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d102      	bne.n	8004f82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f7c:	4b24      	ldr	r3, [pc, #144]	; (8005010 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f7e:	61bb      	str	r3, [r7, #24]
 8004f80:	e004      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d101      	bne.n	8004f8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f88:	4b22      	ldr	r3, [pc, #136]	; (8005014 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b0c      	cmp	r3, #12
 8004f90:	d133      	bne.n	8004ffa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f92:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d002      	beq.n	8004fa8 <HAL_RCC_GetSysClockFreq+0xa4>
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d003      	beq.n	8004fae <HAL_RCC_GetSysClockFreq+0xaa>
 8004fa6:	e005      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fa8:	4b19      	ldr	r3, [pc, #100]	; (8005010 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004faa:	617b      	str	r3, [r7, #20]
      break;
 8004fac:	e005      	b.n	8004fba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004fae:	4b19      	ldr	r3, [pc, #100]	; (8005014 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fb0:	617b      	str	r3, [r7, #20]
      break;
 8004fb2:	e002      	b.n	8004fba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	617b      	str	r3, [r7, #20]
      break;
 8004fb8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fba:	4b13      	ldr	r3, [pc, #76]	; (8005008 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	091b      	lsrs	r3, r3, #4
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004fc8:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	0a1b      	lsrs	r3, r3, #8
 8004fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	fb02 f203 	mul.w	r2, r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fde:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fe0:	4b09      	ldr	r3, [pc, #36]	; (8005008 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	0e5b      	lsrs	r3, r3, #25
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	3301      	adds	r3, #1
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ffa:	69bb      	ldr	r3, [r7, #24]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3724      	adds	r7, #36	; 0x24
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	40021000 	.word	0x40021000
 800500c:	08009134 	.word	0x08009134
 8005010:	00f42400 	.word	0x00f42400
 8005014:	007a1200 	.word	0x007a1200

08005018 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800501c:	4b03      	ldr	r3, [pc, #12]	; (800502c <HAL_RCC_GetHCLKFreq+0x14>)
 800501e:	681b      	ldr	r3, [r3, #0]
}
 8005020:	4618      	mov	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	20000000 	.word	0x20000000

08005030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005034:	f7ff fff0 	bl	8005018 <HAL_RCC_GetHCLKFreq>
 8005038:	4601      	mov	r1, r0
 800503a:	4b06      	ldr	r3, [pc, #24]	; (8005054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	0a1b      	lsrs	r3, r3, #8
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	4a04      	ldr	r2, [pc, #16]	; (8005058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005046:	5cd3      	ldrb	r3, [r2, r3]
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005050:	4618      	mov	r0, r3
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40021000 	.word	0x40021000
 8005058:	0800912c 	.word	0x0800912c

0800505c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005060:	f7ff ffda 	bl	8005018 <HAL_RCC_GetHCLKFreq>
 8005064:	4601      	mov	r1, r0
 8005066:	4b06      	ldr	r3, [pc, #24]	; (8005080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	0adb      	lsrs	r3, r3, #11
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	4a04      	ldr	r2, [pc, #16]	; (8005084 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005072:	5cd3      	ldrb	r3, [r2, r3]
 8005074:	f003 031f 	and.w	r3, r3, #31
 8005078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800507c:	4618      	mov	r0, r3
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40021000 	.word	0x40021000
 8005084:	0800912c 	.word	0x0800912c

08005088 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005090:	2300      	movs	r3, #0
 8005092:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005094:	4b27      	ldr	r3, [pc, #156]	; (8005134 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050a0:	f7ff f91a 	bl	80042d8 <HAL_PWREx_GetVoltageRange>
 80050a4:	6178      	str	r0, [r7, #20]
 80050a6:	e014      	b.n	80050d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050a8:	4b22      	ldr	r3, [pc, #136]	; (8005134 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ac:	4a21      	ldr	r2, [pc, #132]	; (8005134 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b2:	6593      	str	r3, [r2, #88]	; 0x58
 80050b4:	4b1f      	ldr	r3, [pc, #124]	; (8005134 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050c0:	f7ff f90a 	bl	80042d8 <HAL_PWREx_GetVoltageRange>
 80050c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050c6:	4b1b      	ldr	r3, [pc, #108]	; (8005134 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ca:	4a1a      	ldr	r2, [pc, #104]	; (8005134 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d8:	d10b      	bne.n	80050f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b80      	cmp	r3, #128	; 0x80
 80050de:	d913      	bls.n	8005108 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2ba0      	cmp	r3, #160	; 0xa0
 80050e4:	d902      	bls.n	80050ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050e6:	2302      	movs	r3, #2
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	e00d      	b.n	8005108 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050ec:	2301      	movs	r3, #1
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	e00a      	b.n	8005108 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b7f      	cmp	r3, #127	; 0x7f
 80050f6:	d902      	bls.n	80050fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80050f8:	2302      	movs	r3, #2
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	e004      	b.n	8005108 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b70      	cmp	r3, #112	; 0x70
 8005102:	d101      	bne.n	8005108 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005104:	2301      	movs	r3, #1
 8005106:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005108:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f023 020f 	bic.w	r2, r3, #15
 8005110:	4909      	ldr	r1, [pc, #36]	; (8005138 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005118:	4b07      	ldr	r3, [pc, #28]	; (8005138 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	429a      	cmp	r2, r3
 8005124:	d001      	beq.n	800512a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40021000 	.word	0x40021000
 8005138:	40022000 	.word	0x40022000

0800513c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005146:	4b2d      	ldr	r3, [pc, #180]	; (80051fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	2b01      	cmp	r3, #1
 8005150:	d118      	bne.n	8005184 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005152:	4b2a      	ldr	r3, [pc, #168]	; (80051fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d107      	bne.n	800516e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800515e:	4b27      	ldr	r3, [pc, #156]	; (80051fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005164:	0a1b      	lsrs	r3, r3, #8
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	e005      	b.n	800517a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800516e:	4b23      	ldr	r3, [pc, #140]	; (80051fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	091b      	lsrs	r3, r3, #4
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800517a:	4a21      	ldr	r2, [pc, #132]	; (8005200 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005182:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005184:	4b1d      	ldr	r3, [pc, #116]	; (80051fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d002      	beq.n	800519a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8005194:	2b03      	cmp	r3, #3
 8005196:	d003      	beq.n	80051a0 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8005198:	e005      	b.n	80051a6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800519a:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800519c:	613b      	str	r3, [r7, #16]
    break;
 800519e:	e005      	b.n	80051ac <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80051a0:	4b19      	ldr	r3, [pc, #100]	; (8005208 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80051a2:	613b      	str	r3, [r7, #16]
    break;
 80051a4:	e002      	b.n	80051ac <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	613b      	str	r3, [r7, #16]
    break;
 80051aa:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051ac:	4b13      	ldr	r3, [pc, #76]	; (80051fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	3301      	adds	r3, #1
 80051b8:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051ba:	4b10      	ldr	r3, [pc, #64]	; (80051fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	0a1b      	lsrs	r3, r3, #8
 80051c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	fb02 f203 	mul.w	r2, r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d0:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051d2:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	0e5b      	lsrs	r3, r3, #25
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	3301      	adds	r3, #1
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80051ec:	683b      	ldr	r3, [r7, #0]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40021000 	.word	0x40021000
 8005200:	08009134 	.word	0x08009134
 8005204:	00f42400 	.word	0x00f42400
 8005208:	007a1200 	.word	0x007a1200

0800520c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005214:	2300      	movs	r3, #0
 8005216:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005218:	2300      	movs	r3, #0
 800521a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005224:	2b00      	cmp	r3, #0
 8005226:	d03d      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d00b      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005230:	2b40      	cmp	r3, #64	; 0x40
 8005232:	d804      	bhi.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00e      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8005238:	2b20      	cmp	r3, #32
 800523a:	d015      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800523c:	e01d      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800523e:	2b60      	cmp	r3, #96	; 0x60
 8005240:	d01e      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005242:	2b80      	cmp	r3, #128	; 0x80
 8005244:	d01c      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005246:	e018      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005248:	4b86      	ldr	r3, [pc, #536]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4a85      	ldr	r2, [pc, #532]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800524e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005252:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005254:	e015      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3304      	adds	r3, #4
 800525a:	2100      	movs	r1, #0
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fafd 	bl	800585c <RCCEx_PLLSAI1_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005266:	e00c      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3320      	adds	r3, #32
 800526c:	2100      	movs	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fbe4 	bl	8005a3c <RCCEx_PLLSAI2_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005278:	e003      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	74fb      	strb	r3, [r7, #19]
      break;
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8005280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005282:	7cfb      	ldrb	r3, [r7, #19]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10b      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005288:	4b76      	ldr	r3, [pc, #472]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800528a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800528e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005296:	4973      	ldr	r1, [pc, #460]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800529e:	e001      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	7cfb      	ldrb	r3, [r7, #19]
 80052a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d042      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b8:	d00f      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xce>
 80052ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052be:	d805      	bhi.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d011      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80052c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c8:	d017      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xee>
 80052ca:	e01f      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x100>
 80052cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d0:	d01f      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d6:	d01c      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052d8:	e018      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052da:	4b62      	ldr	r3, [pc, #392]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	4a61      	ldr	r2, [pc, #388]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052e6:	e015      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	2100      	movs	r1, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fab4 	bl	800585c <RCCEx_PLLSAI1_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052f8:	e00c      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3320      	adds	r3, #32
 80052fe:	2100      	movs	r1, #0
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fb9b 	bl	8005a3c <RCCEx_PLLSAI2_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800530a:	e003      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	74fb      	strb	r3, [r7, #19]
      break;
 8005310:	e000      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8005312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005314:	7cfb      	ldrb	r3, [r7, #19]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10b      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800531a:	4b52      	ldr	r3, [pc, #328]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800531c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005328:	494e      	ldr	r1, [pc, #312]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005330:	e001      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005332:	7cfb      	ldrb	r3, [r7, #19]
 8005334:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 809f 	beq.w	8005482 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005344:	2300      	movs	r3, #0
 8005346:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005348:	4b46      	ldr	r3, [pc, #280]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800534a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005358:	2300      	movs	r3, #0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00d      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800535e:	4b41      	ldr	r3, [pc, #260]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005362:	4a40      	ldr	r2, [pc, #256]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005368:	6593      	str	r3, [r2, #88]	; 0x58
 800536a:	4b3e      	ldr	r3, [pc, #248]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800536c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005372:	60bb      	str	r3, [r7, #8]
 8005374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005376:	2301      	movs	r3, #1
 8005378:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800537a:	4b3b      	ldr	r3, [pc, #236]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a3a      	ldr	r2, [pc, #232]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005384:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005386:	f7fd fda9 	bl	8002edc <HAL_GetTick>
 800538a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800538c:	e009      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800538e:	f7fd fda5 	bl	8002edc <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d902      	bls.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	74fb      	strb	r3, [r7, #19]
        break;
 80053a0:	e005      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053a2:	4b31      	ldr	r3, [pc, #196]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0ef      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80053ae:	7cfb      	ldrb	r3, [r7, #19]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d15b      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053b4:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053be:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d01f      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d019      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053d2:	4b24      	ldr	r3, [pc, #144]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053de:	4b21      	ldr	r3, [pc, #132]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e4:	4a1f      	ldr	r2, [pc, #124]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053ee:	4b1d      	ldr	r3, [pc, #116]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f4:	4a1b      	ldr	r2, [pc, #108]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053fe:	4a19      	ldr	r2, [pc, #100]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d016      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005410:	f7fd fd64 	bl	8002edc <HAL_GetTick>
 8005414:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005416:	e00b      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005418:	f7fd fd60 	bl	8002edc <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	; 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d902      	bls.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	74fb      	strb	r3, [r7, #19]
            break;
 800542e:	e006      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0ec      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10c      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005454:	4903      	ldr	r1, [pc, #12]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800545c:	e008      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800545e:	7cfb      	ldrb	r3, [r7, #19]
 8005460:	74bb      	strb	r3, [r7, #18]
 8005462:	e005      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005464:	40021000 	.word	0x40021000
 8005468:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546c:	7cfb      	ldrb	r3, [r7, #19]
 800546e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005470:	7c7b      	ldrb	r3, [r7, #17]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d105      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005476:	4ba0      	ldr	r3, [pc, #640]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547a:	4a9f      	ldr	r2, [pc, #636]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005480:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800548e:	4b9a      	ldr	r3, [pc, #616]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	f023 0203 	bic.w	r2, r3, #3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549c:	4996      	ldr	r1, [pc, #600]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054b0:	4b91      	ldr	r3, [pc, #580]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b6:	f023 020c 	bic.w	r2, r3, #12
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	498e      	ldr	r1, [pc, #568]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054d2:	4b89      	ldr	r3, [pc, #548]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e0:	4985      	ldr	r1, [pc, #532]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00a      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054f4:	4b80      	ldr	r3, [pc, #512]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005502:	497d      	ldr	r1, [pc, #500]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005516:	4b78      	ldr	r3, [pc, #480]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005524:	4974      	ldr	r1, [pc, #464]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005526:	4313      	orrs	r3, r2
 8005528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00a      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005538:	4b6f      	ldr	r3, [pc, #444]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005546:	496c      	ldr	r1, [pc, #432]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800555a:	4b67      	ldr	r3, [pc, #412]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005560:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005568:	4963      	ldr	r1, [pc, #396]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800557c:	4b5e      	ldr	r3, [pc, #376]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005582:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800558a:	495b      	ldr	r1, [pc, #364]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800559e:	4b56      	ldr	r3, [pc, #344]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ac:	4952      	ldr	r1, [pc, #328]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055c0:	4b4d      	ldr	r3, [pc, #308]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ce:	494a      	ldr	r1, [pc, #296]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055e2:	4b45      	ldr	r3, [pc, #276]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f0:	4941      	ldr	r1, [pc, #260]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005604:	4b3c      	ldr	r3, [pc, #240]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800560a:	f023 0203 	bic.w	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005612:	4939      	ldr	r1, [pc, #228]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005614:	4313      	orrs	r3, r2
 8005616:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d028      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005626:	4b34      	ldr	r3, [pc, #208]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005634:	4930      	ldr	r1, [pc, #192]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005644:	d106      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005646:	4b2c      	ldr	r3, [pc, #176]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	4a2b      	ldr	r2, [pc, #172]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005650:	60d3      	str	r3, [r2, #12]
 8005652:	e011      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005658:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800565c:	d10c      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3304      	adds	r3, #4
 8005662:	2101      	movs	r1, #1
 8005664:	4618      	mov	r0, r3
 8005666:	f000 f8f9 	bl	800585c <RCCEx_PLLSAI1_Config>
 800566a:	4603      	mov	r3, r0
 800566c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800566e:	7cfb      	ldrb	r3, [r7, #19]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8005674:	7cfb      	ldrb	r3, [r7, #19]
 8005676:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d04d      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800568c:	d108      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800568e:	4b1a      	ldr	r3, [pc, #104]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005690:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005694:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800569a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800569e:	e012      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80056a0:	4b15      	ldr	r3, [pc, #84]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056a6:	4a14      	ldr	r2, [pc, #80]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80056b0:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056be:	490e      	ldr	r1, [pc, #56]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ce:	d106      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d0:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056da:	60d3      	str	r3, [r2, #12]
 80056dc:	e020      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e6:	d109      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056e8:	4b03      	ldr	r3, [pc, #12]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4a02      	ldr	r2, [pc, #8]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f2:	60d3      	str	r3, [r2, #12]
 80056f4:	e014      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80056f6:	bf00      	nop
 80056f8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005700:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005704:	d10c      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3304      	adds	r3, #4
 800570a:	2101      	movs	r1, #1
 800570c:	4618      	mov	r0, r3
 800570e:	f000 f8a5 	bl	800585c <RCCEx_PLLSAI1_Config>
 8005712:	4603      	mov	r3, r0
 8005714:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005716:	7cfb      	ldrb	r3, [r7, #19]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800571c:	7cfb      	ldrb	r3, [r7, #19]
 800571e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d028      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800572c:	4b4a      	ldr	r3, [pc, #296]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800572e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800573a:	4947      	ldr	r1, [pc, #284]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800573c:	4313      	orrs	r3, r2
 800573e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800574a:	d106      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800574c:	4b42      	ldr	r3, [pc, #264]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	4a41      	ldr	r2, [pc, #260]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005756:	60d3      	str	r3, [r2, #12]
 8005758:	e011      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800575e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005762:	d10c      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	2101      	movs	r1, #1
 800576a:	4618      	mov	r0, r3
 800576c:	f000 f876 	bl	800585c <RCCEx_PLLSAI1_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005774:	7cfb      	ldrb	r3, [r7, #19]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01e      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800578a:	4b33      	ldr	r3, [pc, #204]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005790:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800579a:	492f      	ldr	r1, [pc, #188]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ac:	d10c      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3304      	adds	r3, #4
 80057b2:	2102      	movs	r1, #2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 f851 	bl	800585c <RCCEx_PLLSAI1_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057be:	7cfb      	ldrb	r3, [r7, #19]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80057c4:	7cfb      	ldrb	r3, [r7, #19]
 80057c6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057d4:	4b20      	ldr	r3, [pc, #128]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057da:	f023 0204 	bic.w	r2, r3, #4
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e4:	491c      	ldr	r1, [pc, #112]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00b      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80057f8:	4b17      	ldr	r3, [pc, #92]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057fe:	f023 0218 	bic.w	r2, r3, #24
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005808:	4913      	ldr	r1, [pc, #76]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d017      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800581c:	4b0e      	ldr	r3, [pc, #56]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800581e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005822:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800582c:	490a      	ldr	r1, [pc, #40]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800583a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800583e:	d105      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	4a04      	ldr	r2, [pc, #16]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800584a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800584c:	7cbb      	ldrb	r3, [r7, #18]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40021000 	.word	0x40021000

0800585c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800586a:	4b70      	ldr	r3, [pc, #448]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00e      	beq.n	8005894 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005876:	4b6d      	ldr	r3, [pc, #436]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f003 0203 	and.w	r2, r3, #3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d103      	bne.n	800588e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
       ||
 800588a:	2b00      	cmp	r3, #0
 800588c:	d13f      	bne.n	800590e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	73fb      	strb	r3, [r7, #15]
 8005892:	e03c      	b.n	800590e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b02      	cmp	r3, #2
 800589a:	d00c      	beq.n	80058b6 <RCCEx_PLLSAI1_Config+0x5a>
 800589c:	2b03      	cmp	r3, #3
 800589e:	d013      	beq.n	80058c8 <RCCEx_PLLSAI1_Config+0x6c>
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d120      	bne.n	80058e6 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058a4:	4b61      	ldr	r3, [pc, #388]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d11d      	bne.n	80058ec <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058b4:	e01a      	b.n	80058ec <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058b6:	4b5d      	ldr	r3, [pc, #372]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d116      	bne.n	80058f0 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058c6:	e013      	b.n	80058f0 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058c8:	4b58      	ldr	r3, [pc, #352]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10f      	bne.n	80058f4 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058d4:	4b55      	ldr	r3, [pc, #340]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d109      	bne.n	80058f4 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058e4:	e006      	b.n	80058f4 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	73fb      	strb	r3, [r7, #15]
      break;
 80058ea:	e004      	b.n	80058f6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80058ec:	bf00      	nop
 80058ee:	e002      	b.n	80058f6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80058f0:	bf00      	nop
 80058f2:	e000      	b.n	80058f6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80058f4:	bf00      	nop
    }

    if(status == HAL_OK)
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d108      	bne.n	800590e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80058fc:	4b4b      	ldr	r3, [pc, #300]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f023 0203 	bic.w	r2, r3, #3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4948      	ldr	r1, [pc, #288]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 800590a:	4313      	orrs	r3, r2
 800590c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f040 8086 	bne.w	8005a22 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005916:	4b45      	ldr	r3, [pc, #276]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a44      	ldr	r2, [pc, #272]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 800591c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005922:	f7fd fadb 	bl	8002edc <HAL_GetTick>
 8005926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005928:	e009      	b.n	800593e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800592a:	f7fd fad7 	bl	8002edc <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d902      	bls.n	800593e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	73fb      	strb	r3, [r7, #15]
        break;
 800593c:	e005      	b.n	800594a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800593e:	4b3b      	ldr	r3, [pc, #236]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1ef      	bne.n	800592a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d168      	bne.n	8005a22 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d113      	bne.n	800597e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005956:	4b35      	ldr	r3, [pc, #212]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	4b35      	ldr	r3, [pc, #212]	; (8005a30 <RCCEx_PLLSAI1_Config+0x1d4>)
 800595c:	4013      	ands	r3, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6892      	ldr	r2, [r2, #8]
 8005962:	0211      	lsls	r1, r2, #8
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	68d2      	ldr	r2, [r2, #12]
 8005968:	06d2      	lsls	r2, r2, #27
 800596a:	4311      	orrs	r1, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6852      	ldr	r2, [r2, #4]
 8005970:	3a01      	subs	r2, #1
 8005972:	0112      	lsls	r2, r2, #4
 8005974:	430a      	orrs	r2, r1
 8005976:	492d      	ldr	r1, [pc, #180]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005978:	4313      	orrs	r3, r2
 800597a:	610b      	str	r3, [r1, #16]
 800597c:	e02d      	b.n	80059da <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d115      	bne.n	80059b0 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005984:	4b29      	ldr	r3, [pc, #164]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	4b2a      	ldr	r3, [pc, #168]	; (8005a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 800598a:	4013      	ands	r3, r2
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6892      	ldr	r2, [r2, #8]
 8005990:	0211      	lsls	r1, r2, #8
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6912      	ldr	r2, [r2, #16]
 8005996:	0852      	lsrs	r2, r2, #1
 8005998:	3a01      	subs	r2, #1
 800599a:	0552      	lsls	r2, r2, #21
 800599c:	4311      	orrs	r1, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6852      	ldr	r2, [r2, #4]
 80059a2:	3a01      	subs	r2, #1
 80059a4:	0112      	lsls	r2, r2, #4
 80059a6:	430a      	orrs	r2, r1
 80059a8:	4920      	ldr	r1, [pc, #128]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	610b      	str	r3, [r1, #16]
 80059ae:	e014      	b.n	80059da <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059b0:	4b1e      	ldr	r3, [pc, #120]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	4b20      	ldr	r3, [pc, #128]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6892      	ldr	r2, [r2, #8]
 80059bc:	0211      	lsls	r1, r2, #8
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6952      	ldr	r2, [r2, #20]
 80059c2:	0852      	lsrs	r2, r2, #1
 80059c4:	3a01      	subs	r2, #1
 80059c6:	0652      	lsls	r2, r2, #25
 80059c8:	4311      	orrs	r1, r2
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6852      	ldr	r2, [r2, #4]
 80059ce:	3a01      	subs	r2, #1
 80059d0:	0112      	lsls	r2, r2, #4
 80059d2:	430a      	orrs	r2, r1
 80059d4:	4915      	ldr	r1, [pc, #84]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059da:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 80059e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e6:	f7fd fa79 	bl	8002edc <HAL_GetTick>
 80059ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059ec:	e009      	b.n	8005a02 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059ee:	f7fd fa75 	bl	8002edc <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d902      	bls.n	8005a02 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	73fb      	strb	r3, [r7, #15]
          break;
 8005a00:	e005      	b.n	8005a0e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a02:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0ef      	beq.n	80059ee <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d106      	bne.n	8005a22 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	4903      	ldr	r1, [pc, #12]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	07ff800f 	.word	0x07ff800f
 8005a34:	ff9f800f 	.word	0xff9f800f
 8005a38:	f9ff800f 	.word	0xf9ff800f

08005a3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a4a:	4b70      	ldr	r3, [pc, #448]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00e      	beq.n	8005a74 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a56:	4b6d      	ldr	r3, [pc, #436]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f003 0203 	and.w	r2, r3, #3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d103      	bne.n	8005a6e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
       ||
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d13f      	bne.n	8005aee <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	73fb      	strb	r3, [r7, #15]
 8005a72:	e03c      	b.n	8005aee <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d00c      	beq.n	8005a96 <RCCEx_PLLSAI2_Config+0x5a>
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d013      	beq.n	8005aa8 <RCCEx_PLLSAI2_Config+0x6c>
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d120      	bne.n	8005ac6 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a84:	4b61      	ldr	r3, [pc, #388]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d11d      	bne.n	8005acc <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a94:	e01a      	b.n	8005acc <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a96:	4b5d      	ldr	r3, [pc, #372]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d116      	bne.n	8005ad0 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aa6:	e013      	b.n	8005ad0 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005aa8:	4b58      	ldr	r3, [pc, #352]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10f      	bne.n	8005ad4 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ab4:	4b55      	ldr	r3, [pc, #340]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d109      	bne.n	8005ad4 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ac4:	e006      	b.n	8005ad4 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8005aca:	e004      	b.n	8005ad6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005acc:	bf00      	nop
 8005ace:	e002      	b.n	8005ad6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005ad0:	bf00      	nop
 8005ad2:	e000      	b.n	8005ad6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005ad4:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d108      	bne.n	8005aee <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005adc:	4b4b      	ldr	r3, [pc, #300]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f023 0203 	bic.w	r2, r3, #3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4948      	ldr	r1, [pc, #288]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f040 8086 	bne.w	8005c02 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005af6:	4b45      	ldr	r3, [pc, #276]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a44      	ldr	r2, [pc, #272]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b02:	f7fd f9eb 	bl	8002edc <HAL_GetTick>
 8005b06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b08:	e009      	b.n	8005b1e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b0a:	f7fd f9e7 	bl	8002edc <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d902      	bls.n	8005b1e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	73fb      	strb	r3, [r7, #15]
        break;
 8005b1c:	e005      	b.n	8005b2a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b1e:	4b3b      	ldr	r3, [pc, #236]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1ef      	bne.n	8005b0a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d168      	bne.n	8005c02 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d113      	bne.n	8005b5e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b36:	4b35      	ldr	r3, [pc, #212]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b38:	695a      	ldr	r2, [r3, #20]
 8005b3a:	4b35      	ldr	r3, [pc, #212]	; (8005c10 <RCCEx_PLLSAI2_Config+0x1d4>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6892      	ldr	r2, [r2, #8]
 8005b42:	0211      	lsls	r1, r2, #8
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	68d2      	ldr	r2, [r2, #12]
 8005b48:	06d2      	lsls	r2, r2, #27
 8005b4a:	4311      	orrs	r1, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6852      	ldr	r2, [r2, #4]
 8005b50:	3a01      	subs	r2, #1
 8005b52:	0112      	lsls	r2, r2, #4
 8005b54:	430a      	orrs	r2, r1
 8005b56:	492d      	ldr	r1, [pc, #180]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	614b      	str	r3, [r1, #20]
 8005b5c:	e02d      	b.n	8005bba <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d115      	bne.n	8005b90 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b64:	4b29      	ldr	r3, [pc, #164]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b66:	695a      	ldr	r2, [r3, #20]
 8005b68:	4b2a      	ldr	r3, [pc, #168]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6892      	ldr	r2, [r2, #8]
 8005b70:	0211      	lsls	r1, r2, #8
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6912      	ldr	r2, [r2, #16]
 8005b76:	0852      	lsrs	r2, r2, #1
 8005b78:	3a01      	subs	r2, #1
 8005b7a:	0552      	lsls	r2, r2, #21
 8005b7c:	4311      	orrs	r1, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6852      	ldr	r2, [r2, #4]
 8005b82:	3a01      	subs	r2, #1
 8005b84:	0112      	lsls	r2, r2, #4
 8005b86:	430a      	orrs	r2, r1
 8005b88:	4920      	ldr	r1, [pc, #128]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	614b      	str	r3, [r1, #20]
 8005b8e:	e014      	b.n	8005bba <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b90:	4b1e      	ldr	r3, [pc, #120]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b92:	695a      	ldr	r2, [r3, #20]
 8005b94:	4b20      	ldr	r3, [pc, #128]	; (8005c18 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005b96:	4013      	ands	r3, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6892      	ldr	r2, [r2, #8]
 8005b9c:	0211      	lsls	r1, r2, #8
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6952      	ldr	r2, [r2, #20]
 8005ba2:	0852      	lsrs	r2, r2, #1
 8005ba4:	3a01      	subs	r2, #1
 8005ba6:	0652      	lsls	r2, r2, #25
 8005ba8:	4311      	orrs	r1, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6852      	ldr	r2, [r2, #4]
 8005bae:	3a01      	subs	r2, #1
 8005bb0:	0112      	lsls	r2, r2, #4
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	4915      	ldr	r1, [pc, #84]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005bba:	4b14      	ldr	r3, [pc, #80]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a13      	ldr	r2, [pc, #76]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc6:	f7fd f989 	bl	8002edc <HAL_GetTick>
 8005bca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bcc:	e009      	b.n	8005be2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bce:	f7fd f985 	bl	8002edc <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d902      	bls.n	8005be2 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	73fb      	strb	r3, [r7, #15]
          break;
 8005be0:	e005      	b.n	8005bee <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005be2:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0ef      	beq.n	8005bce <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d106      	bne.n	8005c02 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005bf6:	695a      	ldr	r2, [r3, #20]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	4903      	ldr	r1, [pc, #12]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	07ff800f 	.word	0x07ff800f
 8005c14:	ff9f800f 	.word	0xff9f800f
 8005c18:	f9ff800f 	.word	0xf9ff800f

08005c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e049      	b.n	8005cc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fb fe32 	bl	80018ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f000 fcae 	bl	80065bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e049      	b.n	8005d70 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7fb fdb5 	bl	8001860 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f000 fc57 	bl	80065bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d109      	bne.n	8005d9c <HAL_TIM_PWM_Start+0x24>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	bf14      	ite	ne
 8005d94:	2301      	movne	r3, #1
 8005d96:	2300      	moveq	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	e03c      	b.n	8005e16 <HAL_TIM_PWM_Start+0x9e>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d109      	bne.n	8005db6 <HAL_TIM_PWM_Start+0x3e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	bf14      	ite	ne
 8005dae:	2301      	movne	r3, #1
 8005db0:	2300      	moveq	r3, #0
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	e02f      	b.n	8005e16 <HAL_TIM_PWM_Start+0x9e>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d109      	bne.n	8005dd0 <HAL_TIM_PWM_Start+0x58>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	bf14      	ite	ne
 8005dc8:	2301      	movne	r3, #1
 8005dca:	2300      	moveq	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	e022      	b.n	8005e16 <HAL_TIM_PWM_Start+0x9e>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b0c      	cmp	r3, #12
 8005dd4:	d109      	bne.n	8005dea <HAL_TIM_PWM_Start+0x72>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	bf14      	ite	ne
 8005de2:	2301      	movne	r3, #1
 8005de4:	2300      	moveq	r3, #0
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	e015      	b.n	8005e16 <HAL_TIM_PWM_Start+0x9e>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b10      	cmp	r3, #16
 8005dee:	d109      	bne.n	8005e04 <HAL_TIM_PWM_Start+0x8c>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	bf14      	ite	ne
 8005dfc:	2301      	movne	r3, #1
 8005dfe:	2300      	moveq	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	e008      	b.n	8005e16 <HAL_TIM_PWM_Start+0x9e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	bf14      	ite	ne
 8005e10:	2301      	movne	r3, #1
 8005e12:	2300      	moveq	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e09c      	b.n	8005f58 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_PWM_Start+0xb6>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e2c:	e023      	b.n	8005e76 <HAL_TIM_PWM_Start+0xfe>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d104      	bne.n	8005e3e <HAL_TIM_PWM_Start+0xc6>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e3c:	e01b      	b.n	8005e76 <HAL_TIM_PWM_Start+0xfe>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d104      	bne.n	8005e4e <HAL_TIM_PWM_Start+0xd6>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e4c:	e013      	b.n	8005e76 <HAL_TIM_PWM_Start+0xfe>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b0c      	cmp	r3, #12
 8005e52:	d104      	bne.n	8005e5e <HAL_TIM_PWM_Start+0xe6>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e5c:	e00b      	b.n	8005e76 <HAL_TIM_PWM_Start+0xfe>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b10      	cmp	r3, #16
 8005e62:	d104      	bne.n	8005e6e <HAL_TIM_PWM_Start+0xf6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e6c:	e003      	b.n	8005e76 <HAL_TIM_PWM_Start+0xfe>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2202      	movs	r2, #2
 8005e72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 ffa6 	bl	8006dd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a35      	ldr	r2, [pc, #212]	; (8005f60 <HAL_TIM_PWM_Start+0x1e8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x13e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a34      	ldr	r2, [pc, #208]	; (8005f64 <HAL_TIM_PWM_Start+0x1ec>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00e      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x13e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a32      	ldr	r2, [pc, #200]	; (8005f68 <HAL_TIM_PWM_Start+0x1f0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x13e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a31      	ldr	r2, [pc, #196]	; (8005f6c <HAL_TIM_PWM_Start+0x1f4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x13e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a2f      	ldr	r2, [pc, #188]	; (8005f70 <HAL_TIM_PWM_Start+0x1f8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d101      	bne.n	8005eba <HAL_TIM_PWM_Start+0x142>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <HAL_TIM_PWM_Start+0x144>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ece:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a22      	ldr	r2, [pc, #136]	; (8005f60 <HAL_TIM_PWM_Start+0x1e8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01d      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x19e>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee2:	d018      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x19e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a22      	ldr	r2, [pc, #136]	; (8005f74 <HAL_TIM_PWM_Start+0x1fc>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d013      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x19e>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a21      	ldr	r2, [pc, #132]	; (8005f78 <HAL_TIM_PWM_Start+0x200>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00e      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x19e>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a1f      	ldr	r2, [pc, #124]	; (8005f7c <HAL_TIM_PWM_Start+0x204>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d009      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x19e>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a17      	ldr	r2, [pc, #92]	; (8005f64 <HAL_TIM_PWM_Start+0x1ec>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d004      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x19e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a15      	ldr	r2, [pc, #84]	; (8005f68 <HAL_TIM_PWM_Start+0x1f0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d115      	bne.n	8005f42 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	4b18      	ldr	r3, [pc, #96]	; (8005f80 <HAL_TIM_PWM_Start+0x208>)
 8005f1e:	4013      	ands	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b06      	cmp	r3, #6
 8005f26:	d015      	beq.n	8005f54 <HAL_TIM_PWM_Start+0x1dc>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f2e:	d011      	beq.n	8005f54 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f40:	e008      	b.n	8005f54 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	e000      	b.n	8005f56 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40012c00 	.word	0x40012c00
 8005f64:	40013400 	.word	0x40013400
 8005f68:	40014000 	.word	0x40014000
 8005f6c:	40014400 	.word	0x40014400
 8005f70:	40014800 	.word	0x40014800
 8005f74:	40000400 	.word	0x40000400
 8005f78:	40000800 	.word	0x40000800
 8005f7c:	40000c00 	.word	0x40000c00
 8005f80:	00010007 	.word	0x00010007

08005f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d122      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d11b      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0202 	mvn.w	r2, #2
 8005fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fad9 	bl	800657e <HAL_TIM_IC_CaptureCallback>
 8005fcc:	e005      	b.n	8005fda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 facb 	bl	800656a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fadc 	bl	8006592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	d122      	bne.n	8006034 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d11b      	bne.n	8006034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0204 	mvn.w	r2, #4
 8006004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2202      	movs	r2, #2
 800600a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 faaf 	bl	800657e <HAL_TIM_IC_CaptureCallback>
 8006020:	e005      	b.n	800602e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 faa1 	bl	800656a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fab2 	bl	8006592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b08      	cmp	r3, #8
 8006040:	d122      	bne.n	8006088 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f003 0308 	and.w	r3, r3, #8
 800604c:	2b08      	cmp	r3, #8
 800604e:	d11b      	bne.n	8006088 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0208 	mvn.w	r2, #8
 8006058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2204      	movs	r2, #4
 800605e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f003 0303 	and.w	r3, r3, #3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fa85 	bl	800657e <HAL_TIM_IC_CaptureCallback>
 8006074:	e005      	b.n	8006082 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fa77 	bl	800656a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fa88 	bl	8006592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 0310 	and.w	r3, r3, #16
 8006092:	2b10      	cmp	r3, #16
 8006094:	d122      	bne.n	80060dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2b10      	cmp	r3, #16
 80060a2:	d11b      	bne.n	80060dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f06f 0210 	mvn.w	r2, #16
 80060ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2208      	movs	r2, #8
 80060b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fa5b 	bl	800657e <HAL_TIM_IC_CaptureCallback>
 80060c8:	e005      	b.n	80060d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fa4d 	bl	800656a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fa5e 	bl	8006592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d10e      	bne.n	8006108 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d107      	bne.n	8006108 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f06f 0201 	mvn.w	r2, #1
 8006100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fa27 	bl	8006556 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d10e      	bne.n	8006134 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006120:	2b80      	cmp	r3, #128	; 0x80
 8006122:	d107      	bne.n	8006134 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800612c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 ff84 	bl	800703c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006142:	d10e      	bne.n	8006162 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614e:	2b80      	cmp	r3, #128	; 0x80
 8006150:	d107      	bne.n	8006162 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800615a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 ff77 	bl	8007050 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616c:	2b40      	cmp	r3, #64	; 0x40
 800616e:	d10e      	bne.n	800618e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617a:	2b40      	cmp	r3, #64	; 0x40
 800617c:	d107      	bne.n	800618e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fa0c 	bl	80065a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 0320 	and.w	r3, r3, #32
 8006198:	2b20      	cmp	r3, #32
 800619a:	d10e      	bne.n	80061ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d107      	bne.n	80061ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f06f 0220 	mvn.w	r2, #32
 80061b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 ff37 	bl	8007028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061da:	2302      	movs	r3, #2
 80061dc:	e0fd      	b.n	80063da <HAL_TIM_PWM_ConfigChannel+0x216>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b14      	cmp	r3, #20
 80061ea:	f200 80f0 	bhi.w	80063ce <HAL_TIM_PWM_ConfigChannel+0x20a>
 80061ee:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80061f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f4:	08006249 	.word	0x08006249
 80061f8:	080063cf 	.word	0x080063cf
 80061fc:	080063cf 	.word	0x080063cf
 8006200:	080063cf 	.word	0x080063cf
 8006204:	08006289 	.word	0x08006289
 8006208:	080063cf 	.word	0x080063cf
 800620c:	080063cf 	.word	0x080063cf
 8006210:	080063cf 	.word	0x080063cf
 8006214:	080062cb 	.word	0x080062cb
 8006218:	080063cf 	.word	0x080063cf
 800621c:	080063cf 	.word	0x080063cf
 8006220:	080063cf 	.word	0x080063cf
 8006224:	0800630b 	.word	0x0800630b
 8006228:	080063cf 	.word	0x080063cf
 800622c:	080063cf 	.word	0x080063cf
 8006230:	080063cf 	.word	0x080063cf
 8006234:	0800634d 	.word	0x0800634d
 8006238:	080063cf 	.word	0x080063cf
 800623c:	080063cf 	.word	0x080063cf
 8006240:	080063cf 	.word	0x080063cf
 8006244:	0800638d 	.word	0x0800638d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68b9      	ldr	r1, [r7, #8]
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fa4e 	bl	80066f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699a      	ldr	r2, [r3, #24]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0208 	orr.w	r2, r2, #8
 8006262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0204 	bic.w	r2, r2, #4
 8006272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6999      	ldr	r1, [r3, #24]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	619a      	str	r2, [r3, #24]
      break;
 8006286:	e0a3      	b.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fabe 	bl	8006810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6999      	ldr	r1, [r3, #24]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	021a      	lsls	r2, r3, #8
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	619a      	str	r2, [r3, #24]
      break;
 80062c8:	e082      	b.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 fb27 	bl	8006924 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69da      	ldr	r2, [r3, #28]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0208 	orr.w	r2, r2, #8
 80062e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0204 	bic.w	r2, r2, #4
 80062f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69d9      	ldr	r1, [r3, #28]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	61da      	str	r2, [r3, #28]
      break;
 8006308:	e062      	b.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fb8f 	bl	8006a34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69da      	ldr	r2, [r3, #28]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69d9      	ldr	r1, [r3, #28]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	021a      	lsls	r2, r3, #8
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	61da      	str	r2, [r3, #28]
      break;
 800634a:	e041      	b.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fbd8 	bl	8006b08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0208 	orr.w	r2, r2, #8
 8006366:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0204 	bic.w	r2, r2, #4
 8006376:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800638a:	e021      	b.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fc1c 	bl	8006bd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	021a      	lsls	r2, r3, #8
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063cc:	e000      	b.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80063ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop

080063e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_TIM_ConfigClockSource+0x18>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e0a8      	b.n	800654e <HAL_TIM_ConfigClockSource+0x16a>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800641a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800641e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006426:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d067      	beq.n	8006508 <HAL_TIM_ConfigClockSource+0x124>
 8006438:	2b40      	cmp	r3, #64	; 0x40
 800643a:	d80b      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x70>
 800643c:	2b10      	cmp	r3, #16
 800643e:	d073      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0x144>
 8006440:	2b10      	cmp	r3, #16
 8006442:	d802      	bhi.n	800644a <HAL_TIM_ConfigClockSource+0x66>
 8006444:	2b00      	cmp	r3, #0
 8006446:	d06f      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006448:	e078      	b.n	800653c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800644a:	2b20      	cmp	r3, #32
 800644c:	d06c      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0x144>
 800644e:	2b30      	cmp	r3, #48	; 0x30
 8006450:	d06a      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006452:	e073      	b.n	800653c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006454:	2b70      	cmp	r3, #112	; 0x70
 8006456:	d00d      	beq.n	8006474 <HAL_TIM_ConfigClockSource+0x90>
 8006458:	2b70      	cmp	r3, #112	; 0x70
 800645a:	d804      	bhi.n	8006466 <HAL_TIM_ConfigClockSource+0x82>
 800645c:	2b50      	cmp	r3, #80	; 0x50
 800645e:	d033      	beq.n	80064c8 <HAL_TIM_ConfigClockSource+0xe4>
 8006460:	2b60      	cmp	r3, #96	; 0x60
 8006462:	d041      	beq.n	80064e8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006464:	e06a      	b.n	800653c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646a:	d066      	beq.n	800653a <HAL_TIM_ConfigClockSource+0x156>
 800646c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006470:	d017      	beq.n	80064a2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006472:	e063      	b.n	800653c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	6899      	ldr	r1, [r3, #8]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f000 fc84 	bl	8006d90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006496:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	609a      	str	r2, [r3, #8]
      break;
 80064a0:	e04c      	b.n	800653c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	6899      	ldr	r1, [r3, #8]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f000 fc6d 	bl	8006d90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064c4:	609a      	str	r2, [r3, #8]
      break;
 80064c6:	e039      	b.n	800653c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	6859      	ldr	r1, [r3, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	461a      	mov	r2, r3
 80064d6:	f000 fbe1 	bl	8006c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2150      	movs	r1, #80	; 0x50
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fc3a 	bl	8006d5a <TIM_ITRx_SetConfig>
      break;
 80064e6:	e029      	b.n	800653c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	6859      	ldr	r1, [r3, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	461a      	mov	r2, r3
 80064f6:	f000 fc00 	bl	8006cfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2160      	movs	r1, #96	; 0x60
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fc2a 	bl	8006d5a <TIM_ITRx_SetConfig>
      break;
 8006506:	e019      	b.n	800653c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	6859      	ldr	r1, [r3, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	461a      	mov	r2, r3
 8006516:	f000 fbc1 	bl	8006c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2140      	movs	r1, #64	; 0x40
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fc1a 	bl	8006d5a <TIM_ITRx_SetConfig>
      break;
 8006526:	e009      	b.n	800653c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4619      	mov	r1, r3
 8006532:	4610      	mov	r0, r2
 8006534:	f000 fc11 	bl	8006d5a <TIM_ITRx_SetConfig>
        break;
 8006538:	e000      	b.n	800653c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800653a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a40      	ldr	r2, [pc, #256]	; (80066d0 <TIM_Base_SetConfig+0x114>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d013      	beq.n	80065fc <TIM_Base_SetConfig+0x40>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065da:	d00f      	beq.n	80065fc <TIM_Base_SetConfig+0x40>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a3d      	ldr	r2, [pc, #244]	; (80066d4 <TIM_Base_SetConfig+0x118>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d00b      	beq.n	80065fc <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a3c      	ldr	r2, [pc, #240]	; (80066d8 <TIM_Base_SetConfig+0x11c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d007      	beq.n	80065fc <TIM_Base_SetConfig+0x40>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a3b      	ldr	r2, [pc, #236]	; (80066dc <TIM_Base_SetConfig+0x120>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_Base_SetConfig+0x40>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a3a      	ldr	r2, [pc, #232]	; (80066e0 <TIM_Base_SetConfig+0x124>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d108      	bne.n	800660e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a2f      	ldr	r2, [pc, #188]	; (80066d0 <TIM_Base_SetConfig+0x114>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d01f      	beq.n	8006656 <TIM_Base_SetConfig+0x9a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800661c:	d01b      	beq.n	8006656 <TIM_Base_SetConfig+0x9a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a2c      	ldr	r2, [pc, #176]	; (80066d4 <TIM_Base_SetConfig+0x118>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d017      	beq.n	8006656 <TIM_Base_SetConfig+0x9a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a2b      	ldr	r2, [pc, #172]	; (80066d8 <TIM_Base_SetConfig+0x11c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d013      	beq.n	8006656 <TIM_Base_SetConfig+0x9a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2a      	ldr	r2, [pc, #168]	; (80066dc <TIM_Base_SetConfig+0x120>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d00f      	beq.n	8006656 <TIM_Base_SetConfig+0x9a>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a29      	ldr	r2, [pc, #164]	; (80066e0 <TIM_Base_SetConfig+0x124>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d00b      	beq.n	8006656 <TIM_Base_SetConfig+0x9a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a28      	ldr	r2, [pc, #160]	; (80066e4 <TIM_Base_SetConfig+0x128>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d007      	beq.n	8006656 <TIM_Base_SetConfig+0x9a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a27      	ldr	r2, [pc, #156]	; (80066e8 <TIM_Base_SetConfig+0x12c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d003      	beq.n	8006656 <TIM_Base_SetConfig+0x9a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a26      	ldr	r2, [pc, #152]	; (80066ec <TIM_Base_SetConfig+0x130>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d108      	bne.n	8006668 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800665c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	689a      	ldr	r2, [r3, #8]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a10      	ldr	r2, [pc, #64]	; (80066d0 <TIM_Base_SetConfig+0x114>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00f      	beq.n	80066b4 <TIM_Base_SetConfig+0xf8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a12      	ldr	r2, [pc, #72]	; (80066e0 <TIM_Base_SetConfig+0x124>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00b      	beq.n	80066b4 <TIM_Base_SetConfig+0xf8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a11      	ldr	r2, [pc, #68]	; (80066e4 <TIM_Base_SetConfig+0x128>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d007      	beq.n	80066b4 <TIM_Base_SetConfig+0xf8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a10      	ldr	r2, [pc, #64]	; (80066e8 <TIM_Base_SetConfig+0x12c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d003      	beq.n	80066b4 <TIM_Base_SetConfig+0xf8>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a0f      	ldr	r2, [pc, #60]	; (80066ec <TIM_Base_SetConfig+0x130>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d103      	bne.n	80066bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	691a      	ldr	r2, [r3, #16]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	615a      	str	r2, [r3, #20]
}
 80066c2:	bf00      	nop
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40012c00 	.word	0x40012c00
 80066d4:	40000400 	.word	0x40000400
 80066d8:	40000800 	.word	0x40000800
 80066dc:	40000c00 	.word	0x40000c00
 80066e0:	40013400 	.word	0x40013400
 80066e4:	40014000 	.word	0x40014000
 80066e8:	40014400 	.word	0x40014400
 80066ec:	40014800 	.word	0x40014800

080066f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0201 	bic.w	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800671e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0303 	bic.w	r3, r3, #3
 800672a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f023 0302 	bic.w	r3, r3, #2
 800673c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a2c      	ldr	r2, [pc, #176]	; (80067fc <TIM_OC1_SetConfig+0x10c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00f      	beq.n	8006770 <TIM_OC1_SetConfig+0x80>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a2b      	ldr	r2, [pc, #172]	; (8006800 <TIM_OC1_SetConfig+0x110>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00b      	beq.n	8006770 <TIM_OC1_SetConfig+0x80>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a2a      	ldr	r2, [pc, #168]	; (8006804 <TIM_OC1_SetConfig+0x114>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d007      	beq.n	8006770 <TIM_OC1_SetConfig+0x80>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a29      	ldr	r2, [pc, #164]	; (8006808 <TIM_OC1_SetConfig+0x118>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_OC1_SetConfig+0x80>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a28      	ldr	r2, [pc, #160]	; (800680c <TIM_OC1_SetConfig+0x11c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d10c      	bne.n	800678a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f023 0308 	bic.w	r3, r3, #8
 8006776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f023 0304 	bic.w	r3, r3, #4
 8006788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1b      	ldr	r2, [pc, #108]	; (80067fc <TIM_OC1_SetConfig+0x10c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00f      	beq.n	80067b2 <TIM_OC1_SetConfig+0xc2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a1a      	ldr	r2, [pc, #104]	; (8006800 <TIM_OC1_SetConfig+0x110>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00b      	beq.n	80067b2 <TIM_OC1_SetConfig+0xc2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a19      	ldr	r2, [pc, #100]	; (8006804 <TIM_OC1_SetConfig+0x114>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d007      	beq.n	80067b2 <TIM_OC1_SetConfig+0xc2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a18      	ldr	r2, [pc, #96]	; (8006808 <TIM_OC1_SetConfig+0x118>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d003      	beq.n	80067b2 <TIM_OC1_SetConfig+0xc2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a17      	ldr	r2, [pc, #92]	; (800680c <TIM_OC1_SetConfig+0x11c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d111      	bne.n	80067d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	621a      	str	r2, [r3, #32]
}
 80067f0:	bf00      	nop
 80067f2:	371c      	adds	r7, #28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	40012c00 	.word	0x40012c00
 8006800:	40013400 	.word	0x40013400
 8006804:	40014000 	.word	0x40014000
 8006808:	40014400 	.word	0x40014400
 800680c:	40014800 	.word	0x40014800

08006810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	f023 0210 	bic.w	r2, r3, #16
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800683e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800684a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f023 0320 	bic.w	r3, r3, #32
 800685e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a28      	ldr	r2, [pc, #160]	; (8006910 <TIM_OC2_SetConfig+0x100>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_OC2_SetConfig+0x6c>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a27      	ldr	r2, [pc, #156]	; (8006914 <TIM_OC2_SetConfig+0x104>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d10d      	bne.n	8006898 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006896:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a1d      	ldr	r2, [pc, #116]	; (8006910 <TIM_OC2_SetConfig+0x100>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00f      	beq.n	80068c0 <TIM_OC2_SetConfig+0xb0>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a1c      	ldr	r2, [pc, #112]	; (8006914 <TIM_OC2_SetConfig+0x104>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00b      	beq.n	80068c0 <TIM_OC2_SetConfig+0xb0>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a1b      	ldr	r2, [pc, #108]	; (8006918 <TIM_OC2_SetConfig+0x108>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d007      	beq.n	80068c0 <TIM_OC2_SetConfig+0xb0>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a1a      	ldr	r2, [pc, #104]	; (800691c <TIM_OC2_SetConfig+0x10c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <TIM_OC2_SetConfig+0xb0>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a19      	ldr	r2, [pc, #100]	; (8006920 <TIM_OC2_SetConfig+0x110>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d113      	bne.n	80068e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	621a      	str	r2, [r3, #32]
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	40012c00 	.word	0x40012c00
 8006914:	40013400 	.word	0x40013400
 8006918:	40014000 	.word	0x40014000
 800691c:	40014400 	.word	0x40014400
 8006920:	40014800 	.word	0x40014800

08006924 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0303 	bic.w	r3, r3, #3
 800695e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	021b      	lsls	r3, r3, #8
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a27      	ldr	r2, [pc, #156]	; (8006a20 <TIM_OC3_SetConfig+0xfc>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d003      	beq.n	800698e <TIM_OC3_SetConfig+0x6a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a26      	ldr	r2, [pc, #152]	; (8006a24 <TIM_OC3_SetConfig+0x100>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d10d      	bne.n	80069aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a1c      	ldr	r2, [pc, #112]	; (8006a20 <TIM_OC3_SetConfig+0xfc>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00f      	beq.n	80069d2 <TIM_OC3_SetConfig+0xae>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a1b      	ldr	r2, [pc, #108]	; (8006a24 <TIM_OC3_SetConfig+0x100>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00b      	beq.n	80069d2 <TIM_OC3_SetConfig+0xae>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a1a      	ldr	r2, [pc, #104]	; (8006a28 <TIM_OC3_SetConfig+0x104>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d007      	beq.n	80069d2 <TIM_OC3_SetConfig+0xae>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a19      	ldr	r2, [pc, #100]	; (8006a2c <TIM_OC3_SetConfig+0x108>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d003      	beq.n	80069d2 <TIM_OC3_SetConfig+0xae>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a18      	ldr	r2, [pc, #96]	; (8006a30 <TIM_OC3_SetConfig+0x10c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d113      	bne.n	80069fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	621a      	str	r2, [r3, #32]
}
 8006a14:	bf00      	nop
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	40012c00 	.word	0x40012c00
 8006a24:	40013400 	.word	0x40013400
 8006a28:	40014000 	.word	0x40014000
 8006a2c:	40014400 	.word	0x40014400
 8006a30:	40014800 	.word	0x40014800

08006a34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	021b      	lsls	r3, r3, #8
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	031b      	lsls	r3, r3, #12
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a18      	ldr	r2, [pc, #96]	; (8006af4 <TIM_OC4_SetConfig+0xc0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00f      	beq.n	8006ab8 <TIM_OC4_SetConfig+0x84>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a17      	ldr	r2, [pc, #92]	; (8006af8 <TIM_OC4_SetConfig+0xc4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00b      	beq.n	8006ab8 <TIM_OC4_SetConfig+0x84>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a16      	ldr	r2, [pc, #88]	; (8006afc <TIM_OC4_SetConfig+0xc8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d007      	beq.n	8006ab8 <TIM_OC4_SetConfig+0x84>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a15      	ldr	r2, [pc, #84]	; (8006b00 <TIM_OC4_SetConfig+0xcc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d003      	beq.n	8006ab8 <TIM_OC4_SetConfig+0x84>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a14      	ldr	r2, [pc, #80]	; (8006b04 <TIM_OC4_SetConfig+0xd0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d109      	bne.n	8006acc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006abe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	019b      	lsls	r3, r3, #6
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	621a      	str	r2, [r3, #32]
}
 8006ae6:	bf00      	nop
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40012c00 	.word	0x40012c00
 8006af8:	40013400 	.word	0x40013400
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40014400 	.word	0x40014400
 8006b04:	40014800 	.word	0x40014800

08006b08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	041b      	lsls	r3, r3, #16
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a17      	ldr	r2, [pc, #92]	; (8006bbc <TIM_OC5_SetConfig+0xb4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00f      	beq.n	8006b82 <TIM_OC5_SetConfig+0x7a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a16      	ldr	r2, [pc, #88]	; (8006bc0 <TIM_OC5_SetConfig+0xb8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00b      	beq.n	8006b82 <TIM_OC5_SetConfig+0x7a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a15      	ldr	r2, [pc, #84]	; (8006bc4 <TIM_OC5_SetConfig+0xbc>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d007      	beq.n	8006b82 <TIM_OC5_SetConfig+0x7a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a14      	ldr	r2, [pc, #80]	; (8006bc8 <TIM_OC5_SetConfig+0xc0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d003      	beq.n	8006b82 <TIM_OC5_SetConfig+0x7a>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a13      	ldr	r2, [pc, #76]	; (8006bcc <TIM_OC5_SetConfig+0xc4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d109      	bne.n	8006b96 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	021b      	lsls	r3, r3, #8
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	621a      	str	r2, [r3, #32]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	40012c00 	.word	0x40012c00
 8006bc0:	40013400 	.word	0x40013400
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	40014400 	.word	0x40014400
 8006bcc:	40014800 	.word	0x40014800

08006bd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	051b      	lsls	r3, r3, #20
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <TIM_OC6_SetConfig+0xb8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00f      	beq.n	8006c4c <TIM_OC6_SetConfig+0x7c>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a17      	ldr	r2, [pc, #92]	; (8006c8c <TIM_OC6_SetConfig+0xbc>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00b      	beq.n	8006c4c <TIM_OC6_SetConfig+0x7c>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a16      	ldr	r2, [pc, #88]	; (8006c90 <TIM_OC6_SetConfig+0xc0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d007      	beq.n	8006c4c <TIM_OC6_SetConfig+0x7c>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a15      	ldr	r2, [pc, #84]	; (8006c94 <TIM_OC6_SetConfig+0xc4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d003      	beq.n	8006c4c <TIM_OC6_SetConfig+0x7c>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a14      	ldr	r2, [pc, #80]	; (8006c98 <TIM_OC6_SetConfig+0xc8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d109      	bne.n	8006c60 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	029b      	lsls	r3, r3, #10
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	621a      	str	r2, [r3, #32]
}
 8006c7a:	bf00      	nop
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	40012c00 	.word	0x40012c00
 8006c8c:	40013400 	.word	0x40013400
 8006c90:	40014000 	.word	0x40014000
 8006c94:	40014400 	.word	0x40014400
 8006c98:	40014800 	.word	0x40014800

08006c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f023 0201 	bic.w	r2, r3, #1
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f023 030a 	bic.w	r3, r3, #10
 8006cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	621a      	str	r2, [r3, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b087      	sub	sp, #28
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	f023 0210 	bic.w	r2, r3, #16
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	031b      	lsls	r3, r3, #12
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	f043 0307 	orr.w	r3, r3, #7
 8006d7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	609a      	str	r2, [r3, #8]
}
 8006d84:	bf00      	nop
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006daa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	021a      	lsls	r2, r3, #8
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	609a      	str	r2, [r3, #8]
}
 8006dc4:	bf00      	nop
 8006dc6:	371c      	adds	r7, #28
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f003 031f 	and.w	r3, r3, #31
 8006de2:	2201      	movs	r2, #1
 8006de4:	fa02 f303 	lsl.w	r3, r2, r3
 8006de8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a1a      	ldr	r2, [r3, #32]
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	43db      	mvns	r3, r3
 8006df2:	401a      	ands	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a1a      	ldr	r2, [r3, #32]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f003 031f 	and.w	r3, r3, #31
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	fa01 f303 	lsl.w	r3, r1, r3
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	621a      	str	r2, [r3, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
	...

08006e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e068      	b.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a2e      	ldr	r2, [pc, #184]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d004      	beq.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a2d      	ldr	r2, [pc, #180]	; (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d108      	bne.n	8006e7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1e      	ldr	r2, [pc, #120]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d01d      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea6:	d018      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a1b      	ldr	r2, [pc, #108]	; (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d013      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a1a      	ldr	r2, [pc, #104]	; (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00e      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a18      	ldr	r2, [pc, #96]	; (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d009      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a13      	ldr	r2, [pc, #76]	; (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d004      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a14      	ldr	r2, [pc, #80]	; (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d10c      	bne.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40013400 	.word	0x40013400
 8006f1c:	40000400 	.word	0x40000400
 8006f20:	40000800 	.word	0x40000800
 8006f24:	40000c00 	.word	0x40000c00
 8006f28:	40014000 	.word	0x40014000

08006f2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e065      	b.n	8007014 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	041b      	lsls	r3, r3, #16
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a16      	ldr	r2, [pc, #88]	; (8007020 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a14      	ldr	r2, [pc, #80]	; (8007024 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d115      	bne.n	8007002 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	051b      	lsls	r3, r3, #20
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	40012c00 	.word	0x40012c00
 8007024:	40013400 	.word	0x40013400

08007028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e042      	b.n	80070fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800707c:	2b00      	cmp	r3, #0
 800707e:	d106      	bne.n	800708e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7fa fc91 	bl	80019b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2224      	movs	r2, #36	; 0x24
 8007092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fb28 	bl	80076fc <UART_SetConfig>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e022      	b.n	80070fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fdee 	bl	8007ca0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0201 	orr.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fe75 	bl	8007de4 <UART_CheckIdleState>
 80070fa:	4603      	mov	r3, r0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08a      	sub	sp, #40	; 0x28
 8007108:	af02      	add	r7, sp, #8
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	4613      	mov	r3, r2
 8007112:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800711a:	2b20      	cmp	r3, #32
 800711c:	f040 8084 	bne.w	8007228 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <HAL_UART_Transmit+0x28>
 8007126:	88fb      	ldrh	r3, [r7, #6]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e07c      	b.n	800722a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <HAL_UART_Transmit+0x3a>
 800713a:	2302      	movs	r3, #2
 800713c:	e075      	b.n	800722a <HAL_UART_Transmit+0x126>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2221      	movs	r2, #33	; 0x21
 8007152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007156:	f7fb fec1 	bl	8002edc <HAL_GetTick>
 800715a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	88fa      	ldrh	r2, [r7, #6]
 8007160:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	88fa      	ldrh	r2, [r7, #6]
 8007168:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007174:	d108      	bne.n	8007188 <HAL_UART_Transmit+0x84>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d104      	bne.n	8007188 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800717e:	2300      	movs	r3, #0
 8007180:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	61bb      	str	r3, [r7, #24]
 8007186:	e003      	b.n	8007190 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800718c:	2300      	movs	r3, #0
 800718e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8007198:	e02d      	b.n	80071f6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2200      	movs	r2, #0
 80071a2:	2180      	movs	r1, #128	; 0x80
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 fe65 	bl	8007e74 <UART_WaitOnFlagUntilTimeout>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e03a      	b.n	800722a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10b      	bne.n	80071d2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	881a      	ldrh	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071c6:	b292      	uxth	r2, r2
 80071c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	3302      	adds	r3, #2
 80071ce:	61bb      	str	r3, [r7, #24]
 80071d0:	e008      	b.n	80071e4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	781a      	ldrb	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	b292      	uxth	r2, r2
 80071dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	3301      	adds	r3, #1
 80071e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	3b01      	subs	r3, #1
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1cb      	bne.n	800719a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2200      	movs	r2, #0
 800720a:	2140      	movs	r1, #64	; 0x40
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 fe31 	bl	8007e74 <UART_WaitOnFlagUntilTimeout>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e006      	b.n	800722a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	e000      	b.n	800722a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007228:	2302      	movs	r3, #2
  }
}
 800722a:	4618      	mov	r0, r3
 800722c:	3720      	adds	r7, #32
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b08a      	sub	sp, #40	; 0x28
 8007236:	af02      	add	r7, sp, #8
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	603b      	str	r3, [r7, #0]
 800723e:	4613      	mov	r3, r2
 8007240:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007248:	2b20      	cmp	r3, #32
 800724a:	f040 80be 	bne.w	80073ca <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <HAL_UART_Receive+0x28>
 8007254:	88fb      	ldrh	r3, [r7, #6]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e0b6      	b.n	80073cc <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_UART_Receive+0x3a>
 8007268:	2302      	movs	r3, #2
 800726a:	e0af      	b.n	80073cc <HAL_UART_Receive+0x19a>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2222      	movs	r2, #34	; 0x22
 8007280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007284:	f7fb fe2a 	bl	8002edc <HAL_GetTick>
 8007288:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	88fa      	ldrh	r2, [r7, #6]
 800728e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	88fa      	ldrh	r2, [r7, #6]
 8007296:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a2:	d10e      	bne.n	80072c2 <HAL_UART_Receive+0x90>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d105      	bne.n	80072b8 <HAL_UART_Receive+0x86>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80072b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072b6:	e02d      	b.n	8007314 <HAL_UART_Receive+0xe2>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	22ff      	movs	r2, #255	; 0xff
 80072bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072c0:	e028      	b.n	8007314 <HAL_UART_Receive+0xe2>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10d      	bne.n	80072e6 <HAL_UART_Receive+0xb4>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d104      	bne.n	80072dc <HAL_UART_Receive+0xaa>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	22ff      	movs	r2, #255	; 0xff
 80072d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072da:	e01b      	b.n	8007314 <HAL_UART_Receive+0xe2>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	227f      	movs	r2, #127	; 0x7f
 80072e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072e4:	e016      	b.n	8007314 <HAL_UART_Receive+0xe2>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ee:	d10d      	bne.n	800730c <HAL_UART_Receive+0xda>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <HAL_UART_Receive+0xd0>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	227f      	movs	r2, #127	; 0x7f
 80072fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007300:	e008      	b.n	8007314 <HAL_UART_Receive+0xe2>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	223f      	movs	r2, #63	; 0x3f
 8007306:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800730a:	e003      	b.n	8007314 <HAL_UART_Receive+0xe2>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800731a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007324:	d108      	bne.n	8007338 <HAL_UART_Receive+0x106>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d104      	bne.n	8007338 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 800732e:	2300      	movs	r3, #0
 8007330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	61bb      	str	r3, [r7, #24]
 8007336:	e003      	b.n	8007340 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800733c:	2300      	movs	r3, #0
 800733e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007348:	e033      	b.n	80073b2 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2200      	movs	r2, #0
 8007352:	2120      	movs	r1, #32
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 fd8d 	bl	8007e74 <UART_WaitOnFlagUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e033      	b.n	80073cc <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10c      	bne.n	8007384 <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007370:	b29a      	uxth	r2, r3
 8007372:	8a7b      	ldrh	r3, [r7, #18]
 8007374:	4013      	ands	r3, r2
 8007376:	b29a      	uxth	r2, r3
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	3302      	adds	r3, #2
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	e00d      	b.n	80073a0 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800738a:	b29b      	uxth	r3, r3
 800738c:	b2da      	uxtb	r2, r3
 800738e:	8a7b      	ldrh	r3, [r7, #18]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	4013      	ands	r3, r2
 8007394:	b2da      	uxtb	r2, r3
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	3301      	adds	r3, #1
 800739e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	3b01      	subs	r3, #1
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1c5      	bne.n	800734a <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e000      	b.n	80073cc <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80073ca:	2302      	movs	r3, #2
  }
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3720      	adds	r7, #32
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80073fa:	4013      	ands	r3, r2
 80073fc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d118      	bne.n	8007436 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	f003 0320 	and.w	r3, r3, #32
 800740a:	2b00      	cmp	r3, #0
 800740c:	d013      	beq.n	8007436 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b00      	cmp	r3, #0
 8007416:	d104      	bne.n	8007422 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d009      	beq.n	8007436 <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 8145 	beq.w	80076b6 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	4798      	blx	r3
      }
      return;
 8007434:	e13f      	b.n	80076b6 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 80e8 	beq.w	800760e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	4ba1      	ldr	r3, [pc, #644]	; (80076c8 <HAL_UART_IRQHandler+0x2f4>)
 8007442:	4013      	ands	r3, r2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d105      	bne.n	8007454 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007448:	69ba      	ldr	r2, [r7, #24]
 800744a:	4ba0      	ldr	r3, [pc, #640]	; (80076cc <HAL_UART_IRQHandler+0x2f8>)
 800744c:	4013      	ands	r3, r2
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 80dd 	beq.w	800760e <HAL_UART_IRQHandler+0x23a>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d010      	beq.n	8007480 <HAL_UART_IRQHandler+0xac>
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00b      	beq.n	8007480 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2201      	movs	r2, #1
 800746e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007476:	f043 0201 	orr.w	r2, r3, #1
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d010      	beq.n	80074ac <HAL_UART_IRQHandler+0xd8>
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00b      	beq.n	80074ac <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2202      	movs	r2, #2
 800749a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a2:	f043 0204 	orr.w	r2, r3, #4
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d010      	beq.n	80074d8 <HAL_UART_IRQHandler+0x104>
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00b      	beq.n	80074d8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2204      	movs	r2, #4
 80074c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ce:	f043 0202 	orr.w	r2, r3, #2
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f003 0308 	and.w	r3, r3, #8
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d015      	beq.n	800750e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	f003 0320 	and.w	r3, r3, #32
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d104      	bne.n	80074f6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	4b76      	ldr	r3, [pc, #472]	; (80076c8 <HAL_UART_IRQHandler+0x2f4>)
 80074f0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00b      	beq.n	800750e <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2208      	movs	r2, #8
 80074fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007504:	f043 0208 	orr.w	r2, r3, #8
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007514:	2b00      	cmp	r3, #0
 8007516:	d011      	beq.n	800753c <HAL_UART_IRQHandler+0x168>
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00c      	beq.n	800753c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800752a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007532:	f043 0220 	orr.w	r2, r3, #32
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 80b9 	beq.w	80076ba <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	d011      	beq.n	8007576 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b00      	cmp	r3, #0
 800755a:	d104      	bne.n	8007566 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d007      	beq.n	8007576 <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800757c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007588:	2b40      	cmp	r3, #64	; 0x40
 800758a:	d004      	beq.n	8007596 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007592:	2b00      	cmp	r3, #0
 8007594:	d031      	beq.n	80075fa <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fcec 	bl	8007f74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a6:	2b40      	cmp	r3, #64	; 0x40
 80075a8:	d123      	bne.n	80075f2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075b8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d013      	beq.n	80075ea <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075c6:	4a42      	ldr	r2, [pc, #264]	; (80076d0 <HAL_UART_IRQHandler+0x2fc>)
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fb fda1 	bl	8003116 <HAL_DMA_Abort_IT>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d017      	beq.n	800760a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80075e4:	4610      	mov	r0, r2
 80075e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e8:	e00f      	b.n	800760a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f87c 	bl	80076e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f0:	e00b      	b.n	800760a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f878 	bl	80076e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f8:	e007      	b.n	800760a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f874 	bl	80076e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8007608:	e057      	b.n	80076ba <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760a:	bf00      	nop
    return;
 800760c:	e055      	b.n	80076ba <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00d      	beq.n	8007634 <HAL_UART_IRQHandler+0x260>
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d008      	beq.n	8007634 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800762a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fcf4 	bl	800801a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007632:	e045      	b.n	80076c0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800763a:	2b00      	cmp	r3, #0
 800763c:	d012      	beq.n	8007664 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007644:	2b00      	cmp	r3, #0
 8007646:	d104      	bne.n	8007652 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d008      	beq.n	8007664 <HAL_UART_IRQHandler+0x290>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007656:	2b00      	cmp	r3, #0
 8007658:	d031      	beq.n	80076be <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
    }
    return;
 8007662:	e02c      	b.n	80076be <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766a:	2b00      	cmp	r3, #0
 800766c:	d008      	beq.n	8007680 <HAL_UART_IRQHandler+0x2ac>
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fcb4 	bl	8007fe6 <UART_EndTransmit_IT>
    return;
 800767e:	e01f      	b.n	80076c0 <HAL_UART_IRQHandler+0x2ec>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d008      	beq.n	800769c <HAL_UART_IRQHandler+0x2c8>
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fcd4 	bl	8008042 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800769a:	e011      	b.n	80076c0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00c      	beq.n	80076c0 <HAL_UART_IRQHandler+0x2ec>
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	da09      	bge.n	80076c0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fcbe 	bl	800802e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076b2:	bf00      	nop
 80076b4:	e004      	b.n	80076c0 <HAL_UART_IRQHandler+0x2ec>
      return;
 80076b6:	bf00      	nop
 80076b8:	e002      	b.n	80076c0 <HAL_UART_IRQHandler+0x2ec>
    return;
 80076ba:	bf00      	nop
 80076bc:	e000      	b.n	80076c0 <HAL_UART_IRQHandler+0x2ec>
    return;
 80076be:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80076c0:	3720      	adds	r7, #32
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	10000001 	.word	0x10000001
 80076cc:	04000120 	.word	0x04000120
 80076d0:	08007fbb 	.word	0x08007fbb

080076d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076fc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007700:	b088      	sub	sp, #32
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	4313      	orrs	r3, r2
 8007720:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	4313      	orrs	r3, r2
 800772a:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4bb1      	ldr	r3, [pc, #708]	; (80079f8 <UART_SetConfig+0x2fc>)
 8007734:	4013      	ands	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	69f9      	ldr	r1, [r7, #28]
 800773c:	430b      	orrs	r3, r1
 800773e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4aa6      	ldr	r2, [pc, #664]	; (80079fc <UART_SetConfig+0x300>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d004      	beq.n	8007770 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	4313      	orrs	r3, r2
 800776e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800777a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6812      	ldr	r2, [r2, #0]
 8007782:	69f9      	ldr	r1, [r7, #28]
 8007784:	430b      	orrs	r3, r1
 8007786:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	f023 010f 	bic.w	r1, r3, #15
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a97      	ldr	r2, [pc, #604]	; (8007a00 <UART_SetConfig+0x304>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d121      	bne.n	80077ec <UART_SetConfig+0xf0>
 80077a8:	4b96      	ldr	r3, [pc, #600]	; (8007a04 <UART_SetConfig+0x308>)
 80077aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d816      	bhi.n	80077e4 <UART_SetConfig+0xe8>
 80077b6:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <UART_SetConfig+0xc0>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	080077cd 	.word	0x080077cd
 80077c0:	080077d9 	.word	0x080077d9
 80077c4:	080077d3 	.word	0x080077d3
 80077c8:	080077df 	.word	0x080077df
 80077cc:	2301      	movs	r3, #1
 80077ce:	76fb      	strb	r3, [r7, #27]
 80077d0:	e0e8      	b.n	80079a4 <UART_SetConfig+0x2a8>
 80077d2:	2302      	movs	r3, #2
 80077d4:	76fb      	strb	r3, [r7, #27]
 80077d6:	e0e5      	b.n	80079a4 <UART_SetConfig+0x2a8>
 80077d8:	2304      	movs	r3, #4
 80077da:	76fb      	strb	r3, [r7, #27]
 80077dc:	e0e2      	b.n	80079a4 <UART_SetConfig+0x2a8>
 80077de:	2308      	movs	r3, #8
 80077e0:	76fb      	strb	r3, [r7, #27]
 80077e2:	e0df      	b.n	80079a4 <UART_SetConfig+0x2a8>
 80077e4:	2310      	movs	r3, #16
 80077e6:	76fb      	strb	r3, [r7, #27]
 80077e8:	bf00      	nop
 80077ea:	e0db      	b.n	80079a4 <UART_SetConfig+0x2a8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a85      	ldr	r2, [pc, #532]	; (8007a08 <UART_SetConfig+0x30c>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d134      	bne.n	8007860 <UART_SetConfig+0x164>
 80077f6:	4b83      	ldr	r3, [pc, #524]	; (8007a04 <UART_SetConfig+0x308>)
 80077f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077fc:	f003 030c 	and.w	r3, r3, #12
 8007800:	2b0c      	cmp	r3, #12
 8007802:	d829      	bhi.n	8007858 <UART_SetConfig+0x15c>
 8007804:	a201      	add	r2, pc, #4	; (adr r2, 800780c <UART_SetConfig+0x110>)
 8007806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780a:	bf00      	nop
 800780c:	08007841 	.word	0x08007841
 8007810:	08007859 	.word	0x08007859
 8007814:	08007859 	.word	0x08007859
 8007818:	08007859 	.word	0x08007859
 800781c:	0800784d 	.word	0x0800784d
 8007820:	08007859 	.word	0x08007859
 8007824:	08007859 	.word	0x08007859
 8007828:	08007859 	.word	0x08007859
 800782c:	08007847 	.word	0x08007847
 8007830:	08007859 	.word	0x08007859
 8007834:	08007859 	.word	0x08007859
 8007838:	08007859 	.word	0x08007859
 800783c:	08007853 	.word	0x08007853
 8007840:	2300      	movs	r3, #0
 8007842:	76fb      	strb	r3, [r7, #27]
 8007844:	e0ae      	b.n	80079a4 <UART_SetConfig+0x2a8>
 8007846:	2302      	movs	r3, #2
 8007848:	76fb      	strb	r3, [r7, #27]
 800784a:	e0ab      	b.n	80079a4 <UART_SetConfig+0x2a8>
 800784c:	2304      	movs	r3, #4
 800784e:	76fb      	strb	r3, [r7, #27]
 8007850:	e0a8      	b.n	80079a4 <UART_SetConfig+0x2a8>
 8007852:	2308      	movs	r3, #8
 8007854:	76fb      	strb	r3, [r7, #27]
 8007856:	e0a5      	b.n	80079a4 <UART_SetConfig+0x2a8>
 8007858:	2310      	movs	r3, #16
 800785a:	76fb      	strb	r3, [r7, #27]
 800785c:	bf00      	nop
 800785e:	e0a1      	b.n	80079a4 <UART_SetConfig+0x2a8>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a69      	ldr	r2, [pc, #420]	; (8007a0c <UART_SetConfig+0x310>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d120      	bne.n	80078ac <UART_SetConfig+0x1b0>
 800786a:	4b66      	ldr	r3, [pc, #408]	; (8007a04 <UART_SetConfig+0x308>)
 800786c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007870:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007874:	2b10      	cmp	r3, #16
 8007876:	d00f      	beq.n	8007898 <UART_SetConfig+0x19c>
 8007878:	2b10      	cmp	r3, #16
 800787a:	d802      	bhi.n	8007882 <UART_SetConfig+0x186>
 800787c:	2b00      	cmp	r3, #0
 800787e:	d005      	beq.n	800788c <UART_SetConfig+0x190>
 8007880:	e010      	b.n	80078a4 <UART_SetConfig+0x1a8>
 8007882:	2b20      	cmp	r3, #32
 8007884:	d005      	beq.n	8007892 <UART_SetConfig+0x196>
 8007886:	2b30      	cmp	r3, #48	; 0x30
 8007888:	d009      	beq.n	800789e <UART_SetConfig+0x1a2>
 800788a:	e00b      	b.n	80078a4 <UART_SetConfig+0x1a8>
 800788c:	2300      	movs	r3, #0
 800788e:	76fb      	strb	r3, [r7, #27]
 8007890:	e088      	b.n	80079a4 <UART_SetConfig+0x2a8>
 8007892:	2302      	movs	r3, #2
 8007894:	76fb      	strb	r3, [r7, #27]
 8007896:	e085      	b.n	80079a4 <UART_SetConfig+0x2a8>
 8007898:	2304      	movs	r3, #4
 800789a:	76fb      	strb	r3, [r7, #27]
 800789c:	e082      	b.n	80079a4 <UART_SetConfig+0x2a8>
 800789e:	2308      	movs	r3, #8
 80078a0:	76fb      	strb	r3, [r7, #27]
 80078a2:	e07f      	b.n	80079a4 <UART_SetConfig+0x2a8>
 80078a4:	2310      	movs	r3, #16
 80078a6:	76fb      	strb	r3, [r7, #27]
 80078a8:	bf00      	nop
 80078aa:	e07b      	b.n	80079a4 <UART_SetConfig+0x2a8>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a57      	ldr	r2, [pc, #348]	; (8007a10 <UART_SetConfig+0x314>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d120      	bne.n	80078f8 <UART_SetConfig+0x1fc>
 80078b6:	4b53      	ldr	r3, [pc, #332]	; (8007a04 <UART_SetConfig+0x308>)
 80078b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80078c0:	2b40      	cmp	r3, #64	; 0x40
 80078c2:	d00f      	beq.n	80078e4 <UART_SetConfig+0x1e8>
 80078c4:	2b40      	cmp	r3, #64	; 0x40
 80078c6:	d802      	bhi.n	80078ce <UART_SetConfig+0x1d2>
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <UART_SetConfig+0x1dc>
 80078cc:	e010      	b.n	80078f0 <UART_SetConfig+0x1f4>
 80078ce:	2b80      	cmp	r3, #128	; 0x80
 80078d0:	d005      	beq.n	80078de <UART_SetConfig+0x1e2>
 80078d2:	2bc0      	cmp	r3, #192	; 0xc0
 80078d4:	d009      	beq.n	80078ea <UART_SetConfig+0x1ee>
 80078d6:	e00b      	b.n	80078f0 <UART_SetConfig+0x1f4>
 80078d8:	2300      	movs	r3, #0
 80078da:	76fb      	strb	r3, [r7, #27]
 80078dc:	e062      	b.n	80079a4 <UART_SetConfig+0x2a8>
 80078de:	2302      	movs	r3, #2
 80078e0:	76fb      	strb	r3, [r7, #27]
 80078e2:	e05f      	b.n	80079a4 <UART_SetConfig+0x2a8>
 80078e4:	2304      	movs	r3, #4
 80078e6:	76fb      	strb	r3, [r7, #27]
 80078e8:	e05c      	b.n	80079a4 <UART_SetConfig+0x2a8>
 80078ea:	2308      	movs	r3, #8
 80078ec:	76fb      	strb	r3, [r7, #27]
 80078ee:	e059      	b.n	80079a4 <UART_SetConfig+0x2a8>
 80078f0:	2310      	movs	r3, #16
 80078f2:	76fb      	strb	r3, [r7, #27]
 80078f4:	bf00      	nop
 80078f6:	e055      	b.n	80079a4 <UART_SetConfig+0x2a8>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a45      	ldr	r2, [pc, #276]	; (8007a14 <UART_SetConfig+0x318>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d124      	bne.n	800794c <UART_SetConfig+0x250>
 8007902:	4b40      	ldr	r3, [pc, #256]	; (8007a04 <UART_SetConfig+0x308>)
 8007904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800790c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007910:	d012      	beq.n	8007938 <UART_SetConfig+0x23c>
 8007912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007916:	d802      	bhi.n	800791e <UART_SetConfig+0x222>
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <UART_SetConfig+0x230>
 800791c:	e012      	b.n	8007944 <UART_SetConfig+0x248>
 800791e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007922:	d006      	beq.n	8007932 <UART_SetConfig+0x236>
 8007924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007928:	d009      	beq.n	800793e <UART_SetConfig+0x242>
 800792a:	e00b      	b.n	8007944 <UART_SetConfig+0x248>
 800792c:	2300      	movs	r3, #0
 800792e:	76fb      	strb	r3, [r7, #27]
 8007930:	e038      	b.n	80079a4 <UART_SetConfig+0x2a8>
 8007932:	2302      	movs	r3, #2
 8007934:	76fb      	strb	r3, [r7, #27]
 8007936:	e035      	b.n	80079a4 <UART_SetConfig+0x2a8>
 8007938:	2304      	movs	r3, #4
 800793a:	76fb      	strb	r3, [r7, #27]
 800793c:	e032      	b.n	80079a4 <UART_SetConfig+0x2a8>
 800793e:	2308      	movs	r3, #8
 8007940:	76fb      	strb	r3, [r7, #27]
 8007942:	e02f      	b.n	80079a4 <UART_SetConfig+0x2a8>
 8007944:	2310      	movs	r3, #16
 8007946:	76fb      	strb	r3, [r7, #27]
 8007948:	bf00      	nop
 800794a:	e02b      	b.n	80079a4 <UART_SetConfig+0x2a8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a2a      	ldr	r2, [pc, #168]	; (80079fc <UART_SetConfig+0x300>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d124      	bne.n	80079a0 <UART_SetConfig+0x2a4>
 8007956:	4b2b      	ldr	r3, [pc, #172]	; (8007a04 <UART_SetConfig+0x308>)
 8007958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007964:	d012      	beq.n	800798c <UART_SetConfig+0x290>
 8007966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800796a:	d802      	bhi.n	8007972 <UART_SetConfig+0x276>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d007      	beq.n	8007980 <UART_SetConfig+0x284>
 8007970:	e012      	b.n	8007998 <UART_SetConfig+0x29c>
 8007972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007976:	d006      	beq.n	8007986 <UART_SetConfig+0x28a>
 8007978:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800797c:	d009      	beq.n	8007992 <UART_SetConfig+0x296>
 800797e:	e00b      	b.n	8007998 <UART_SetConfig+0x29c>
 8007980:	2300      	movs	r3, #0
 8007982:	76fb      	strb	r3, [r7, #27]
 8007984:	e00e      	b.n	80079a4 <UART_SetConfig+0x2a8>
 8007986:	2302      	movs	r3, #2
 8007988:	76fb      	strb	r3, [r7, #27]
 800798a:	e00b      	b.n	80079a4 <UART_SetConfig+0x2a8>
 800798c:	2304      	movs	r3, #4
 800798e:	76fb      	strb	r3, [r7, #27]
 8007990:	e008      	b.n	80079a4 <UART_SetConfig+0x2a8>
 8007992:	2308      	movs	r3, #8
 8007994:	76fb      	strb	r3, [r7, #27]
 8007996:	e005      	b.n	80079a4 <UART_SetConfig+0x2a8>
 8007998:	2310      	movs	r3, #16
 800799a:	76fb      	strb	r3, [r7, #27]
 800799c:	bf00      	nop
 800799e:	e001      	b.n	80079a4 <UART_SetConfig+0x2a8>
 80079a0:	2310      	movs	r3, #16
 80079a2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a14      	ldr	r2, [pc, #80]	; (80079fc <UART_SetConfig+0x300>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	f040 80a1 	bne.w	8007af2 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079b0:	7efb      	ldrb	r3, [r7, #27]
 80079b2:	2b08      	cmp	r3, #8
 80079b4:	d836      	bhi.n	8007a24 <UART_SetConfig+0x328>
 80079b6:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <UART_SetConfig+0x2c0>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079e1 	.word	0x080079e1
 80079c0:	08007a25 	.word	0x08007a25
 80079c4:	080079e9 	.word	0x080079e9
 80079c8:	08007a25 	.word	0x08007a25
 80079cc:	080079ef 	.word	0x080079ef
 80079d0:	08007a25 	.word	0x08007a25
 80079d4:	08007a25 	.word	0x08007a25
 80079d8:	08007a25 	.word	0x08007a25
 80079dc:	08007a1d 	.word	0x08007a1d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079e0:	f7fd fb26 	bl	8005030 <HAL_RCC_GetPCLK1Freq>
 80079e4:	6178      	str	r0, [r7, #20]
        break;
 80079e6:	e022      	b.n	8007a2e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079e8:	4b0b      	ldr	r3, [pc, #44]	; (8007a18 <UART_SetConfig+0x31c>)
 80079ea:	617b      	str	r3, [r7, #20]
        break;
 80079ec:	e01f      	b.n	8007a2e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ee:	f7fd fa89 	bl	8004f04 <HAL_RCC_GetSysClockFreq>
 80079f2:	6178      	str	r0, [r7, #20]
        break;
 80079f4:	e01b      	b.n	8007a2e <UART_SetConfig+0x332>
 80079f6:	bf00      	nop
 80079f8:	cfff69f3 	.word	0xcfff69f3
 80079fc:	40008000 	.word	0x40008000
 8007a00:	40013800 	.word	0x40013800
 8007a04:	40021000 	.word	0x40021000
 8007a08:	40004400 	.word	0x40004400
 8007a0c:	40004800 	.word	0x40004800
 8007a10:	40004c00 	.word	0x40004c00
 8007a14:	40005000 	.word	0x40005000
 8007a18:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a20:	617b      	str	r3, [r7, #20]
        break;
 8007a22:	e004      	b.n	8007a2e <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	76bb      	strb	r3, [r7, #26]
        break;
 8007a2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 811d 	beq.w	8007c70 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3a:	4a97      	ldr	r2, [pc, #604]	; (8007c98 <UART_SetConfig+0x59c>)
 8007a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a40:	461a      	mov	r2, r3
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a48:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	4413      	add	r3, r2
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d305      	bcc.n	8007a66 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d902      	bls.n	8007a6c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	76bb      	strb	r3, [r7, #26]
 8007a6a:	e101      	b.n	8007c70 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f04f 0100 	mov.w	r1, #0
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	4a87      	ldr	r2, [pc, #540]	; (8007c98 <UART_SetConfig+0x59c>)
 8007a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	f04f 0400 	mov.w	r4, #0
 8007a84:	461a      	mov	r2, r3
 8007a86:	4623      	mov	r3, r4
 8007a88:	f7f9 f820 	bl	8000acc <__aeabi_uldivmod>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	4619      	mov	r1, r3
 8007a92:	4622      	mov	r2, r4
 8007a94:	f04f 0300 	mov.w	r3, #0
 8007a98:	f04f 0400 	mov.w	r4, #0
 8007a9c:	0214      	lsls	r4, r2, #8
 8007a9e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007aa2:	020b      	lsls	r3, r1, #8
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6852      	ldr	r2, [r2, #4]
 8007aa8:	0852      	lsrs	r2, r2, #1
 8007aaa:	4611      	mov	r1, r2
 8007aac:	f04f 0200 	mov.w	r2, #0
 8007ab0:	eb13 0b01 	adds.w	fp, r3, r1
 8007ab4:	eb44 0c02 	adc.w	ip, r4, r2
 8007ab8:	4658      	mov	r0, fp
 8007aba:	4661      	mov	r1, ip
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f04f 0400 	mov.w	r4, #0
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	4623      	mov	r3, r4
 8007ac8:	f7f9 f800 	bl	8000acc <__aeabi_uldivmod>
 8007acc:	4603      	mov	r3, r0
 8007ace:	460c      	mov	r4, r1
 8007ad0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ad8:	d308      	bcc.n	8007aec <UART_SetConfig+0x3f0>
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ae0:	d204      	bcs.n	8007aec <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	60da      	str	r2, [r3, #12]
 8007aea:	e0c1      	b.n	8007c70 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	76bb      	strb	r3, [r7, #26]
 8007af0:	e0be      	b.n	8007c70 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007afa:	d164      	bne.n	8007bc6 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8007afc:	7efb      	ldrb	r3, [r7, #27]
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	d827      	bhi.n	8007b52 <UART_SetConfig+0x456>
 8007b02:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <UART_SetConfig+0x40c>)
 8007b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b08:	08007b2d 	.word	0x08007b2d
 8007b0c:	08007b35 	.word	0x08007b35
 8007b10:	08007b3d 	.word	0x08007b3d
 8007b14:	08007b53 	.word	0x08007b53
 8007b18:	08007b43 	.word	0x08007b43
 8007b1c:	08007b53 	.word	0x08007b53
 8007b20:	08007b53 	.word	0x08007b53
 8007b24:	08007b53 	.word	0x08007b53
 8007b28:	08007b4b 	.word	0x08007b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b2c:	f7fd fa80 	bl	8005030 <HAL_RCC_GetPCLK1Freq>
 8007b30:	6178      	str	r0, [r7, #20]
        break;
 8007b32:	e013      	b.n	8007b5c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b34:	f7fd fa92 	bl	800505c <HAL_RCC_GetPCLK2Freq>
 8007b38:	6178      	str	r0, [r7, #20]
        break;
 8007b3a:	e00f      	b.n	8007b5c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b3c:	4b57      	ldr	r3, [pc, #348]	; (8007c9c <UART_SetConfig+0x5a0>)
 8007b3e:	617b      	str	r3, [r7, #20]
        break;
 8007b40:	e00c      	b.n	8007b5c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b42:	f7fd f9df 	bl	8004f04 <HAL_RCC_GetSysClockFreq>
 8007b46:	6178      	str	r0, [r7, #20]
        break;
 8007b48:	e008      	b.n	8007b5c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b4e:	617b      	str	r3, [r7, #20]
        break;
 8007b50:	e004      	b.n	8007b5c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	76bb      	strb	r3, [r7, #26]
        break;
 8007b5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 8086 	beq.w	8007c70 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	4a4b      	ldr	r2, [pc, #300]	; (8007c98 <UART_SetConfig+0x59c>)
 8007b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b76:	005a      	lsls	r2, r3, #1
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	085b      	lsrs	r3, r3, #1
 8007b7e:	441a      	add	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	2b0f      	cmp	r3, #15
 8007b90:	d916      	bls.n	8007bc0 <UART_SetConfig+0x4c4>
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b98:	d212      	bcs.n	8007bc0 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	f023 030f 	bic.w	r3, r3, #15
 8007ba2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	f003 0307 	and.w	r3, r3, #7
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	89fb      	ldrh	r3, [r7, #14]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	89fa      	ldrh	r2, [r7, #14]
 8007bbc:	60da      	str	r2, [r3, #12]
 8007bbe:	e057      	b.n	8007c70 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	76bb      	strb	r3, [r7, #26]
 8007bc4:	e054      	b.n	8007c70 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bc6:	7efb      	ldrb	r3, [r7, #27]
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d828      	bhi.n	8007c1e <UART_SetConfig+0x522>
 8007bcc:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <UART_SetConfig+0x4d8>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007bf9 	.word	0x08007bf9
 8007bd8:	08007c01 	.word	0x08007c01
 8007bdc:	08007c09 	.word	0x08007c09
 8007be0:	08007c1f 	.word	0x08007c1f
 8007be4:	08007c0f 	.word	0x08007c0f
 8007be8:	08007c1f 	.word	0x08007c1f
 8007bec:	08007c1f 	.word	0x08007c1f
 8007bf0:	08007c1f 	.word	0x08007c1f
 8007bf4:	08007c17 	.word	0x08007c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bf8:	f7fd fa1a 	bl	8005030 <HAL_RCC_GetPCLK1Freq>
 8007bfc:	6178      	str	r0, [r7, #20]
        break;
 8007bfe:	e013      	b.n	8007c28 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c00:	f7fd fa2c 	bl	800505c <HAL_RCC_GetPCLK2Freq>
 8007c04:	6178      	str	r0, [r7, #20]
        break;
 8007c06:	e00f      	b.n	8007c28 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c08:	4b24      	ldr	r3, [pc, #144]	; (8007c9c <UART_SetConfig+0x5a0>)
 8007c0a:	617b      	str	r3, [r7, #20]
        break;
 8007c0c:	e00c      	b.n	8007c28 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c0e:	f7fd f979 	bl	8004f04 <HAL_RCC_GetSysClockFreq>
 8007c12:	6178      	str	r0, [r7, #20]
        break;
 8007c14:	e008      	b.n	8007c28 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c1a:	617b      	str	r3, [r7, #20]
        break;
 8007c1c:	e004      	b.n	8007c28 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	76bb      	strb	r3, [r7, #26]
        break;
 8007c26:	bf00      	nop
    }

    if (pclk != 0U)
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d020      	beq.n	8007c70 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	4a19      	ldr	r2, [pc, #100]	; (8007c98 <UART_SetConfig+0x59c>)
 8007c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c38:	461a      	mov	r2, r3
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	085b      	lsrs	r3, r3, #1
 8007c46:	441a      	add	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	2b0f      	cmp	r3, #15
 8007c58:	d908      	bls.n	8007c6c <UART_SetConfig+0x570>
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c60:	d204      	bcs.n	8007c6c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	60da      	str	r2, [r3, #12]
 8007c6a:	e001      	b.n	8007c70 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007c8c:	7ebb      	ldrb	r3, [r7, #26]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3720      	adds	r7, #32
 8007c92:	46bd      	mov	sp, r7
 8007c94:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007c98:	08009164 	.word	0x08009164
 8007c9c:	00f42400 	.word	0x00f42400

08007ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00a      	beq.n	8007cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00a      	beq.n	8007d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d34:	f003 0310 	and.w	r3, r3, #16
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00a      	beq.n	8007d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d56:	f003 0320 	and.w	r3, r3, #32
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01a      	beq.n	8007db6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d9e:	d10a      	bne.n	8007db6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	605a      	str	r2, [r3, #4]
  }
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007df4:	f7fb f872 	bl	8002edc <HAL_GetTick>
 8007df8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0308 	and.w	r3, r3, #8
 8007e04:	2b08      	cmp	r3, #8
 8007e06:	d10e      	bne.n	8007e26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f82c 	bl	8007e74 <UART_WaitOnFlagUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e022      	b.n	8007e6c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d10e      	bne.n	8007e52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f816 	bl	8007e74 <UART_WaitOnFlagUntilTimeout>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e00c      	b.n	8007e6c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	603b      	str	r3, [r7, #0]
 8007e80:	4613      	mov	r3, r2
 8007e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e84:	e062      	b.n	8007f4c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8c:	d05e      	beq.n	8007f4c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e8e:	f7fb f825 	bl	8002edc <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d302      	bcc.n	8007ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d11d      	bne.n	8007ee0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007eb2:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 0201 	bic.w	r2, r2, #1
 8007ec2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e045      	b.n	8007f6c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0304 	and.w	r3, r3, #4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d02e      	beq.n	8007f4c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007efc:	d126      	bne.n	8007f4c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f06:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f16:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0201 	bic.w	r2, r2, #1
 8007f26:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e00f      	b.n	8007f6c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	69da      	ldr	r2, [r3, #28]
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	4013      	ands	r3, r2
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	bf0c      	ite	eq
 8007f5c:	2301      	moveq	r3, #1
 8007f5e:	2300      	movne	r3, #0
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	461a      	mov	r2, r3
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d08d      	beq.n	8007e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f8a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	6812      	ldr	r2, [r2, #0]
 8007f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f9a:	f023 0301 	bic.w	r3, r3, #1
 8007f9e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f7ff fb85 	bl	80076e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fde:	bf00      	nop
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ffc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7ff fb61 	bl	80076d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008012:	bf00      	nop
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800804a:	bf00      	nop
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008056:	b480      	push	{r7}
 8008058:	b085      	sub	sp, #20
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008064:	2b01      	cmp	r3, #1
 8008066:	d101      	bne.n	800806c <HAL_UARTEx_DisableFifoMode+0x16>
 8008068:	2302      	movs	r3, #2
 800806a:	e027      	b.n	80080bc <HAL_UARTEx_DisableFifoMode+0x66>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2224      	movs	r2, #36	; 0x24
 8008078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800809a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d101      	bne.n	80080e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080dc:	2302      	movs	r3, #2
 80080de:	e02d      	b.n	800813c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2224      	movs	r2, #36	; 0x24
 80080ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 0201 	bic.w	r2, r2, #1
 8008106:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f84f 	bl	80081c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2220      	movs	r2, #32
 800812e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008154:	2b01      	cmp	r3, #1
 8008156:	d101      	bne.n	800815c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008158:	2302      	movs	r3, #2
 800815a:	e02d      	b.n	80081b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2224      	movs	r2, #36	; 0x24
 8008168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f022 0201 	bic.w	r2, r2, #1
 8008182:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	430a      	orrs	r2, r1
 8008196:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f811 	bl	80081c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b089      	sub	sp, #36	; 0x24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80081c8:	4a2f      	ldr	r2, [pc, #188]	; (8008288 <UARTEx_SetNbDataToProcess+0xc8>)
 80081ca:	f107 0314 	add.w	r3, r7, #20
 80081ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80081d2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80081d6:	4a2d      	ldr	r2, [pc, #180]	; (800828c <UARTEx_SetNbDataToProcess+0xcc>)
 80081d8:	f107 030c 	add.w	r3, r7, #12
 80081dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80081e0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d108      	bne.n	80081fe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081fc:	e03d      	b.n	800827a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081fe:	2308      	movs	r3, #8
 8008200:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008202:	2308      	movs	r3, #8
 8008204:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	0e5b      	lsrs	r3, r3, #25
 800820e:	b2db      	uxtb	r3, r3
 8008210:	f003 0307 	and.w	r3, r3, #7
 8008214:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	0f5b      	lsrs	r3, r3, #29
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008226:	7fbb      	ldrb	r3, [r7, #30]
 8008228:	7f3a      	ldrb	r2, [r7, #28]
 800822a:	f107 0120 	add.w	r1, r7, #32
 800822e:	440a      	add	r2, r1
 8008230:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008234:	fb02 f303 	mul.w	r3, r2, r3
 8008238:	7f3a      	ldrb	r2, [r7, #28]
 800823a:	f107 0120 	add.w	r1, r7, #32
 800823e:	440a      	add	r2, r1
 8008240:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008244:	fb93 f3f2 	sdiv	r3, r3, r2
 8008248:	b29a      	uxth	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008250:	7ffb      	ldrb	r3, [r7, #31]
 8008252:	7f7a      	ldrb	r2, [r7, #29]
 8008254:	f107 0120 	add.w	r1, r7, #32
 8008258:	440a      	add	r2, r1
 800825a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800825e:	fb02 f303 	mul.w	r3, r2, r3
 8008262:	7f7a      	ldrb	r2, [r7, #29]
 8008264:	f107 0120 	add.w	r1, r7, #32
 8008268:	440a      	add	r2, r1
 800826a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800826e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008272:	b29a      	uxth	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800827a:	bf00      	nop
 800827c:	3724      	adds	r7, #36	; 0x24
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	0800910c 	.word	0x0800910c
 800828c:	08009114 	.word	0x08009114

08008290 <__errno>:
 8008290:	4b01      	ldr	r3, [pc, #4]	; (8008298 <__errno+0x8>)
 8008292:	6818      	ldr	r0, [r3, #0]
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	2000000c 	.word	0x2000000c

0800829c <__libc_init_array>:
 800829c:	b570      	push	{r4, r5, r6, lr}
 800829e:	4e0d      	ldr	r6, [pc, #52]	; (80082d4 <__libc_init_array+0x38>)
 80082a0:	4c0d      	ldr	r4, [pc, #52]	; (80082d8 <__libc_init_array+0x3c>)
 80082a2:	1ba4      	subs	r4, r4, r6
 80082a4:	10a4      	asrs	r4, r4, #2
 80082a6:	2500      	movs	r5, #0
 80082a8:	42a5      	cmp	r5, r4
 80082aa:	d109      	bne.n	80082c0 <__libc_init_array+0x24>
 80082ac:	4e0b      	ldr	r6, [pc, #44]	; (80082dc <__libc_init_array+0x40>)
 80082ae:	4c0c      	ldr	r4, [pc, #48]	; (80082e0 <__libc_init_array+0x44>)
 80082b0:	f000 ff04 	bl	80090bc <_init>
 80082b4:	1ba4      	subs	r4, r4, r6
 80082b6:	10a4      	asrs	r4, r4, #2
 80082b8:	2500      	movs	r5, #0
 80082ba:	42a5      	cmp	r5, r4
 80082bc:	d105      	bne.n	80082ca <__libc_init_array+0x2e>
 80082be:	bd70      	pop	{r4, r5, r6, pc}
 80082c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082c4:	4798      	blx	r3
 80082c6:	3501      	adds	r5, #1
 80082c8:	e7ee      	b.n	80082a8 <__libc_init_array+0xc>
 80082ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082ce:	4798      	blx	r3
 80082d0:	3501      	adds	r5, #1
 80082d2:	e7f2      	b.n	80082ba <__libc_init_array+0x1e>
 80082d4:	0800921c 	.word	0x0800921c
 80082d8:	0800921c 	.word	0x0800921c
 80082dc:	0800921c 	.word	0x0800921c
 80082e0:	08009220 	.word	0x08009220

080082e4 <memset>:
 80082e4:	4402      	add	r2, r0
 80082e6:	4603      	mov	r3, r0
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d100      	bne.n	80082ee <memset+0xa>
 80082ec:	4770      	bx	lr
 80082ee:	f803 1b01 	strb.w	r1, [r3], #1
 80082f2:	e7f9      	b.n	80082e8 <memset+0x4>

080082f4 <iprintf>:
 80082f4:	b40f      	push	{r0, r1, r2, r3}
 80082f6:	4b0a      	ldr	r3, [pc, #40]	; (8008320 <iprintf+0x2c>)
 80082f8:	b513      	push	{r0, r1, r4, lr}
 80082fa:	681c      	ldr	r4, [r3, #0]
 80082fc:	b124      	cbz	r4, 8008308 <iprintf+0x14>
 80082fe:	69a3      	ldr	r3, [r4, #24]
 8008300:	b913      	cbnz	r3, 8008308 <iprintf+0x14>
 8008302:	4620      	mov	r0, r4
 8008304:	f000 f84e 	bl	80083a4 <__sinit>
 8008308:	ab05      	add	r3, sp, #20
 800830a:	9a04      	ldr	r2, [sp, #16]
 800830c:	68a1      	ldr	r1, [r4, #8]
 800830e:	9301      	str	r3, [sp, #4]
 8008310:	4620      	mov	r0, r4
 8008312:	f000 f955 	bl	80085c0 <_vfiprintf_r>
 8008316:	b002      	add	sp, #8
 8008318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800831c:	b004      	add	sp, #16
 800831e:	4770      	bx	lr
 8008320:	2000000c 	.word	0x2000000c

08008324 <std>:
 8008324:	2300      	movs	r3, #0
 8008326:	b510      	push	{r4, lr}
 8008328:	4604      	mov	r4, r0
 800832a:	e9c0 3300 	strd	r3, r3, [r0]
 800832e:	6083      	str	r3, [r0, #8]
 8008330:	8181      	strh	r1, [r0, #12]
 8008332:	6643      	str	r3, [r0, #100]	; 0x64
 8008334:	81c2      	strh	r2, [r0, #14]
 8008336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800833a:	6183      	str	r3, [r0, #24]
 800833c:	4619      	mov	r1, r3
 800833e:	2208      	movs	r2, #8
 8008340:	305c      	adds	r0, #92	; 0x5c
 8008342:	f7ff ffcf 	bl	80082e4 <memset>
 8008346:	4b05      	ldr	r3, [pc, #20]	; (800835c <std+0x38>)
 8008348:	6263      	str	r3, [r4, #36]	; 0x24
 800834a:	4b05      	ldr	r3, [pc, #20]	; (8008360 <std+0x3c>)
 800834c:	62a3      	str	r3, [r4, #40]	; 0x28
 800834e:	4b05      	ldr	r3, [pc, #20]	; (8008364 <std+0x40>)
 8008350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008352:	4b05      	ldr	r3, [pc, #20]	; (8008368 <std+0x44>)
 8008354:	6224      	str	r4, [r4, #32]
 8008356:	6323      	str	r3, [r4, #48]	; 0x30
 8008358:	bd10      	pop	{r4, pc}
 800835a:	bf00      	nop
 800835c:	08008b1d 	.word	0x08008b1d
 8008360:	08008b3f 	.word	0x08008b3f
 8008364:	08008b77 	.word	0x08008b77
 8008368:	08008b9b 	.word	0x08008b9b

0800836c <_cleanup_r>:
 800836c:	4901      	ldr	r1, [pc, #4]	; (8008374 <_cleanup_r+0x8>)
 800836e:	f000 b885 	b.w	800847c <_fwalk_reent>
 8008372:	bf00      	nop
 8008374:	08008e75 	.word	0x08008e75

08008378 <__sfmoreglue>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	1e4a      	subs	r2, r1, #1
 800837c:	2568      	movs	r5, #104	; 0x68
 800837e:	4355      	muls	r5, r2
 8008380:	460e      	mov	r6, r1
 8008382:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008386:	f000 f897 	bl	80084b8 <_malloc_r>
 800838a:	4604      	mov	r4, r0
 800838c:	b140      	cbz	r0, 80083a0 <__sfmoreglue+0x28>
 800838e:	2100      	movs	r1, #0
 8008390:	e9c0 1600 	strd	r1, r6, [r0]
 8008394:	300c      	adds	r0, #12
 8008396:	60a0      	str	r0, [r4, #8]
 8008398:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800839c:	f7ff ffa2 	bl	80082e4 <memset>
 80083a0:	4620      	mov	r0, r4
 80083a2:	bd70      	pop	{r4, r5, r6, pc}

080083a4 <__sinit>:
 80083a4:	6983      	ldr	r3, [r0, #24]
 80083a6:	b510      	push	{r4, lr}
 80083a8:	4604      	mov	r4, r0
 80083aa:	bb33      	cbnz	r3, 80083fa <__sinit+0x56>
 80083ac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80083b0:	6503      	str	r3, [r0, #80]	; 0x50
 80083b2:	4b12      	ldr	r3, [pc, #72]	; (80083fc <__sinit+0x58>)
 80083b4:	4a12      	ldr	r2, [pc, #72]	; (8008400 <__sinit+0x5c>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6282      	str	r2, [r0, #40]	; 0x28
 80083ba:	4298      	cmp	r0, r3
 80083bc:	bf04      	itt	eq
 80083be:	2301      	moveq	r3, #1
 80083c0:	6183      	streq	r3, [r0, #24]
 80083c2:	f000 f81f 	bl	8008404 <__sfp>
 80083c6:	6060      	str	r0, [r4, #4]
 80083c8:	4620      	mov	r0, r4
 80083ca:	f000 f81b 	bl	8008404 <__sfp>
 80083ce:	60a0      	str	r0, [r4, #8]
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 f817 	bl	8008404 <__sfp>
 80083d6:	2200      	movs	r2, #0
 80083d8:	60e0      	str	r0, [r4, #12]
 80083da:	2104      	movs	r1, #4
 80083dc:	6860      	ldr	r0, [r4, #4]
 80083de:	f7ff ffa1 	bl	8008324 <std>
 80083e2:	2201      	movs	r2, #1
 80083e4:	2109      	movs	r1, #9
 80083e6:	68a0      	ldr	r0, [r4, #8]
 80083e8:	f7ff ff9c 	bl	8008324 <std>
 80083ec:	2202      	movs	r2, #2
 80083ee:	2112      	movs	r1, #18
 80083f0:	68e0      	ldr	r0, [r4, #12]
 80083f2:	f7ff ff97 	bl	8008324 <std>
 80083f6:	2301      	movs	r3, #1
 80083f8:	61a3      	str	r3, [r4, #24]
 80083fa:	bd10      	pop	{r4, pc}
 80083fc:	0800917c 	.word	0x0800917c
 8008400:	0800836d 	.word	0x0800836d

08008404 <__sfp>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	4b1b      	ldr	r3, [pc, #108]	; (8008474 <__sfp+0x70>)
 8008408:	681e      	ldr	r6, [r3, #0]
 800840a:	69b3      	ldr	r3, [r6, #24]
 800840c:	4607      	mov	r7, r0
 800840e:	b913      	cbnz	r3, 8008416 <__sfp+0x12>
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff ffc7 	bl	80083a4 <__sinit>
 8008416:	3648      	adds	r6, #72	; 0x48
 8008418:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800841c:	3b01      	subs	r3, #1
 800841e:	d503      	bpl.n	8008428 <__sfp+0x24>
 8008420:	6833      	ldr	r3, [r6, #0]
 8008422:	b133      	cbz	r3, 8008432 <__sfp+0x2e>
 8008424:	6836      	ldr	r6, [r6, #0]
 8008426:	e7f7      	b.n	8008418 <__sfp+0x14>
 8008428:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800842c:	b16d      	cbz	r5, 800844a <__sfp+0x46>
 800842e:	3468      	adds	r4, #104	; 0x68
 8008430:	e7f4      	b.n	800841c <__sfp+0x18>
 8008432:	2104      	movs	r1, #4
 8008434:	4638      	mov	r0, r7
 8008436:	f7ff ff9f 	bl	8008378 <__sfmoreglue>
 800843a:	6030      	str	r0, [r6, #0]
 800843c:	2800      	cmp	r0, #0
 800843e:	d1f1      	bne.n	8008424 <__sfp+0x20>
 8008440:	230c      	movs	r3, #12
 8008442:	603b      	str	r3, [r7, #0]
 8008444:	4604      	mov	r4, r0
 8008446:	4620      	mov	r0, r4
 8008448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800844a:	4b0b      	ldr	r3, [pc, #44]	; (8008478 <__sfp+0x74>)
 800844c:	6665      	str	r5, [r4, #100]	; 0x64
 800844e:	e9c4 5500 	strd	r5, r5, [r4]
 8008452:	60a5      	str	r5, [r4, #8]
 8008454:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008458:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800845c:	2208      	movs	r2, #8
 800845e:	4629      	mov	r1, r5
 8008460:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008464:	f7ff ff3e 	bl	80082e4 <memset>
 8008468:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800846c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008470:	e7e9      	b.n	8008446 <__sfp+0x42>
 8008472:	bf00      	nop
 8008474:	0800917c 	.word	0x0800917c
 8008478:	ffff0001 	.word	0xffff0001

0800847c <_fwalk_reent>:
 800847c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008480:	4680      	mov	r8, r0
 8008482:	4689      	mov	r9, r1
 8008484:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008488:	2600      	movs	r6, #0
 800848a:	b914      	cbnz	r4, 8008492 <_fwalk_reent+0x16>
 800848c:	4630      	mov	r0, r6
 800848e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008492:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008496:	3f01      	subs	r7, #1
 8008498:	d501      	bpl.n	800849e <_fwalk_reent+0x22>
 800849a:	6824      	ldr	r4, [r4, #0]
 800849c:	e7f5      	b.n	800848a <_fwalk_reent+0xe>
 800849e:	89ab      	ldrh	r3, [r5, #12]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d907      	bls.n	80084b4 <_fwalk_reent+0x38>
 80084a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084a8:	3301      	adds	r3, #1
 80084aa:	d003      	beq.n	80084b4 <_fwalk_reent+0x38>
 80084ac:	4629      	mov	r1, r5
 80084ae:	4640      	mov	r0, r8
 80084b0:	47c8      	blx	r9
 80084b2:	4306      	orrs	r6, r0
 80084b4:	3568      	adds	r5, #104	; 0x68
 80084b6:	e7ee      	b.n	8008496 <_fwalk_reent+0x1a>

080084b8 <_malloc_r>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	1ccd      	adds	r5, r1, #3
 80084bc:	f025 0503 	bic.w	r5, r5, #3
 80084c0:	3508      	adds	r5, #8
 80084c2:	2d0c      	cmp	r5, #12
 80084c4:	bf38      	it	cc
 80084c6:	250c      	movcc	r5, #12
 80084c8:	2d00      	cmp	r5, #0
 80084ca:	4606      	mov	r6, r0
 80084cc:	db01      	blt.n	80084d2 <_malloc_r+0x1a>
 80084ce:	42a9      	cmp	r1, r5
 80084d0:	d903      	bls.n	80084da <_malloc_r+0x22>
 80084d2:	230c      	movs	r3, #12
 80084d4:	6033      	str	r3, [r6, #0]
 80084d6:	2000      	movs	r0, #0
 80084d8:	bd70      	pop	{r4, r5, r6, pc}
 80084da:	f000 fd6b 	bl	8008fb4 <__malloc_lock>
 80084de:	4a21      	ldr	r2, [pc, #132]	; (8008564 <_malloc_r+0xac>)
 80084e0:	6814      	ldr	r4, [r2, #0]
 80084e2:	4621      	mov	r1, r4
 80084e4:	b991      	cbnz	r1, 800850c <_malloc_r+0x54>
 80084e6:	4c20      	ldr	r4, [pc, #128]	; (8008568 <_malloc_r+0xb0>)
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	b91b      	cbnz	r3, 80084f4 <_malloc_r+0x3c>
 80084ec:	4630      	mov	r0, r6
 80084ee:	f000 fb05 	bl	8008afc <_sbrk_r>
 80084f2:	6020      	str	r0, [r4, #0]
 80084f4:	4629      	mov	r1, r5
 80084f6:	4630      	mov	r0, r6
 80084f8:	f000 fb00 	bl	8008afc <_sbrk_r>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	d124      	bne.n	800854a <_malloc_r+0x92>
 8008500:	230c      	movs	r3, #12
 8008502:	6033      	str	r3, [r6, #0]
 8008504:	4630      	mov	r0, r6
 8008506:	f000 fd56 	bl	8008fb6 <__malloc_unlock>
 800850a:	e7e4      	b.n	80084d6 <_malloc_r+0x1e>
 800850c:	680b      	ldr	r3, [r1, #0]
 800850e:	1b5b      	subs	r3, r3, r5
 8008510:	d418      	bmi.n	8008544 <_malloc_r+0x8c>
 8008512:	2b0b      	cmp	r3, #11
 8008514:	d90f      	bls.n	8008536 <_malloc_r+0x7e>
 8008516:	600b      	str	r3, [r1, #0]
 8008518:	50cd      	str	r5, [r1, r3]
 800851a:	18cc      	adds	r4, r1, r3
 800851c:	4630      	mov	r0, r6
 800851e:	f000 fd4a 	bl	8008fb6 <__malloc_unlock>
 8008522:	f104 000b 	add.w	r0, r4, #11
 8008526:	1d23      	adds	r3, r4, #4
 8008528:	f020 0007 	bic.w	r0, r0, #7
 800852c:	1ac3      	subs	r3, r0, r3
 800852e:	d0d3      	beq.n	80084d8 <_malloc_r+0x20>
 8008530:	425a      	negs	r2, r3
 8008532:	50e2      	str	r2, [r4, r3]
 8008534:	e7d0      	b.n	80084d8 <_malloc_r+0x20>
 8008536:	428c      	cmp	r4, r1
 8008538:	684b      	ldr	r3, [r1, #4]
 800853a:	bf16      	itet	ne
 800853c:	6063      	strne	r3, [r4, #4]
 800853e:	6013      	streq	r3, [r2, #0]
 8008540:	460c      	movne	r4, r1
 8008542:	e7eb      	b.n	800851c <_malloc_r+0x64>
 8008544:	460c      	mov	r4, r1
 8008546:	6849      	ldr	r1, [r1, #4]
 8008548:	e7cc      	b.n	80084e4 <_malloc_r+0x2c>
 800854a:	1cc4      	adds	r4, r0, #3
 800854c:	f024 0403 	bic.w	r4, r4, #3
 8008550:	42a0      	cmp	r0, r4
 8008552:	d005      	beq.n	8008560 <_malloc_r+0xa8>
 8008554:	1a21      	subs	r1, r4, r0
 8008556:	4630      	mov	r0, r6
 8008558:	f000 fad0 	bl	8008afc <_sbrk_r>
 800855c:	3001      	adds	r0, #1
 800855e:	d0cf      	beq.n	8008500 <_malloc_r+0x48>
 8008560:	6025      	str	r5, [r4, #0]
 8008562:	e7db      	b.n	800851c <_malloc_r+0x64>
 8008564:	20000094 	.word	0x20000094
 8008568:	20000098 	.word	0x20000098

0800856c <__sfputc_r>:
 800856c:	6893      	ldr	r3, [r2, #8]
 800856e:	3b01      	subs	r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	b410      	push	{r4}
 8008574:	6093      	str	r3, [r2, #8]
 8008576:	da08      	bge.n	800858a <__sfputc_r+0x1e>
 8008578:	6994      	ldr	r4, [r2, #24]
 800857a:	42a3      	cmp	r3, r4
 800857c:	db01      	blt.n	8008582 <__sfputc_r+0x16>
 800857e:	290a      	cmp	r1, #10
 8008580:	d103      	bne.n	800858a <__sfputc_r+0x1e>
 8008582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008586:	f000 bb0d 	b.w	8008ba4 <__swbuf_r>
 800858a:	6813      	ldr	r3, [r2, #0]
 800858c:	1c58      	adds	r0, r3, #1
 800858e:	6010      	str	r0, [r2, #0]
 8008590:	7019      	strb	r1, [r3, #0]
 8008592:	4608      	mov	r0, r1
 8008594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008598:	4770      	bx	lr

0800859a <__sfputs_r>:
 800859a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859c:	4606      	mov	r6, r0
 800859e:	460f      	mov	r7, r1
 80085a0:	4614      	mov	r4, r2
 80085a2:	18d5      	adds	r5, r2, r3
 80085a4:	42ac      	cmp	r4, r5
 80085a6:	d101      	bne.n	80085ac <__sfputs_r+0x12>
 80085a8:	2000      	movs	r0, #0
 80085aa:	e007      	b.n	80085bc <__sfputs_r+0x22>
 80085ac:	463a      	mov	r2, r7
 80085ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085b2:	4630      	mov	r0, r6
 80085b4:	f7ff ffda 	bl	800856c <__sfputc_r>
 80085b8:	1c43      	adds	r3, r0, #1
 80085ba:	d1f3      	bne.n	80085a4 <__sfputs_r+0xa>
 80085bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085c0 <_vfiprintf_r>:
 80085c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c4:	460c      	mov	r4, r1
 80085c6:	b09d      	sub	sp, #116	; 0x74
 80085c8:	4617      	mov	r7, r2
 80085ca:	461d      	mov	r5, r3
 80085cc:	4606      	mov	r6, r0
 80085ce:	b118      	cbz	r0, 80085d8 <_vfiprintf_r+0x18>
 80085d0:	6983      	ldr	r3, [r0, #24]
 80085d2:	b90b      	cbnz	r3, 80085d8 <_vfiprintf_r+0x18>
 80085d4:	f7ff fee6 	bl	80083a4 <__sinit>
 80085d8:	4b7c      	ldr	r3, [pc, #496]	; (80087cc <_vfiprintf_r+0x20c>)
 80085da:	429c      	cmp	r4, r3
 80085dc:	d158      	bne.n	8008690 <_vfiprintf_r+0xd0>
 80085de:	6874      	ldr	r4, [r6, #4]
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	0718      	lsls	r0, r3, #28
 80085e4:	d55e      	bpl.n	80086a4 <_vfiprintf_r+0xe4>
 80085e6:	6923      	ldr	r3, [r4, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d05b      	beq.n	80086a4 <_vfiprintf_r+0xe4>
 80085ec:	2300      	movs	r3, #0
 80085ee:	9309      	str	r3, [sp, #36]	; 0x24
 80085f0:	2320      	movs	r3, #32
 80085f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085f6:	2330      	movs	r3, #48	; 0x30
 80085f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085fc:	9503      	str	r5, [sp, #12]
 80085fe:	f04f 0b01 	mov.w	fp, #1
 8008602:	46b8      	mov	r8, r7
 8008604:	4645      	mov	r5, r8
 8008606:	f815 3b01 	ldrb.w	r3, [r5], #1
 800860a:	b10b      	cbz	r3, 8008610 <_vfiprintf_r+0x50>
 800860c:	2b25      	cmp	r3, #37	; 0x25
 800860e:	d154      	bne.n	80086ba <_vfiprintf_r+0xfa>
 8008610:	ebb8 0a07 	subs.w	sl, r8, r7
 8008614:	d00b      	beq.n	800862e <_vfiprintf_r+0x6e>
 8008616:	4653      	mov	r3, sl
 8008618:	463a      	mov	r2, r7
 800861a:	4621      	mov	r1, r4
 800861c:	4630      	mov	r0, r6
 800861e:	f7ff ffbc 	bl	800859a <__sfputs_r>
 8008622:	3001      	adds	r0, #1
 8008624:	f000 80c2 	beq.w	80087ac <_vfiprintf_r+0x1ec>
 8008628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862a:	4453      	add	r3, sl
 800862c:	9309      	str	r3, [sp, #36]	; 0x24
 800862e:	f898 3000 	ldrb.w	r3, [r8]
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 80ba 	beq.w	80087ac <_vfiprintf_r+0x1ec>
 8008638:	2300      	movs	r3, #0
 800863a:	f04f 32ff 	mov.w	r2, #4294967295
 800863e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008642:	9304      	str	r3, [sp, #16]
 8008644:	9307      	str	r3, [sp, #28]
 8008646:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800864a:	931a      	str	r3, [sp, #104]	; 0x68
 800864c:	46a8      	mov	r8, r5
 800864e:	2205      	movs	r2, #5
 8008650:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008654:	485e      	ldr	r0, [pc, #376]	; (80087d0 <_vfiprintf_r+0x210>)
 8008656:	f7f7 fdd3 	bl	8000200 <memchr>
 800865a:	9b04      	ldr	r3, [sp, #16]
 800865c:	bb78      	cbnz	r0, 80086be <_vfiprintf_r+0xfe>
 800865e:	06d9      	lsls	r1, r3, #27
 8008660:	bf44      	itt	mi
 8008662:	2220      	movmi	r2, #32
 8008664:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008668:	071a      	lsls	r2, r3, #28
 800866a:	bf44      	itt	mi
 800866c:	222b      	movmi	r2, #43	; 0x2b
 800866e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008672:	782a      	ldrb	r2, [r5, #0]
 8008674:	2a2a      	cmp	r2, #42	; 0x2a
 8008676:	d02a      	beq.n	80086ce <_vfiprintf_r+0x10e>
 8008678:	9a07      	ldr	r2, [sp, #28]
 800867a:	46a8      	mov	r8, r5
 800867c:	2000      	movs	r0, #0
 800867e:	250a      	movs	r5, #10
 8008680:	4641      	mov	r1, r8
 8008682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008686:	3b30      	subs	r3, #48	; 0x30
 8008688:	2b09      	cmp	r3, #9
 800868a:	d969      	bls.n	8008760 <_vfiprintf_r+0x1a0>
 800868c:	b360      	cbz	r0, 80086e8 <_vfiprintf_r+0x128>
 800868e:	e024      	b.n	80086da <_vfiprintf_r+0x11a>
 8008690:	4b50      	ldr	r3, [pc, #320]	; (80087d4 <_vfiprintf_r+0x214>)
 8008692:	429c      	cmp	r4, r3
 8008694:	d101      	bne.n	800869a <_vfiprintf_r+0xda>
 8008696:	68b4      	ldr	r4, [r6, #8]
 8008698:	e7a2      	b.n	80085e0 <_vfiprintf_r+0x20>
 800869a:	4b4f      	ldr	r3, [pc, #316]	; (80087d8 <_vfiprintf_r+0x218>)
 800869c:	429c      	cmp	r4, r3
 800869e:	bf08      	it	eq
 80086a0:	68f4      	ldreq	r4, [r6, #12]
 80086a2:	e79d      	b.n	80085e0 <_vfiprintf_r+0x20>
 80086a4:	4621      	mov	r1, r4
 80086a6:	4630      	mov	r0, r6
 80086a8:	f000 fae0 	bl	8008c6c <__swsetup_r>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	d09d      	beq.n	80085ec <_vfiprintf_r+0x2c>
 80086b0:	f04f 30ff 	mov.w	r0, #4294967295
 80086b4:	b01d      	add	sp, #116	; 0x74
 80086b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ba:	46a8      	mov	r8, r5
 80086bc:	e7a2      	b.n	8008604 <_vfiprintf_r+0x44>
 80086be:	4a44      	ldr	r2, [pc, #272]	; (80087d0 <_vfiprintf_r+0x210>)
 80086c0:	1a80      	subs	r0, r0, r2
 80086c2:	fa0b f000 	lsl.w	r0, fp, r0
 80086c6:	4318      	orrs	r0, r3
 80086c8:	9004      	str	r0, [sp, #16]
 80086ca:	4645      	mov	r5, r8
 80086cc:	e7be      	b.n	800864c <_vfiprintf_r+0x8c>
 80086ce:	9a03      	ldr	r2, [sp, #12]
 80086d0:	1d11      	adds	r1, r2, #4
 80086d2:	6812      	ldr	r2, [r2, #0]
 80086d4:	9103      	str	r1, [sp, #12]
 80086d6:	2a00      	cmp	r2, #0
 80086d8:	db01      	blt.n	80086de <_vfiprintf_r+0x11e>
 80086da:	9207      	str	r2, [sp, #28]
 80086dc:	e004      	b.n	80086e8 <_vfiprintf_r+0x128>
 80086de:	4252      	negs	r2, r2
 80086e0:	f043 0302 	orr.w	r3, r3, #2
 80086e4:	9207      	str	r2, [sp, #28]
 80086e6:	9304      	str	r3, [sp, #16]
 80086e8:	f898 3000 	ldrb.w	r3, [r8]
 80086ec:	2b2e      	cmp	r3, #46	; 0x2e
 80086ee:	d10e      	bne.n	800870e <_vfiprintf_r+0x14e>
 80086f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80086f4:	2b2a      	cmp	r3, #42	; 0x2a
 80086f6:	d138      	bne.n	800876a <_vfiprintf_r+0x1aa>
 80086f8:	9b03      	ldr	r3, [sp, #12]
 80086fa:	1d1a      	adds	r2, r3, #4
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	9203      	str	r2, [sp, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	bfb8      	it	lt
 8008704:	f04f 33ff 	movlt.w	r3, #4294967295
 8008708:	f108 0802 	add.w	r8, r8, #2
 800870c:	9305      	str	r3, [sp, #20]
 800870e:	4d33      	ldr	r5, [pc, #204]	; (80087dc <_vfiprintf_r+0x21c>)
 8008710:	f898 1000 	ldrb.w	r1, [r8]
 8008714:	2203      	movs	r2, #3
 8008716:	4628      	mov	r0, r5
 8008718:	f7f7 fd72 	bl	8000200 <memchr>
 800871c:	b140      	cbz	r0, 8008730 <_vfiprintf_r+0x170>
 800871e:	2340      	movs	r3, #64	; 0x40
 8008720:	1b40      	subs	r0, r0, r5
 8008722:	fa03 f000 	lsl.w	r0, r3, r0
 8008726:	9b04      	ldr	r3, [sp, #16]
 8008728:	4303      	orrs	r3, r0
 800872a:	f108 0801 	add.w	r8, r8, #1
 800872e:	9304      	str	r3, [sp, #16]
 8008730:	f898 1000 	ldrb.w	r1, [r8]
 8008734:	482a      	ldr	r0, [pc, #168]	; (80087e0 <_vfiprintf_r+0x220>)
 8008736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800873a:	2206      	movs	r2, #6
 800873c:	f108 0701 	add.w	r7, r8, #1
 8008740:	f7f7 fd5e 	bl	8000200 <memchr>
 8008744:	2800      	cmp	r0, #0
 8008746:	d037      	beq.n	80087b8 <_vfiprintf_r+0x1f8>
 8008748:	4b26      	ldr	r3, [pc, #152]	; (80087e4 <_vfiprintf_r+0x224>)
 800874a:	bb1b      	cbnz	r3, 8008794 <_vfiprintf_r+0x1d4>
 800874c:	9b03      	ldr	r3, [sp, #12]
 800874e:	3307      	adds	r3, #7
 8008750:	f023 0307 	bic.w	r3, r3, #7
 8008754:	3308      	adds	r3, #8
 8008756:	9303      	str	r3, [sp, #12]
 8008758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875a:	444b      	add	r3, r9
 800875c:	9309      	str	r3, [sp, #36]	; 0x24
 800875e:	e750      	b.n	8008602 <_vfiprintf_r+0x42>
 8008760:	fb05 3202 	mla	r2, r5, r2, r3
 8008764:	2001      	movs	r0, #1
 8008766:	4688      	mov	r8, r1
 8008768:	e78a      	b.n	8008680 <_vfiprintf_r+0xc0>
 800876a:	2300      	movs	r3, #0
 800876c:	f108 0801 	add.w	r8, r8, #1
 8008770:	9305      	str	r3, [sp, #20]
 8008772:	4619      	mov	r1, r3
 8008774:	250a      	movs	r5, #10
 8008776:	4640      	mov	r0, r8
 8008778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800877c:	3a30      	subs	r2, #48	; 0x30
 800877e:	2a09      	cmp	r2, #9
 8008780:	d903      	bls.n	800878a <_vfiprintf_r+0x1ca>
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0c3      	beq.n	800870e <_vfiprintf_r+0x14e>
 8008786:	9105      	str	r1, [sp, #20]
 8008788:	e7c1      	b.n	800870e <_vfiprintf_r+0x14e>
 800878a:	fb05 2101 	mla	r1, r5, r1, r2
 800878e:	2301      	movs	r3, #1
 8008790:	4680      	mov	r8, r0
 8008792:	e7f0      	b.n	8008776 <_vfiprintf_r+0x1b6>
 8008794:	ab03      	add	r3, sp, #12
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	4622      	mov	r2, r4
 800879a:	4b13      	ldr	r3, [pc, #76]	; (80087e8 <_vfiprintf_r+0x228>)
 800879c:	a904      	add	r1, sp, #16
 800879e:	4630      	mov	r0, r6
 80087a0:	f3af 8000 	nop.w
 80087a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80087a8:	4681      	mov	r9, r0
 80087aa:	d1d5      	bne.n	8008758 <_vfiprintf_r+0x198>
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	065b      	lsls	r3, r3, #25
 80087b0:	f53f af7e 	bmi.w	80086b0 <_vfiprintf_r+0xf0>
 80087b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087b6:	e77d      	b.n	80086b4 <_vfiprintf_r+0xf4>
 80087b8:	ab03      	add	r3, sp, #12
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	4622      	mov	r2, r4
 80087be:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <_vfiprintf_r+0x228>)
 80087c0:	a904      	add	r1, sp, #16
 80087c2:	4630      	mov	r0, r6
 80087c4:	f000 f888 	bl	80088d8 <_printf_i>
 80087c8:	e7ec      	b.n	80087a4 <_vfiprintf_r+0x1e4>
 80087ca:	bf00      	nop
 80087cc:	080091a0 	.word	0x080091a0
 80087d0:	080091e0 	.word	0x080091e0
 80087d4:	080091c0 	.word	0x080091c0
 80087d8:	08009180 	.word	0x08009180
 80087dc:	080091e6 	.word	0x080091e6
 80087e0:	080091ea 	.word	0x080091ea
 80087e4:	00000000 	.word	0x00000000
 80087e8:	0800859b 	.word	0x0800859b

080087ec <_printf_common>:
 80087ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f0:	4691      	mov	r9, r2
 80087f2:	461f      	mov	r7, r3
 80087f4:	688a      	ldr	r2, [r1, #8]
 80087f6:	690b      	ldr	r3, [r1, #16]
 80087f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087fc:	4293      	cmp	r3, r2
 80087fe:	bfb8      	it	lt
 8008800:	4613      	movlt	r3, r2
 8008802:	f8c9 3000 	str.w	r3, [r9]
 8008806:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800880a:	4606      	mov	r6, r0
 800880c:	460c      	mov	r4, r1
 800880e:	b112      	cbz	r2, 8008816 <_printf_common+0x2a>
 8008810:	3301      	adds	r3, #1
 8008812:	f8c9 3000 	str.w	r3, [r9]
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	0699      	lsls	r1, r3, #26
 800881a:	bf42      	ittt	mi
 800881c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008820:	3302      	addmi	r3, #2
 8008822:	f8c9 3000 	strmi.w	r3, [r9]
 8008826:	6825      	ldr	r5, [r4, #0]
 8008828:	f015 0506 	ands.w	r5, r5, #6
 800882c:	d107      	bne.n	800883e <_printf_common+0x52>
 800882e:	f104 0a19 	add.w	sl, r4, #25
 8008832:	68e3      	ldr	r3, [r4, #12]
 8008834:	f8d9 2000 	ldr.w	r2, [r9]
 8008838:	1a9b      	subs	r3, r3, r2
 800883a:	42ab      	cmp	r3, r5
 800883c:	dc28      	bgt.n	8008890 <_printf_common+0xa4>
 800883e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008842:	6822      	ldr	r2, [r4, #0]
 8008844:	3300      	adds	r3, #0
 8008846:	bf18      	it	ne
 8008848:	2301      	movne	r3, #1
 800884a:	0692      	lsls	r2, r2, #26
 800884c:	d42d      	bmi.n	80088aa <_printf_common+0xbe>
 800884e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008852:	4639      	mov	r1, r7
 8008854:	4630      	mov	r0, r6
 8008856:	47c0      	blx	r8
 8008858:	3001      	adds	r0, #1
 800885a:	d020      	beq.n	800889e <_printf_common+0xb2>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	68e5      	ldr	r5, [r4, #12]
 8008860:	f8d9 2000 	ldr.w	r2, [r9]
 8008864:	f003 0306 	and.w	r3, r3, #6
 8008868:	2b04      	cmp	r3, #4
 800886a:	bf08      	it	eq
 800886c:	1aad      	subeq	r5, r5, r2
 800886e:	68a3      	ldr	r3, [r4, #8]
 8008870:	6922      	ldr	r2, [r4, #16]
 8008872:	bf0c      	ite	eq
 8008874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008878:	2500      	movne	r5, #0
 800887a:	4293      	cmp	r3, r2
 800887c:	bfc4      	itt	gt
 800887e:	1a9b      	subgt	r3, r3, r2
 8008880:	18ed      	addgt	r5, r5, r3
 8008882:	f04f 0900 	mov.w	r9, #0
 8008886:	341a      	adds	r4, #26
 8008888:	454d      	cmp	r5, r9
 800888a:	d11a      	bne.n	80088c2 <_printf_common+0xd6>
 800888c:	2000      	movs	r0, #0
 800888e:	e008      	b.n	80088a2 <_printf_common+0xb6>
 8008890:	2301      	movs	r3, #1
 8008892:	4652      	mov	r2, sl
 8008894:	4639      	mov	r1, r7
 8008896:	4630      	mov	r0, r6
 8008898:	47c0      	blx	r8
 800889a:	3001      	adds	r0, #1
 800889c:	d103      	bne.n	80088a6 <_printf_common+0xba>
 800889e:	f04f 30ff 	mov.w	r0, #4294967295
 80088a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a6:	3501      	adds	r5, #1
 80088a8:	e7c3      	b.n	8008832 <_printf_common+0x46>
 80088aa:	18e1      	adds	r1, r4, r3
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	2030      	movs	r0, #48	; 0x30
 80088b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088b4:	4422      	add	r2, r4
 80088b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088be:	3302      	adds	r3, #2
 80088c0:	e7c5      	b.n	800884e <_printf_common+0x62>
 80088c2:	2301      	movs	r3, #1
 80088c4:	4622      	mov	r2, r4
 80088c6:	4639      	mov	r1, r7
 80088c8:	4630      	mov	r0, r6
 80088ca:	47c0      	blx	r8
 80088cc:	3001      	adds	r0, #1
 80088ce:	d0e6      	beq.n	800889e <_printf_common+0xb2>
 80088d0:	f109 0901 	add.w	r9, r9, #1
 80088d4:	e7d8      	b.n	8008888 <_printf_common+0x9c>
	...

080088d8 <_printf_i>:
 80088d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80088e0:	460c      	mov	r4, r1
 80088e2:	7e09      	ldrb	r1, [r1, #24]
 80088e4:	b085      	sub	sp, #20
 80088e6:	296e      	cmp	r1, #110	; 0x6e
 80088e8:	4617      	mov	r7, r2
 80088ea:	4606      	mov	r6, r0
 80088ec:	4698      	mov	r8, r3
 80088ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088f0:	f000 80b3 	beq.w	8008a5a <_printf_i+0x182>
 80088f4:	d822      	bhi.n	800893c <_printf_i+0x64>
 80088f6:	2963      	cmp	r1, #99	; 0x63
 80088f8:	d036      	beq.n	8008968 <_printf_i+0x90>
 80088fa:	d80a      	bhi.n	8008912 <_printf_i+0x3a>
 80088fc:	2900      	cmp	r1, #0
 80088fe:	f000 80b9 	beq.w	8008a74 <_printf_i+0x19c>
 8008902:	2958      	cmp	r1, #88	; 0x58
 8008904:	f000 8083 	beq.w	8008a0e <_printf_i+0x136>
 8008908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800890c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008910:	e032      	b.n	8008978 <_printf_i+0xa0>
 8008912:	2964      	cmp	r1, #100	; 0x64
 8008914:	d001      	beq.n	800891a <_printf_i+0x42>
 8008916:	2969      	cmp	r1, #105	; 0x69
 8008918:	d1f6      	bne.n	8008908 <_printf_i+0x30>
 800891a:	6820      	ldr	r0, [r4, #0]
 800891c:	6813      	ldr	r3, [r2, #0]
 800891e:	0605      	lsls	r5, r0, #24
 8008920:	f103 0104 	add.w	r1, r3, #4
 8008924:	d52a      	bpl.n	800897c <_printf_i+0xa4>
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6011      	str	r1, [r2, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	da03      	bge.n	8008936 <_printf_i+0x5e>
 800892e:	222d      	movs	r2, #45	; 0x2d
 8008930:	425b      	negs	r3, r3
 8008932:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008936:	486f      	ldr	r0, [pc, #444]	; (8008af4 <_printf_i+0x21c>)
 8008938:	220a      	movs	r2, #10
 800893a:	e039      	b.n	80089b0 <_printf_i+0xd8>
 800893c:	2973      	cmp	r1, #115	; 0x73
 800893e:	f000 809d 	beq.w	8008a7c <_printf_i+0x1a4>
 8008942:	d808      	bhi.n	8008956 <_printf_i+0x7e>
 8008944:	296f      	cmp	r1, #111	; 0x6f
 8008946:	d020      	beq.n	800898a <_printf_i+0xb2>
 8008948:	2970      	cmp	r1, #112	; 0x70
 800894a:	d1dd      	bne.n	8008908 <_printf_i+0x30>
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	f043 0320 	orr.w	r3, r3, #32
 8008952:	6023      	str	r3, [r4, #0]
 8008954:	e003      	b.n	800895e <_printf_i+0x86>
 8008956:	2975      	cmp	r1, #117	; 0x75
 8008958:	d017      	beq.n	800898a <_printf_i+0xb2>
 800895a:	2978      	cmp	r1, #120	; 0x78
 800895c:	d1d4      	bne.n	8008908 <_printf_i+0x30>
 800895e:	2378      	movs	r3, #120	; 0x78
 8008960:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008964:	4864      	ldr	r0, [pc, #400]	; (8008af8 <_printf_i+0x220>)
 8008966:	e055      	b.n	8008a14 <_printf_i+0x13c>
 8008968:	6813      	ldr	r3, [r2, #0]
 800896a:	1d19      	adds	r1, r3, #4
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6011      	str	r1, [r2, #0]
 8008970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008978:	2301      	movs	r3, #1
 800897a:	e08c      	b.n	8008a96 <_printf_i+0x1be>
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	6011      	str	r1, [r2, #0]
 8008980:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008984:	bf18      	it	ne
 8008986:	b21b      	sxthne	r3, r3
 8008988:	e7cf      	b.n	800892a <_printf_i+0x52>
 800898a:	6813      	ldr	r3, [r2, #0]
 800898c:	6825      	ldr	r5, [r4, #0]
 800898e:	1d18      	adds	r0, r3, #4
 8008990:	6010      	str	r0, [r2, #0]
 8008992:	0628      	lsls	r0, r5, #24
 8008994:	d501      	bpl.n	800899a <_printf_i+0xc2>
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	e002      	b.n	80089a0 <_printf_i+0xc8>
 800899a:	0668      	lsls	r0, r5, #25
 800899c:	d5fb      	bpl.n	8008996 <_printf_i+0xbe>
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	4854      	ldr	r0, [pc, #336]	; (8008af4 <_printf_i+0x21c>)
 80089a2:	296f      	cmp	r1, #111	; 0x6f
 80089a4:	bf14      	ite	ne
 80089a6:	220a      	movne	r2, #10
 80089a8:	2208      	moveq	r2, #8
 80089aa:	2100      	movs	r1, #0
 80089ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089b0:	6865      	ldr	r5, [r4, #4]
 80089b2:	60a5      	str	r5, [r4, #8]
 80089b4:	2d00      	cmp	r5, #0
 80089b6:	f2c0 8095 	blt.w	8008ae4 <_printf_i+0x20c>
 80089ba:	6821      	ldr	r1, [r4, #0]
 80089bc:	f021 0104 	bic.w	r1, r1, #4
 80089c0:	6021      	str	r1, [r4, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d13d      	bne.n	8008a42 <_printf_i+0x16a>
 80089c6:	2d00      	cmp	r5, #0
 80089c8:	f040 808e 	bne.w	8008ae8 <_printf_i+0x210>
 80089cc:	4665      	mov	r5, ip
 80089ce:	2a08      	cmp	r2, #8
 80089d0:	d10b      	bne.n	80089ea <_printf_i+0x112>
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	07db      	lsls	r3, r3, #31
 80089d6:	d508      	bpl.n	80089ea <_printf_i+0x112>
 80089d8:	6923      	ldr	r3, [r4, #16]
 80089da:	6862      	ldr	r2, [r4, #4]
 80089dc:	429a      	cmp	r2, r3
 80089de:	bfde      	ittt	le
 80089e0:	2330      	movle	r3, #48	; 0x30
 80089e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089ea:	ebac 0305 	sub.w	r3, ip, r5
 80089ee:	6123      	str	r3, [r4, #16]
 80089f0:	f8cd 8000 	str.w	r8, [sp]
 80089f4:	463b      	mov	r3, r7
 80089f6:	aa03      	add	r2, sp, #12
 80089f8:	4621      	mov	r1, r4
 80089fa:	4630      	mov	r0, r6
 80089fc:	f7ff fef6 	bl	80087ec <_printf_common>
 8008a00:	3001      	adds	r0, #1
 8008a02:	d14d      	bne.n	8008aa0 <_printf_i+0x1c8>
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295
 8008a08:	b005      	add	sp, #20
 8008a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a0e:	4839      	ldr	r0, [pc, #228]	; (8008af4 <_printf_i+0x21c>)
 8008a10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008a14:	6813      	ldr	r3, [r2, #0]
 8008a16:	6821      	ldr	r1, [r4, #0]
 8008a18:	1d1d      	adds	r5, r3, #4
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6015      	str	r5, [r2, #0]
 8008a1e:	060a      	lsls	r2, r1, #24
 8008a20:	d50b      	bpl.n	8008a3a <_printf_i+0x162>
 8008a22:	07ca      	lsls	r2, r1, #31
 8008a24:	bf44      	itt	mi
 8008a26:	f041 0120 	orrmi.w	r1, r1, #32
 8008a2a:	6021      	strmi	r1, [r4, #0]
 8008a2c:	b91b      	cbnz	r3, 8008a36 <_printf_i+0x15e>
 8008a2e:	6822      	ldr	r2, [r4, #0]
 8008a30:	f022 0220 	bic.w	r2, r2, #32
 8008a34:	6022      	str	r2, [r4, #0]
 8008a36:	2210      	movs	r2, #16
 8008a38:	e7b7      	b.n	80089aa <_printf_i+0xd2>
 8008a3a:	064d      	lsls	r5, r1, #25
 8008a3c:	bf48      	it	mi
 8008a3e:	b29b      	uxthmi	r3, r3
 8008a40:	e7ef      	b.n	8008a22 <_printf_i+0x14a>
 8008a42:	4665      	mov	r5, ip
 8008a44:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a48:	fb02 3311 	mls	r3, r2, r1, r3
 8008a4c:	5cc3      	ldrb	r3, [r0, r3]
 8008a4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008a52:	460b      	mov	r3, r1
 8008a54:	2900      	cmp	r1, #0
 8008a56:	d1f5      	bne.n	8008a44 <_printf_i+0x16c>
 8008a58:	e7b9      	b.n	80089ce <_printf_i+0xf6>
 8008a5a:	6813      	ldr	r3, [r2, #0]
 8008a5c:	6825      	ldr	r5, [r4, #0]
 8008a5e:	6961      	ldr	r1, [r4, #20]
 8008a60:	1d18      	adds	r0, r3, #4
 8008a62:	6010      	str	r0, [r2, #0]
 8008a64:	0628      	lsls	r0, r5, #24
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	d501      	bpl.n	8008a6e <_printf_i+0x196>
 8008a6a:	6019      	str	r1, [r3, #0]
 8008a6c:	e002      	b.n	8008a74 <_printf_i+0x19c>
 8008a6e:	066a      	lsls	r2, r5, #25
 8008a70:	d5fb      	bpl.n	8008a6a <_printf_i+0x192>
 8008a72:	8019      	strh	r1, [r3, #0]
 8008a74:	2300      	movs	r3, #0
 8008a76:	6123      	str	r3, [r4, #16]
 8008a78:	4665      	mov	r5, ip
 8008a7a:	e7b9      	b.n	80089f0 <_printf_i+0x118>
 8008a7c:	6813      	ldr	r3, [r2, #0]
 8008a7e:	1d19      	adds	r1, r3, #4
 8008a80:	6011      	str	r1, [r2, #0]
 8008a82:	681d      	ldr	r5, [r3, #0]
 8008a84:	6862      	ldr	r2, [r4, #4]
 8008a86:	2100      	movs	r1, #0
 8008a88:	4628      	mov	r0, r5
 8008a8a:	f7f7 fbb9 	bl	8000200 <memchr>
 8008a8e:	b108      	cbz	r0, 8008a94 <_printf_i+0x1bc>
 8008a90:	1b40      	subs	r0, r0, r5
 8008a92:	6060      	str	r0, [r4, #4]
 8008a94:	6863      	ldr	r3, [r4, #4]
 8008a96:	6123      	str	r3, [r4, #16]
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a9e:	e7a7      	b.n	80089f0 <_printf_i+0x118>
 8008aa0:	6923      	ldr	r3, [r4, #16]
 8008aa2:	462a      	mov	r2, r5
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	47c0      	blx	r8
 8008aaa:	3001      	adds	r0, #1
 8008aac:	d0aa      	beq.n	8008a04 <_printf_i+0x12c>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	079b      	lsls	r3, r3, #30
 8008ab2:	d413      	bmi.n	8008adc <_printf_i+0x204>
 8008ab4:	68e0      	ldr	r0, [r4, #12]
 8008ab6:	9b03      	ldr	r3, [sp, #12]
 8008ab8:	4298      	cmp	r0, r3
 8008aba:	bfb8      	it	lt
 8008abc:	4618      	movlt	r0, r3
 8008abe:	e7a3      	b.n	8008a08 <_printf_i+0x130>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	464a      	mov	r2, r9
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	47c0      	blx	r8
 8008aca:	3001      	adds	r0, #1
 8008acc:	d09a      	beq.n	8008a04 <_printf_i+0x12c>
 8008ace:	3501      	adds	r5, #1
 8008ad0:	68e3      	ldr	r3, [r4, #12]
 8008ad2:	9a03      	ldr	r2, [sp, #12]
 8008ad4:	1a9b      	subs	r3, r3, r2
 8008ad6:	42ab      	cmp	r3, r5
 8008ad8:	dcf2      	bgt.n	8008ac0 <_printf_i+0x1e8>
 8008ada:	e7eb      	b.n	8008ab4 <_printf_i+0x1dc>
 8008adc:	2500      	movs	r5, #0
 8008ade:	f104 0919 	add.w	r9, r4, #25
 8008ae2:	e7f5      	b.n	8008ad0 <_printf_i+0x1f8>
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1ac      	bne.n	8008a42 <_printf_i+0x16a>
 8008ae8:	7803      	ldrb	r3, [r0, #0]
 8008aea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008aee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008af2:	e76c      	b.n	80089ce <_printf_i+0xf6>
 8008af4:	080091f1 	.word	0x080091f1
 8008af8:	08009202 	.word	0x08009202

08008afc <_sbrk_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	4c06      	ldr	r4, [pc, #24]	; (8008b18 <_sbrk_r+0x1c>)
 8008b00:	2300      	movs	r3, #0
 8008b02:	4605      	mov	r5, r0
 8008b04:	4608      	mov	r0, r1
 8008b06:	6023      	str	r3, [r4, #0]
 8008b08:	f7f9 f85c 	bl	8001bc4 <_sbrk>
 8008b0c:	1c43      	adds	r3, r0, #1
 8008b0e:	d102      	bne.n	8008b16 <_sbrk_r+0x1a>
 8008b10:	6823      	ldr	r3, [r4, #0]
 8008b12:	b103      	cbz	r3, 8008b16 <_sbrk_r+0x1a>
 8008b14:	602b      	str	r3, [r5, #0]
 8008b16:	bd38      	pop	{r3, r4, r5, pc}
 8008b18:	20000244 	.word	0x20000244

08008b1c <__sread>:
 8008b1c:	b510      	push	{r4, lr}
 8008b1e:	460c      	mov	r4, r1
 8008b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b24:	f000 fa96 	bl	8009054 <_read_r>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	bfab      	itete	ge
 8008b2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b30:	181b      	addge	r3, r3, r0
 8008b32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b36:	bfac      	ite	ge
 8008b38:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b3a:	81a3      	strhlt	r3, [r4, #12]
 8008b3c:	bd10      	pop	{r4, pc}

08008b3e <__swrite>:
 8008b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b42:	461f      	mov	r7, r3
 8008b44:	898b      	ldrh	r3, [r1, #12]
 8008b46:	05db      	lsls	r3, r3, #23
 8008b48:	4605      	mov	r5, r0
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	4616      	mov	r6, r2
 8008b4e:	d505      	bpl.n	8008b5c <__swrite+0x1e>
 8008b50:	2302      	movs	r3, #2
 8008b52:	2200      	movs	r2, #0
 8008b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b58:	f000 f9b6 	bl	8008ec8 <_lseek_r>
 8008b5c:	89a3      	ldrh	r3, [r4, #12]
 8008b5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b66:	81a3      	strh	r3, [r4, #12]
 8008b68:	4632      	mov	r2, r6
 8008b6a:	463b      	mov	r3, r7
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b72:	f000 b869 	b.w	8008c48 <_write_r>

08008b76 <__sseek>:
 8008b76:	b510      	push	{r4, lr}
 8008b78:	460c      	mov	r4, r1
 8008b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b7e:	f000 f9a3 	bl	8008ec8 <_lseek_r>
 8008b82:	1c43      	adds	r3, r0, #1
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	bf15      	itete	ne
 8008b88:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b92:	81a3      	strheq	r3, [r4, #12]
 8008b94:	bf18      	it	ne
 8008b96:	81a3      	strhne	r3, [r4, #12]
 8008b98:	bd10      	pop	{r4, pc}

08008b9a <__sclose>:
 8008b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b9e:	f000 b8d3 	b.w	8008d48 <_close_r>
	...

08008ba4 <__swbuf_r>:
 8008ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba6:	460e      	mov	r6, r1
 8008ba8:	4614      	mov	r4, r2
 8008baa:	4605      	mov	r5, r0
 8008bac:	b118      	cbz	r0, 8008bb6 <__swbuf_r+0x12>
 8008bae:	6983      	ldr	r3, [r0, #24]
 8008bb0:	b90b      	cbnz	r3, 8008bb6 <__swbuf_r+0x12>
 8008bb2:	f7ff fbf7 	bl	80083a4 <__sinit>
 8008bb6:	4b21      	ldr	r3, [pc, #132]	; (8008c3c <__swbuf_r+0x98>)
 8008bb8:	429c      	cmp	r4, r3
 8008bba:	d12a      	bne.n	8008c12 <__swbuf_r+0x6e>
 8008bbc:	686c      	ldr	r4, [r5, #4]
 8008bbe:	69a3      	ldr	r3, [r4, #24]
 8008bc0:	60a3      	str	r3, [r4, #8]
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	071a      	lsls	r2, r3, #28
 8008bc6:	d52e      	bpl.n	8008c26 <__swbuf_r+0x82>
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	b363      	cbz	r3, 8008c26 <__swbuf_r+0x82>
 8008bcc:	6923      	ldr	r3, [r4, #16]
 8008bce:	6820      	ldr	r0, [r4, #0]
 8008bd0:	1ac0      	subs	r0, r0, r3
 8008bd2:	6963      	ldr	r3, [r4, #20]
 8008bd4:	b2f6      	uxtb	r6, r6
 8008bd6:	4283      	cmp	r3, r0
 8008bd8:	4637      	mov	r7, r6
 8008bda:	dc04      	bgt.n	8008be6 <__swbuf_r+0x42>
 8008bdc:	4621      	mov	r1, r4
 8008bde:	4628      	mov	r0, r5
 8008be0:	f000 f948 	bl	8008e74 <_fflush_r>
 8008be4:	bb28      	cbnz	r0, 8008c32 <__swbuf_r+0x8e>
 8008be6:	68a3      	ldr	r3, [r4, #8]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	60a3      	str	r3, [r4, #8]
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	1c5a      	adds	r2, r3, #1
 8008bf0:	6022      	str	r2, [r4, #0]
 8008bf2:	701e      	strb	r6, [r3, #0]
 8008bf4:	6963      	ldr	r3, [r4, #20]
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	4283      	cmp	r3, r0
 8008bfa:	d004      	beq.n	8008c06 <__swbuf_r+0x62>
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	07db      	lsls	r3, r3, #31
 8008c00:	d519      	bpl.n	8008c36 <__swbuf_r+0x92>
 8008c02:	2e0a      	cmp	r6, #10
 8008c04:	d117      	bne.n	8008c36 <__swbuf_r+0x92>
 8008c06:	4621      	mov	r1, r4
 8008c08:	4628      	mov	r0, r5
 8008c0a:	f000 f933 	bl	8008e74 <_fflush_r>
 8008c0e:	b190      	cbz	r0, 8008c36 <__swbuf_r+0x92>
 8008c10:	e00f      	b.n	8008c32 <__swbuf_r+0x8e>
 8008c12:	4b0b      	ldr	r3, [pc, #44]	; (8008c40 <__swbuf_r+0x9c>)
 8008c14:	429c      	cmp	r4, r3
 8008c16:	d101      	bne.n	8008c1c <__swbuf_r+0x78>
 8008c18:	68ac      	ldr	r4, [r5, #8]
 8008c1a:	e7d0      	b.n	8008bbe <__swbuf_r+0x1a>
 8008c1c:	4b09      	ldr	r3, [pc, #36]	; (8008c44 <__swbuf_r+0xa0>)
 8008c1e:	429c      	cmp	r4, r3
 8008c20:	bf08      	it	eq
 8008c22:	68ec      	ldreq	r4, [r5, #12]
 8008c24:	e7cb      	b.n	8008bbe <__swbuf_r+0x1a>
 8008c26:	4621      	mov	r1, r4
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f000 f81f 	bl	8008c6c <__swsetup_r>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d0cc      	beq.n	8008bcc <__swbuf_r+0x28>
 8008c32:	f04f 37ff 	mov.w	r7, #4294967295
 8008c36:	4638      	mov	r0, r7
 8008c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	080091a0 	.word	0x080091a0
 8008c40:	080091c0 	.word	0x080091c0
 8008c44:	08009180 	.word	0x08009180

08008c48 <_write_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4c07      	ldr	r4, [pc, #28]	; (8008c68 <_write_r+0x20>)
 8008c4c:	4605      	mov	r5, r0
 8008c4e:	4608      	mov	r0, r1
 8008c50:	4611      	mov	r1, r2
 8008c52:	2200      	movs	r2, #0
 8008c54:	6022      	str	r2, [r4, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	f7f8 ff63 	bl	8001b22 <_write>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d102      	bne.n	8008c66 <_write_r+0x1e>
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	b103      	cbz	r3, 8008c66 <_write_r+0x1e>
 8008c64:	602b      	str	r3, [r5, #0]
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	20000244 	.word	0x20000244

08008c6c <__swsetup_r>:
 8008c6c:	4b32      	ldr	r3, [pc, #200]	; (8008d38 <__swsetup_r+0xcc>)
 8008c6e:	b570      	push	{r4, r5, r6, lr}
 8008c70:	681d      	ldr	r5, [r3, #0]
 8008c72:	4606      	mov	r6, r0
 8008c74:	460c      	mov	r4, r1
 8008c76:	b125      	cbz	r5, 8008c82 <__swsetup_r+0x16>
 8008c78:	69ab      	ldr	r3, [r5, #24]
 8008c7a:	b913      	cbnz	r3, 8008c82 <__swsetup_r+0x16>
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	f7ff fb91 	bl	80083a4 <__sinit>
 8008c82:	4b2e      	ldr	r3, [pc, #184]	; (8008d3c <__swsetup_r+0xd0>)
 8008c84:	429c      	cmp	r4, r3
 8008c86:	d10f      	bne.n	8008ca8 <__swsetup_r+0x3c>
 8008c88:	686c      	ldr	r4, [r5, #4]
 8008c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	0715      	lsls	r5, r2, #28
 8008c92:	d42c      	bmi.n	8008cee <__swsetup_r+0x82>
 8008c94:	06d0      	lsls	r0, r2, #27
 8008c96:	d411      	bmi.n	8008cbc <__swsetup_r+0x50>
 8008c98:	2209      	movs	r2, #9
 8008c9a:	6032      	str	r2, [r6, #0]
 8008c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ca0:	81a3      	strh	r3, [r4, #12]
 8008ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca6:	e03e      	b.n	8008d26 <__swsetup_r+0xba>
 8008ca8:	4b25      	ldr	r3, [pc, #148]	; (8008d40 <__swsetup_r+0xd4>)
 8008caa:	429c      	cmp	r4, r3
 8008cac:	d101      	bne.n	8008cb2 <__swsetup_r+0x46>
 8008cae:	68ac      	ldr	r4, [r5, #8]
 8008cb0:	e7eb      	b.n	8008c8a <__swsetup_r+0x1e>
 8008cb2:	4b24      	ldr	r3, [pc, #144]	; (8008d44 <__swsetup_r+0xd8>)
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	bf08      	it	eq
 8008cb8:	68ec      	ldreq	r4, [r5, #12]
 8008cba:	e7e6      	b.n	8008c8a <__swsetup_r+0x1e>
 8008cbc:	0751      	lsls	r1, r2, #29
 8008cbe:	d512      	bpl.n	8008ce6 <__swsetup_r+0x7a>
 8008cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cc2:	b141      	cbz	r1, 8008cd6 <__swsetup_r+0x6a>
 8008cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cc8:	4299      	cmp	r1, r3
 8008cca:	d002      	beq.n	8008cd2 <__swsetup_r+0x66>
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f000 f973 	bl	8008fb8 <_free_r>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	6063      	str	r3, [r4, #4]
 8008ce2:	6923      	ldr	r3, [r4, #16]
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	f043 0308 	orr.w	r3, r3, #8
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	6923      	ldr	r3, [r4, #16]
 8008cf0:	b94b      	cbnz	r3, 8008d06 <__swsetup_r+0x9a>
 8008cf2:	89a3      	ldrh	r3, [r4, #12]
 8008cf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cfc:	d003      	beq.n	8008d06 <__swsetup_r+0x9a>
 8008cfe:	4621      	mov	r1, r4
 8008d00:	4630      	mov	r0, r6
 8008d02:	f000 f917 	bl	8008f34 <__smakebuf_r>
 8008d06:	89a2      	ldrh	r2, [r4, #12]
 8008d08:	f012 0301 	ands.w	r3, r2, #1
 8008d0c:	d00c      	beq.n	8008d28 <__swsetup_r+0xbc>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	60a3      	str	r3, [r4, #8]
 8008d12:	6963      	ldr	r3, [r4, #20]
 8008d14:	425b      	negs	r3, r3
 8008d16:	61a3      	str	r3, [r4, #24]
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	b953      	cbnz	r3, 8008d32 <__swsetup_r+0xc6>
 8008d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008d24:	d1ba      	bne.n	8008c9c <__swsetup_r+0x30>
 8008d26:	bd70      	pop	{r4, r5, r6, pc}
 8008d28:	0792      	lsls	r2, r2, #30
 8008d2a:	bf58      	it	pl
 8008d2c:	6963      	ldrpl	r3, [r4, #20]
 8008d2e:	60a3      	str	r3, [r4, #8]
 8008d30:	e7f2      	b.n	8008d18 <__swsetup_r+0xac>
 8008d32:	2000      	movs	r0, #0
 8008d34:	e7f7      	b.n	8008d26 <__swsetup_r+0xba>
 8008d36:	bf00      	nop
 8008d38:	2000000c 	.word	0x2000000c
 8008d3c:	080091a0 	.word	0x080091a0
 8008d40:	080091c0 	.word	0x080091c0
 8008d44:	08009180 	.word	0x08009180

08008d48 <_close_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4c06      	ldr	r4, [pc, #24]	; (8008d64 <_close_r+0x1c>)
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4605      	mov	r5, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	6023      	str	r3, [r4, #0]
 8008d54:	f7f8 ff01 	bl	8001b5a <_close>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_close_r+0x1a>
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_close_r+0x1a>
 8008d60:	602b      	str	r3, [r5, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	20000244 	.word	0x20000244

08008d68 <__sflush_r>:
 8008d68:	898a      	ldrh	r2, [r1, #12]
 8008d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6e:	4605      	mov	r5, r0
 8008d70:	0710      	lsls	r0, r2, #28
 8008d72:	460c      	mov	r4, r1
 8008d74:	d458      	bmi.n	8008e28 <__sflush_r+0xc0>
 8008d76:	684b      	ldr	r3, [r1, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	dc05      	bgt.n	8008d88 <__sflush_r+0x20>
 8008d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	dc02      	bgt.n	8008d88 <__sflush_r+0x20>
 8008d82:	2000      	movs	r0, #0
 8008d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d8a:	2e00      	cmp	r6, #0
 8008d8c:	d0f9      	beq.n	8008d82 <__sflush_r+0x1a>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d94:	682f      	ldr	r7, [r5, #0]
 8008d96:	6a21      	ldr	r1, [r4, #32]
 8008d98:	602b      	str	r3, [r5, #0]
 8008d9a:	d032      	beq.n	8008e02 <__sflush_r+0x9a>
 8008d9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d9e:	89a3      	ldrh	r3, [r4, #12]
 8008da0:	075a      	lsls	r2, r3, #29
 8008da2:	d505      	bpl.n	8008db0 <__sflush_r+0x48>
 8008da4:	6863      	ldr	r3, [r4, #4]
 8008da6:	1ac0      	subs	r0, r0, r3
 8008da8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008daa:	b10b      	cbz	r3, 8008db0 <__sflush_r+0x48>
 8008dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dae:	1ac0      	subs	r0, r0, r3
 8008db0:	2300      	movs	r3, #0
 8008db2:	4602      	mov	r2, r0
 8008db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008db6:	6a21      	ldr	r1, [r4, #32]
 8008db8:	4628      	mov	r0, r5
 8008dba:	47b0      	blx	r6
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	89a3      	ldrh	r3, [r4, #12]
 8008dc0:	d106      	bne.n	8008dd0 <__sflush_r+0x68>
 8008dc2:	6829      	ldr	r1, [r5, #0]
 8008dc4:	291d      	cmp	r1, #29
 8008dc6:	d848      	bhi.n	8008e5a <__sflush_r+0xf2>
 8008dc8:	4a29      	ldr	r2, [pc, #164]	; (8008e70 <__sflush_r+0x108>)
 8008dca:	40ca      	lsrs	r2, r1
 8008dcc:	07d6      	lsls	r6, r2, #31
 8008dce:	d544      	bpl.n	8008e5a <__sflush_r+0xf2>
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	6062      	str	r2, [r4, #4]
 8008dd4:	04d9      	lsls	r1, r3, #19
 8008dd6:	6922      	ldr	r2, [r4, #16]
 8008dd8:	6022      	str	r2, [r4, #0]
 8008dda:	d504      	bpl.n	8008de6 <__sflush_r+0x7e>
 8008ddc:	1c42      	adds	r2, r0, #1
 8008dde:	d101      	bne.n	8008de4 <__sflush_r+0x7c>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	b903      	cbnz	r3, 8008de6 <__sflush_r+0x7e>
 8008de4:	6560      	str	r0, [r4, #84]	; 0x54
 8008de6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008de8:	602f      	str	r7, [r5, #0]
 8008dea:	2900      	cmp	r1, #0
 8008dec:	d0c9      	beq.n	8008d82 <__sflush_r+0x1a>
 8008dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df2:	4299      	cmp	r1, r3
 8008df4:	d002      	beq.n	8008dfc <__sflush_r+0x94>
 8008df6:	4628      	mov	r0, r5
 8008df8:	f000 f8de 	bl	8008fb8 <_free_r>
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	6360      	str	r0, [r4, #52]	; 0x34
 8008e00:	e7c0      	b.n	8008d84 <__sflush_r+0x1c>
 8008e02:	2301      	movs	r3, #1
 8008e04:	4628      	mov	r0, r5
 8008e06:	47b0      	blx	r6
 8008e08:	1c41      	adds	r1, r0, #1
 8008e0a:	d1c8      	bne.n	8008d9e <__sflush_r+0x36>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d0c5      	beq.n	8008d9e <__sflush_r+0x36>
 8008e12:	2b1d      	cmp	r3, #29
 8008e14:	d001      	beq.n	8008e1a <__sflush_r+0xb2>
 8008e16:	2b16      	cmp	r3, #22
 8008e18:	d101      	bne.n	8008e1e <__sflush_r+0xb6>
 8008e1a:	602f      	str	r7, [r5, #0]
 8008e1c:	e7b1      	b.n	8008d82 <__sflush_r+0x1a>
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e24:	81a3      	strh	r3, [r4, #12]
 8008e26:	e7ad      	b.n	8008d84 <__sflush_r+0x1c>
 8008e28:	690f      	ldr	r7, [r1, #16]
 8008e2a:	2f00      	cmp	r7, #0
 8008e2c:	d0a9      	beq.n	8008d82 <__sflush_r+0x1a>
 8008e2e:	0793      	lsls	r3, r2, #30
 8008e30:	680e      	ldr	r6, [r1, #0]
 8008e32:	bf08      	it	eq
 8008e34:	694b      	ldreq	r3, [r1, #20]
 8008e36:	600f      	str	r7, [r1, #0]
 8008e38:	bf18      	it	ne
 8008e3a:	2300      	movne	r3, #0
 8008e3c:	eba6 0807 	sub.w	r8, r6, r7
 8008e40:	608b      	str	r3, [r1, #8]
 8008e42:	f1b8 0f00 	cmp.w	r8, #0
 8008e46:	dd9c      	ble.n	8008d82 <__sflush_r+0x1a>
 8008e48:	4643      	mov	r3, r8
 8008e4a:	463a      	mov	r2, r7
 8008e4c:	6a21      	ldr	r1, [r4, #32]
 8008e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e50:	4628      	mov	r0, r5
 8008e52:	47b0      	blx	r6
 8008e54:	2800      	cmp	r0, #0
 8008e56:	dc06      	bgt.n	8008e66 <__sflush_r+0xfe>
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e5e:	81a3      	strh	r3, [r4, #12]
 8008e60:	f04f 30ff 	mov.w	r0, #4294967295
 8008e64:	e78e      	b.n	8008d84 <__sflush_r+0x1c>
 8008e66:	4407      	add	r7, r0
 8008e68:	eba8 0800 	sub.w	r8, r8, r0
 8008e6c:	e7e9      	b.n	8008e42 <__sflush_r+0xda>
 8008e6e:	bf00      	nop
 8008e70:	20400001 	.word	0x20400001

08008e74 <_fflush_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	690b      	ldr	r3, [r1, #16]
 8008e78:	4605      	mov	r5, r0
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	b1db      	cbz	r3, 8008eb6 <_fflush_r+0x42>
 8008e7e:	b118      	cbz	r0, 8008e88 <_fflush_r+0x14>
 8008e80:	6983      	ldr	r3, [r0, #24]
 8008e82:	b90b      	cbnz	r3, 8008e88 <_fflush_r+0x14>
 8008e84:	f7ff fa8e 	bl	80083a4 <__sinit>
 8008e88:	4b0c      	ldr	r3, [pc, #48]	; (8008ebc <_fflush_r+0x48>)
 8008e8a:	429c      	cmp	r4, r3
 8008e8c:	d109      	bne.n	8008ea2 <_fflush_r+0x2e>
 8008e8e:	686c      	ldr	r4, [r5, #4]
 8008e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e94:	b17b      	cbz	r3, 8008eb6 <_fflush_r+0x42>
 8008e96:	4621      	mov	r1, r4
 8008e98:	4628      	mov	r0, r5
 8008e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e9e:	f7ff bf63 	b.w	8008d68 <__sflush_r>
 8008ea2:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <_fflush_r+0x4c>)
 8008ea4:	429c      	cmp	r4, r3
 8008ea6:	d101      	bne.n	8008eac <_fflush_r+0x38>
 8008ea8:	68ac      	ldr	r4, [r5, #8]
 8008eaa:	e7f1      	b.n	8008e90 <_fflush_r+0x1c>
 8008eac:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <_fflush_r+0x50>)
 8008eae:	429c      	cmp	r4, r3
 8008eb0:	bf08      	it	eq
 8008eb2:	68ec      	ldreq	r4, [r5, #12]
 8008eb4:	e7ec      	b.n	8008e90 <_fflush_r+0x1c>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	bd38      	pop	{r3, r4, r5, pc}
 8008eba:	bf00      	nop
 8008ebc:	080091a0 	.word	0x080091a0
 8008ec0:	080091c0 	.word	0x080091c0
 8008ec4:	08009180 	.word	0x08009180

08008ec8 <_lseek_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4c07      	ldr	r4, [pc, #28]	; (8008ee8 <_lseek_r+0x20>)
 8008ecc:	4605      	mov	r5, r0
 8008ece:	4608      	mov	r0, r1
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	6022      	str	r2, [r4, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f7f8 fe66 	bl	8001ba8 <_lseek>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	d102      	bne.n	8008ee6 <_lseek_r+0x1e>
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	b103      	cbz	r3, 8008ee6 <_lseek_r+0x1e>
 8008ee4:	602b      	str	r3, [r5, #0]
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
 8008ee8:	20000244 	.word	0x20000244

08008eec <__swhatbuf_r>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	460e      	mov	r6, r1
 8008ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef4:	2900      	cmp	r1, #0
 8008ef6:	b096      	sub	sp, #88	; 0x58
 8008ef8:	4614      	mov	r4, r2
 8008efa:	461d      	mov	r5, r3
 8008efc:	da07      	bge.n	8008f0e <__swhatbuf_r+0x22>
 8008efe:	2300      	movs	r3, #0
 8008f00:	602b      	str	r3, [r5, #0]
 8008f02:	89b3      	ldrh	r3, [r6, #12]
 8008f04:	061a      	lsls	r2, r3, #24
 8008f06:	d410      	bmi.n	8008f2a <__swhatbuf_r+0x3e>
 8008f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f0c:	e00e      	b.n	8008f2c <__swhatbuf_r+0x40>
 8008f0e:	466a      	mov	r2, sp
 8008f10:	f000 f8b2 	bl	8009078 <_fstat_r>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	dbf2      	blt.n	8008efe <__swhatbuf_r+0x12>
 8008f18:	9a01      	ldr	r2, [sp, #4]
 8008f1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f22:	425a      	negs	r2, r3
 8008f24:	415a      	adcs	r2, r3
 8008f26:	602a      	str	r2, [r5, #0]
 8008f28:	e7ee      	b.n	8008f08 <__swhatbuf_r+0x1c>
 8008f2a:	2340      	movs	r3, #64	; 0x40
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	6023      	str	r3, [r4, #0]
 8008f30:	b016      	add	sp, #88	; 0x58
 8008f32:	bd70      	pop	{r4, r5, r6, pc}

08008f34 <__smakebuf_r>:
 8008f34:	898b      	ldrh	r3, [r1, #12]
 8008f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f38:	079d      	lsls	r5, r3, #30
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	d507      	bpl.n	8008f50 <__smakebuf_r+0x1c>
 8008f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	6123      	str	r3, [r4, #16]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	6163      	str	r3, [r4, #20]
 8008f4c:	b002      	add	sp, #8
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	ab01      	add	r3, sp, #4
 8008f52:	466a      	mov	r2, sp
 8008f54:	f7ff ffca 	bl	8008eec <__swhatbuf_r>
 8008f58:	9900      	ldr	r1, [sp, #0]
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	f7ff faab 	bl	80084b8 <_malloc_r>
 8008f62:	b948      	cbnz	r0, 8008f78 <__smakebuf_r+0x44>
 8008f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f68:	059a      	lsls	r2, r3, #22
 8008f6a:	d4ef      	bmi.n	8008f4c <__smakebuf_r+0x18>
 8008f6c:	f023 0303 	bic.w	r3, r3, #3
 8008f70:	f043 0302 	orr.w	r3, r3, #2
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	e7e3      	b.n	8008f40 <__smakebuf_r+0xc>
 8008f78:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <__smakebuf_r+0x7c>)
 8008f7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	6020      	str	r0, [r4, #0]
 8008f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f84:	81a3      	strh	r3, [r4, #12]
 8008f86:	9b00      	ldr	r3, [sp, #0]
 8008f88:	6163      	str	r3, [r4, #20]
 8008f8a:	9b01      	ldr	r3, [sp, #4]
 8008f8c:	6120      	str	r0, [r4, #16]
 8008f8e:	b15b      	cbz	r3, 8008fa8 <__smakebuf_r+0x74>
 8008f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f94:	4630      	mov	r0, r6
 8008f96:	f000 f881 	bl	800909c <_isatty_r>
 8008f9a:	b128      	cbz	r0, 8008fa8 <__smakebuf_r+0x74>
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	f023 0303 	bic.w	r3, r3, #3
 8008fa2:	f043 0301 	orr.w	r3, r3, #1
 8008fa6:	81a3      	strh	r3, [r4, #12]
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	431d      	orrs	r5, r3
 8008fac:	81a5      	strh	r5, [r4, #12]
 8008fae:	e7cd      	b.n	8008f4c <__smakebuf_r+0x18>
 8008fb0:	0800836d 	.word	0x0800836d

08008fb4 <__malloc_lock>:
 8008fb4:	4770      	bx	lr

08008fb6 <__malloc_unlock>:
 8008fb6:	4770      	bx	lr

08008fb8 <_free_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4605      	mov	r5, r0
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	d045      	beq.n	800904c <_free_r+0x94>
 8008fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc4:	1f0c      	subs	r4, r1, #4
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	bfb8      	it	lt
 8008fca:	18e4      	addlt	r4, r4, r3
 8008fcc:	f7ff fff2 	bl	8008fb4 <__malloc_lock>
 8008fd0:	4a1f      	ldr	r2, [pc, #124]	; (8009050 <_free_r+0x98>)
 8008fd2:	6813      	ldr	r3, [r2, #0]
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	b933      	cbnz	r3, 8008fe6 <_free_r+0x2e>
 8008fd8:	6063      	str	r3, [r4, #4]
 8008fda:	6014      	str	r4, [r2, #0]
 8008fdc:	4628      	mov	r0, r5
 8008fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fe2:	f7ff bfe8 	b.w	8008fb6 <__malloc_unlock>
 8008fe6:	42a3      	cmp	r3, r4
 8008fe8:	d90c      	bls.n	8009004 <_free_r+0x4c>
 8008fea:	6821      	ldr	r1, [r4, #0]
 8008fec:	1862      	adds	r2, r4, r1
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	bf04      	itt	eq
 8008ff2:	681a      	ldreq	r2, [r3, #0]
 8008ff4:	685b      	ldreq	r3, [r3, #4]
 8008ff6:	6063      	str	r3, [r4, #4]
 8008ff8:	bf04      	itt	eq
 8008ffa:	1852      	addeq	r2, r2, r1
 8008ffc:	6022      	streq	r2, [r4, #0]
 8008ffe:	6004      	str	r4, [r0, #0]
 8009000:	e7ec      	b.n	8008fdc <_free_r+0x24>
 8009002:	4613      	mov	r3, r2
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	b10a      	cbz	r2, 800900c <_free_r+0x54>
 8009008:	42a2      	cmp	r2, r4
 800900a:	d9fa      	bls.n	8009002 <_free_r+0x4a>
 800900c:	6819      	ldr	r1, [r3, #0]
 800900e:	1858      	adds	r0, r3, r1
 8009010:	42a0      	cmp	r0, r4
 8009012:	d10b      	bne.n	800902c <_free_r+0x74>
 8009014:	6820      	ldr	r0, [r4, #0]
 8009016:	4401      	add	r1, r0
 8009018:	1858      	adds	r0, r3, r1
 800901a:	4282      	cmp	r2, r0
 800901c:	6019      	str	r1, [r3, #0]
 800901e:	d1dd      	bne.n	8008fdc <_free_r+0x24>
 8009020:	6810      	ldr	r0, [r2, #0]
 8009022:	6852      	ldr	r2, [r2, #4]
 8009024:	605a      	str	r2, [r3, #4]
 8009026:	4401      	add	r1, r0
 8009028:	6019      	str	r1, [r3, #0]
 800902a:	e7d7      	b.n	8008fdc <_free_r+0x24>
 800902c:	d902      	bls.n	8009034 <_free_r+0x7c>
 800902e:	230c      	movs	r3, #12
 8009030:	602b      	str	r3, [r5, #0]
 8009032:	e7d3      	b.n	8008fdc <_free_r+0x24>
 8009034:	6820      	ldr	r0, [r4, #0]
 8009036:	1821      	adds	r1, r4, r0
 8009038:	428a      	cmp	r2, r1
 800903a:	bf04      	itt	eq
 800903c:	6811      	ldreq	r1, [r2, #0]
 800903e:	6852      	ldreq	r2, [r2, #4]
 8009040:	6062      	str	r2, [r4, #4]
 8009042:	bf04      	itt	eq
 8009044:	1809      	addeq	r1, r1, r0
 8009046:	6021      	streq	r1, [r4, #0]
 8009048:	605c      	str	r4, [r3, #4]
 800904a:	e7c7      	b.n	8008fdc <_free_r+0x24>
 800904c:	bd38      	pop	{r3, r4, r5, pc}
 800904e:	bf00      	nop
 8009050:	20000094 	.word	0x20000094

08009054 <_read_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4c07      	ldr	r4, [pc, #28]	; (8009074 <_read_r+0x20>)
 8009058:	4605      	mov	r5, r0
 800905a:	4608      	mov	r0, r1
 800905c:	4611      	mov	r1, r2
 800905e:	2200      	movs	r2, #0
 8009060:	6022      	str	r2, [r4, #0]
 8009062:	461a      	mov	r2, r3
 8009064:	f7f8 fd40 	bl	8001ae8 <_read>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d102      	bne.n	8009072 <_read_r+0x1e>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	b103      	cbz	r3, 8009072 <_read_r+0x1e>
 8009070:	602b      	str	r3, [r5, #0]
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	20000244 	.word	0x20000244

08009078 <_fstat_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	4c07      	ldr	r4, [pc, #28]	; (8009098 <_fstat_r+0x20>)
 800907c:	2300      	movs	r3, #0
 800907e:	4605      	mov	r5, r0
 8009080:	4608      	mov	r0, r1
 8009082:	4611      	mov	r1, r2
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	f7f8 fd74 	bl	8001b72 <_fstat>
 800908a:	1c43      	adds	r3, r0, #1
 800908c:	d102      	bne.n	8009094 <_fstat_r+0x1c>
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	b103      	cbz	r3, 8009094 <_fstat_r+0x1c>
 8009092:	602b      	str	r3, [r5, #0]
 8009094:	bd38      	pop	{r3, r4, r5, pc}
 8009096:	bf00      	nop
 8009098:	20000244 	.word	0x20000244

0800909c <_isatty_r>:
 800909c:	b538      	push	{r3, r4, r5, lr}
 800909e:	4c06      	ldr	r4, [pc, #24]	; (80090b8 <_isatty_r+0x1c>)
 80090a0:	2300      	movs	r3, #0
 80090a2:	4605      	mov	r5, r0
 80090a4:	4608      	mov	r0, r1
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	f7f8 fd73 	bl	8001b92 <_isatty>
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	d102      	bne.n	80090b6 <_isatty_r+0x1a>
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	b103      	cbz	r3, 80090b6 <_isatty_r+0x1a>
 80090b4:	602b      	str	r3, [r5, #0]
 80090b6:	bd38      	pop	{r3, r4, r5, pc}
 80090b8:	20000244 	.word	0x20000244

080090bc <_init>:
 80090bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090be:	bf00      	nop
 80090c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c2:	bc08      	pop	{r3}
 80090c4:	469e      	mov	lr, r3
 80090c6:	4770      	bx	lr

080090c8 <_fini>:
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ca:	bf00      	nop
 80090cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ce:	bc08      	pop	{r3}
 80090d0:	469e      	mov	lr, r3
 80090d2:	4770      	bx	lr
