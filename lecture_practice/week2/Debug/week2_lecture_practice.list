
week2_lecture_practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080067b4  080067b4  000167b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d0  080068d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080068d0  080068d0  000168d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068d8  080068d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d8  080068d8  000168d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068dc  080068dc  000168dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080068e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  08006950  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08006950  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f273  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027d3  00000000  00000000  0003f313  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001888  00000000  00000000  00041ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001750  00000000  00000000  00043370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bd6e  00000000  00000000  00044ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e34b  00000000  00000000  0007082e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010ad39  00000000  00000000  0007eb79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001898b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f4c  00000000  00000000  00189930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800679c 	.word	0x0800679c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	0800679c 	.word	0x0800679c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <BSP_I2C2_Init+0x70>)
 80005ac:	4a19      	ldr	r2, [pc, #100]	; (8000614 <BSP_I2C2_Init+0x74>)
 80005ae:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <BSP_I2C2_Init+0x78>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	1c5a      	adds	r2, r3, #1
 80005b6:	4918      	ldr	r1, [pc, #96]	; (8000618 <BSP_I2C2_Init+0x78>)
 80005b8:	600a      	str	r2, [r1, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d122      	bne.n	8000604 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 80005be:	4814      	ldr	r0, [pc, #80]	; (8000610 <BSP_I2C2_Init+0x70>)
 80005c0:	f002 fb54 	bl	8002c6c <HAL_I2C_GetState>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d11c      	bne.n	8000604 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 80005ca:	4811      	ldr	r0, [pc, #68]	; (8000610 <BSP_I2C2_Init+0x70>)
 80005cc:	f000 f8fe 	bl	80007cc <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d116      	bne.n	8000604 <BSP_I2C2_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 80005d6:	480e      	ldr	r0, [pc, #56]	; (8000610 <BSP_I2C2_Init+0x70>)
 80005d8:	f000 f8b4 	bl	8000744 <MX_I2C2_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d003      	beq.n	80005ea <BSP_I2C2_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 80005e2:	f06f 0307 	mvn.w	r3, #7
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	e00c      	b.n	8000604 <BSP_I2C2_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ea:	2100      	movs	r1, #0
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <BSP_I2C2_Init+0x70>)
 80005ee:	f002 fd73 	bl	80030d8 <HAL_I2CEx_ConfigAnalogFilter>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d003      	beq.n	8000600 <BSP_I2C2_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 80005f8:	f06f 0307 	mvn.w	r3, #7
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	e001      	b.n	8000604 <BSP_I2C2_Init+0x64>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	2000009c 	.word	0x2000009c
 8000614:	40005800 	.word	0x40005800
 8000618:	2000008c 	.word	0x2000008c

0800061c <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <BSP_I2C2_DeInit+0x48>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d014      	beq.n	8000658 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <BSP_I2C2_DeInit+0x48>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3b01      	subs	r3, #1
 8000634:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <BSP_I2C2_DeInit+0x48>)
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <BSP_I2C2_DeInit+0x48>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d10b      	bne.n	8000658 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8000640:	4809      	ldr	r0, [pc, #36]	; (8000668 <BSP_I2C2_DeInit+0x4c>)
 8000642:	f000 f909 	bl	8000858 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8000646:	4808      	ldr	r0, [pc, #32]	; (8000668 <BSP_I2C2_DeInit+0x4c>)
 8000648:	f002 f89f 	bl	800278a <HAL_I2C_DeInit>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d002      	beq.n	8000658 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000652:	f06f 0307 	mvn.w	r3, #7
 8000656:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000658:	687b      	ldr	r3, [r7, #4]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000008c 	.word	0x2000008c
 8000668:	2000009c 	.word	0x2000009c

0800066c <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af04      	add	r7, sp, #16
 8000672:	60ba      	str	r2, [r7, #8]
 8000674:	461a      	mov	r2, r3
 8000676:	4603      	mov	r3, r0
 8000678:	81fb      	strh	r3, [r7, #14]
 800067a:	460b      	mov	r3, r1
 800067c:	81bb      	strh	r3, [r7, #12]
 800067e:	4613      	mov	r3, r2
 8000680:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8000686:	89ba      	ldrh	r2, [r7, #12]
 8000688:	89f9      	ldrh	r1, [r7, #14]
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	9302      	str	r3, [sp, #8]
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2301      	movs	r3, #1
 800069a:	480c      	ldr	r0, [pc, #48]	; (80006cc <BSP_I2C2_WriteReg+0x60>)
 800069c:	f002 f8b8 	bl	8002810 <HAL_I2C_Mem_Write>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00c      	beq.n	80006c0 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 80006a6:	4809      	ldr	r0, [pc, #36]	; (80006cc <BSP_I2C2_WriteReg+0x60>)
 80006a8:	f002 faee 	bl	8002c88 <HAL_I2C_GetError>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	d103      	bne.n	80006ba <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80006b2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	e002      	b.n	80006c0 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80006ba:	f06f 0303 	mvn.w	r3, #3
 80006be:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80006c0:	697b      	ldr	r3, [r7, #20]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000009c 	.word	0x2000009c

080006d0 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af04      	add	r7, sp, #16
 80006d6:	60ba      	str	r2, [r7, #8]
 80006d8:	461a      	mov	r2, r3
 80006da:	4603      	mov	r3, r0
 80006dc:	81fb      	strh	r3, [r7, #14]
 80006de:	460b      	mov	r3, r1
 80006e0:	81bb      	strh	r3, [r7, #12]
 80006e2:	4613      	mov	r3, r2
 80006e4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80006ea:	89ba      	ldrh	r2, [r7, #12]
 80006ec:	89f9      	ldrh	r1, [r7, #14]
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	9302      	str	r3, [sp, #8]
 80006f4:	88fb      	ldrh	r3, [r7, #6]
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2301      	movs	r3, #1
 80006fe:	480c      	ldr	r0, [pc, #48]	; (8000730 <BSP_I2C2_ReadReg+0x60>)
 8000700:	f002 f99a 	bl	8002a38 <HAL_I2C_Mem_Read>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00c      	beq.n	8000724 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <BSP_I2C2_ReadReg+0x60>)
 800070c:	f002 fabc 	bl	8002c88 <HAL_I2C_GetError>
 8000710:	4603      	mov	r3, r0
 8000712:	2b04      	cmp	r3, #4
 8000714:	d103      	bne.n	800071e <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000716:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	e002      	b.n	8000724 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800071e:	f06f 0303 	mvn.w	r3, #3
 8000722:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000724:	697b      	ldr	r3, [r7, #20]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000009c 	.word	0x2000009c

08000734 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000738:	f001 fbde 	bl	8001ef8 <HAL_GetTick>
 800073c:	4603      	mov	r3, r0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C2;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a1d      	ldr	r2, [pc, #116]	; (80007c8 <MX_I2C2_Init+0x84>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00000E14;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f640 6214 	movw	r2, #3604	; 0xe14
 800075c:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2201      	movs	r2, #1
 8000768:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f001 ff6f 	bl	800266c <HAL_I2C_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C2_Init+0x54>
  {
    ret = HAL_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000798:	2100      	movs	r1, #0
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f002 fc9c 	bl	80030d8 <HAL_I2CEx_ConfigAnalogFilter>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C2_Init+0x66>
  {
    ret = HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80007aa:	2100      	movs	r1, #0
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f002 fcde 	bl	800316e <HAL_I2CEx_ConfigDigitalFilter>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C2_Init+0x78>
  {
    ret = HAL_ERROR;
 80007b8:	2301      	movs	r3, #1
 80007ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40005800 	.word	0x40005800

080007cc <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <I2C2_MspInit+0x84>)
 80007d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d8:	4a1d      	ldr	r2, [pc, #116]	; (8000850 <I2C2_MspInit+0x84>)
 80007da:	f043 0302 	orr.w	r3, r3, #2
 80007de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <I2C2_MspInit+0x84>)
 80007e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e4:	f003 0302 	and.w	r3, r3, #2
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 80007ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f2:	2312      	movs	r3, #18
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 80007fe:	2304      	movs	r3, #4
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4812      	ldr	r0, [pc, #72]	; (8000854 <I2C2_MspInit+0x88>)
 800080a:	f001 fc93 	bl	8002134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800080e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000814:	2312      	movs	r3, #18
 8000816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000818:	2301      	movs	r3, #1
 800081a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8000820:	2304      	movs	r3, #4
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	480a      	ldr	r0, [pc, #40]	; (8000854 <I2C2_MspInit+0x88>)
 800082c:	f001 fc82 	bl	8002134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <I2C2_MspInit+0x84>)
 8000832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <I2C2_MspInit+0x84>)
 8000836:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800083a:	6593      	str	r3, [r2, #88]	; 0x58
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <I2C2_MspInit+0x84>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000
 8000854:	48000400 	.word	0x48000400

08000858 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <I2C2_MspDeInit+0x30>)
 8000862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000864:	4a08      	ldr	r2, [pc, #32]	; (8000888 <I2C2_MspDeInit+0x30>)
 8000866:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800086a:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 800086c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000870:	4806      	ldr	r0, [pc, #24]	; (800088c <I2C2_MspDeInit+0x34>)
 8000872:	f001 fdf1 	bl	8002458 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8000876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <I2C2_MspDeInit+0x34>)
 800087c:	f001 fdec 	bl	8002458 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000
 800088c:	48000400 	.word	0x48000400

08000890 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 30000))
 8000898:	bf00      	nop
 800089a:	1d39      	adds	r1, r7, #4
 800089c:	f247 5330 	movw	r3, #30000	; 0x7530
 80008a0:	2201      	movs	r2, #1
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <__io_putchar+0x28>)
 80008a4:	f004 f9a2 	bl	8004bec <HAL_UART_Transmit>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1f5      	bne.n	800089a <__io_putchar+0xa>
	{
	}
	return ch;
 80008ae:	687b      	ldr	r3, [r7, #4]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000011c 	.word	0x2000011c

080008bc <__io_getchar>:
int __io_getchar(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	71fb      	strb	r3, [r7, #7]
	while(HAL_OK != HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 30000))
 80008c6:	bf00      	nop
 80008c8:	1df9      	adds	r1, r7, #7
 80008ca:	f247 5330 	movw	r3, #30000	; 0x7530
 80008ce:	2201      	movs	r2, #1
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <__io_getchar+0x2c>)
 80008d2:	f004 fa22 	bl	8004d1a <HAL_UART_Receive>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f5      	bne.n	80008c8 <__io_getchar+0xc>
	{
	}
	return ch;
 80008dc:	79fb      	ldrb	r3, [r7, #7]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000011c 	.word	0x2000011c

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f001 fa98 	bl	8001e26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 f823 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f000 f8d5 	bl	8000aa8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008fe:	f000 f887 	bl	8000a10 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  dataRdyIntReceived = 0;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <main+0x48>)
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
  MEMS_Init();
 8000908:	f000 f91c 	bl	8000b44 <MEMS_Init>
    {
  	  //HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
  	  	//HAL_UART_Transmit(&huart1, (uint8_t*)data, COUNTOF(data)-1, 100);
  	  	//printf("START \r\n");
  	  	//HAL_Delay(1000);
  	  	if (dataRdyIntReceived != 0)
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <main+0x48>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d0fb      	beq.n	800090c <main+0x20>
  	  	{
  	  		dataRdyIntReceived = 0;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <main+0x48>)
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
  	  		LSM6DSL_Axes_t acc_axes;


  	  		LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <main+0x4c>)
 8000920:	f000 fcca 	bl	80012b8 <LSM6DSL_ACC_GetAxes>
  	  		printf(" % 5d, % 5d, % 5d\r\n", (int)acc_axes.x, (int)acc_axes.y, (int)acc_axes.z);
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4804      	ldr	r0, [pc, #16]	; (800093c <main+0x50>)
 800092c:	f005 f852 	bl	80059d4 <iprintf>
  	  	if (dataRdyIntReceived != 0)
 8000930:	e7ec      	b.n	800090c <main+0x20>
 8000932:	bf00      	nop
 8000934:	200000e8 	.word	0x200000e8
 8000938:	200000ec 	.word	0x200000ec
 800093c:	080067b4 	.word	0x080067b4

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0bc      	sub	sp, #240	; 0xf0
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800094a:	2244      	movs	r2, #68	; 0x44
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f005 f838 	bl	80059c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2294      	movs	r2, #148	; 0x94
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f005 f82a 	bl	80059c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000970:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000974:	f002 fc68 	bl	8003248 <HAL_PWREx_ControlVoltageScaling>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800097e:	f000 f941 	bl	8000c04 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000982:	2310      	movs	r3, #16
 8000984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000988:	2301      	movs	r3, #1
 800098a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000994:	2360      	movs	r3, #96	; 0x60
 8000996:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800099a:	2300      	movs	r3, #0
 800099c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 fcf3 	bl	8003390 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80009b0:	f000 f928 	bl	8000c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	230f      	movs	r3, #15
 80009b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009ba:	2300      	movs	r3, #0
 80009bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 f8ff 	bl	8003bdc <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80009e4:	f000 f90e 	bl	8000c04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 80009e8:	2381      	movs	r3, #129	; 0x81
 80009ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009ec:	2300      	movs	r3, #0
 80009ee:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4618      	mov	r0, r3
 80009f8:	f003 fba0 	bl	800413c <HAL_RCCEx_PeriphCLKConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a02:	f000 f8ff 	bl	8000c04 <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	37f0      	adds	r7, #240	; 0xf0
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <MX_USART1_UART_Init+0x94>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a58:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a5a:	f004 f877 	bl	8004b4c <HAL_UART_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 f8ce 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a6c:	f004 fe9b 	bl	80057a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a76:	f000 f8c5 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a7e:	f004 fed0 	bl	8005822 <HAL_UARTEx_SetRxFifoThreshold>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a88:	f000 f8bc 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a8e:	f004 fe51 	bl	8005734 <HAL_UARTEx_DisableFifoMode>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a98:	f000 f8b4 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000011c 	.word	0x2000011c
 8000aa4:	40013800 	.word	0x40013800

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0308 	and.w	r3, r3, #8
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_GPIO_Init+0x94>)
 8000b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4809      	ldr	r0, [pc, #36]	; (8000b40 <MX_GPIO_Init+0x98>)
 8000b1c:	f001 fb0a 	bl	8002134 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2028      	movs	r0, #40	; 0x28
 8000b26:	f001 face 	bl	80020c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b2a:	2028      	movs	r0, #40	; 0x28
 8000b2c:	f001 fae7 	bl	80020fe <HAL_NVIC_EnableIRQ>

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	10110000 	.word	0x10110000
 8000b40:	48000c00 	.word	0x48000c00

08000b44 <MEMS_Init>:

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
	LSM6DSL_IO_t io_ctx;
	uint8_t id;
	LSM6DSL_AxesRaw_t axes;

	io_ctx.BusType		= LSM6DSL_I2C_BUS;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
	io_ctx.Address		= LSM6DSL_I2C_ADD_L;
 8000b4e:	23d5      	movs	r3, #213	; 0xd5
 8000b50:	763b      	strb	r3, [r7, #24]
	io_ctx.Init			= BSP_I2C2_Init;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MEMS_Init+0x7c>)
 8000b54:	60fb      	str	r3, [r7, #12]
	io_ctx.DeInit		= BSP_I2C2_DeInit;
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MEMS_Init+0x80>)
 8000b58:	613b      	str	r3, [r7, #16]
	io_ctx.ReadReg		= BSP_I2C2_ReadReg;
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MEMS_Init+0x84>)
 8000b5c:	623b      	str	r3, [r7, #32]
	io_ctx.WriteReg		= BSP_I2C2_WriteReg;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MEMS_Init+0x88>)
 8000b60:	61fb      	str	r3, [r7, #28]
	io_ctx.GetTick		= BSP_GetTick;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MEMS_Init+0x8c>)
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
	LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4819      	ldr	r0, [pc, #100]	; (8000bd4 <MEMS_Init+0x90>)
 8000b6e:	f000 f9eb 	bl	8000f48 <LSM6DSL_RegisterBusIO>


	LSM6DSL_ReadID(&MotionSensor, &id);
 8000b72:	f107 030b 	add.w	r3, r7, #11
 8000b76:	4619      	mov	r1, r3
 8000b78:	4816      	ldr	r0, [pc, #88]	; (8000bd4 <MEMS_Init+0x90>)
 8000b7a:	f000 fab4 	bl	80010e6 <LSM6DSL_ReadID>
	if (id != LSM6DSL_ID)
 8000b7e:	7afb      	ldrb	r3, [r7, #11]
 8000b80:	2b6a      	cmp	r3, #106	; 0x6a
 8000b82:	d001      	beq.n	8000b88 <MEMS_Init+0x44>
	{
		Error_Handler();
 8000b84:	f000 f83e 	bl	8000c04 <Error_Handler>
	}

	LSM6DSL_Init(&MotionSensor);
 8000b88:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <MEMS_Init+0x90>)
 8000b8a:	f000 fa43 	bl	8001014 <LSM6DSL_Init>


	LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f);
 8000b8e:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 8000b92:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <MEMS_Init+0x90>)
 8000b94:	f000 fb28 	bl	80011e8 <LSM6DSL_ACC_SetOutputDataRate>
	LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);
 8000b98:	2104      	movs	r1, #4
 8000b9a:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <MEMS_Init+0x90>)
 8000b9c:	f000 fb40 	bl	8001220 <LSM6DSL_ACC_SetFullScale>
	LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <MEMS_Init+0x90>)
 8000ba4:	f000 fbfa 	bl	800139c <LSM6DSL_ACC_Set_INT1_DRDY>
	LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	4619      	mov	r1, r3
 8000bac:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <MEMS_Init+0x90>)
 8000bae:	f000 fb5f 	bl	8001270 <LSM6DSL_ACC_GetAxesRaw>

	LSM6DSL_ACC_Enable(&MotionSensor);
 8000bb2:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <MEMS_Init+0x90>)
 8000bb4:	f000 faad 	bl	8001112 <LSM6DSL_ACC_Enable>

}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	; 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	080005a1 	.word	0x080005a1
 8000bc4:	0800061d 	.word	0x0800061d
 8000bc8:	080006d1 	.word	0x080006d1
 8000bcc:	0800066d 	.word	0x0800066d
 8000bd0:	08000735 	.word	0x08000735
 8000bd4:	200000ec 	.word	0x200000ec

08000bd8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_11)
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000be8:	d104      	bne.n	8000bf4 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		dataRdyIntReceived++;
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_GPIO_EXTI_Callback+0x28>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <HAL_GPIO_EXTI_Callback+0x28>)
 8000bf2:	6013      	str	r3, [r2, #0]
	}
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	200000e8 	.word	0x200000e8

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <Error_Handler+0x6>

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_MspInit+0x44>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <HAL_MspInit+0x44>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_MspInit+0x44>)
 8000c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x44>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x44>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6593      	str	r3, [r2, #88]	; 0x58
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x44>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000

08000c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_UART_MspInit+0x7c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d127      	bne.n	8000cc6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	4a16      	ldr	r2, [pc, #88]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c80:	6613      	str	r3, [r2, #96]	; 0x60
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ca6:	23c0      	movs	r3, #192	; 0xc0
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <HAL_UART_MspInit+0x84>)
 8000cc2:	f001 fa37 	bl	8002134 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40013800 	.word	0x40013800
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	48000400 	.word	0x48000400

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f001 f8d2 	bl	8001ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000d34:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d38:	f001 fc80 	bl	800263c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e00a      	b.n	8000d68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d52:	f7ff fdb3 	bl	80008bc <__io_getchar>
 8000d56:	4601      	mov	r1, r0
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	60ba      	str	r2, [r7, #8]
 8000d5e:	b2ca      	uxtb	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dbf0      	blt.n	8000d52 <_read+0x12>
	}

return len;
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e009      	b.n	8000da0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fd7b 	bl	8000890 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbf1      	blt.n	8000d8c <_write+0x12>
	}
	return len;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_close>:

int _close(int file)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
	return -1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dda:	605a      	str	r2, [r3, #4]
	return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <_isatty>:

int _isatty(int file)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
	return 1;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f004 fd90 	bl	8005970 <__errno>
 8000e50:	4602      	mov	r2, r0
 8000e52:	230c      	movs	r3, #12
 8000e54:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200a0000 	.word	0x200a0000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	20000090 	.word	0x20000090
 8000e84:	200001b0 	.word	0x200001b0

08000e88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <SystemInit+0x64>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e92:	4a16      	ldr	r2, [pc, #88]	; (8000eec <SystemInit+0x64>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <SystemInit+0x68>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <SystemInit+0x68>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <SystemInit+0x68>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <SystemInit+0x68>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <SystemInit+0x68>)
 8000eb4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000eb8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ebc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <SystemInit+0x68>)
 8000ec0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ec4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <SystemInit+0x68>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <SystemInit+0x68>)
 8000ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <SystemInit+0x68>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SystemInit+0x64>)
 8000eda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ede:	609a      	str	r2, [r3, #8]
#endif
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef8:	f7ff ffc6 	bl	8000e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000efc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000efe:	e003      	b.n	8000f08 <LoopCopyDataInit>

08000f00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f06:	3104      	adds	r1, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f08:	480a      	ldr	r0, [pc, #40]	; (8000f34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f10:	d3f6      	bcc.n	8000f00 <CopyDataInit>
	ldr	r2, =_sbss
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f14:	e002      	b.n	8000f1c <LoopFillZerobss>

08000f16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f18:	f842 3b04 	str.w	r3, [r2], #4

08000f1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <LoopForever+0x16>)
	cmp	r2, r3
 8000f1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f20:	d3f9      	bcc.n	8000f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f22:	f004 fd2b 	bl	800597c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f26:	f7ff fce1 	bl	80008ec <main>

08000f2a <LoopForever>:

LoopForever:
    b LoopForever
 8000f2a:	e7fe      	b.n	8000f2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f2c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000f30:	080068e0 	.word	0x080068e0
	ldr	r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f38:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000f3c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000f40:	200001b0 	.word	0x200001b0

08000f44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC1_IRQHandler>
	...

08000f48 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d103      	bne.n	8000f64 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	e04d      	b.n	8001000 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	7b1a      	ldrb	r2, [r3, #12]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	695a      	ldr	r2, [r3, #20]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a1b      	ldr	r2, [pc, #108]	; (800100c <LSM6DSL_RegisterBusIO+0xc4>)
 8000fa0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <LSM6DSL_RegisterBusIO+0xc8>)
 8000fa6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d103      	bne.n	8000fbe <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	e020      	b.n	8001000 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4798      	blx	r3
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	e016      	b.n	8001000 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d112      	bne.n	8001000 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10d      	bne.n	8001000 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8000fe4:	230c      	movs	r3, #12
 8000fe6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8000fe8:	7afb      	ldrb	r3, [r7, #11]
 8000fea:	461a      	mov	r2, r3
 8000fec:	2112      	movs	r1, #18
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f9b9 	bl	8001366 <LSM6DSL_Write_Reg>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001000:	68fb      	ldr	r3, [r7, #12]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	08001621 	.word	0x08001621
 8001010:	08001657 	.word	0x08001657

08001014 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	331c      	adds	r3, #28
 8001020:	2101      	movs	r1, #1
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fc7a 	bl	800191c <lsm6dsl_auto_increment_set>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e054      	b.n	80010de <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	331c      	adds	r3, #28
 8001038:	2101      	movs	r1, #1
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fc26 	bl	800188c <lsm6dsl_block_data_update_set>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	e048      	b.n	80010de <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	331c      	adds	r3, #28
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fec1 	bl	8001dda <lsm6dsl_fifo_mode_set>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	e03c      	b.n	80010de <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2204      	movs	r2, #4
 8001068:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	331c      	adds	r3, #28
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fb98 	bl	80017a8 <lsm6dsl_xl_data_rate_set>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e02c      	b.n	80010de <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	331c      	adds	r3, #28
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fb2e 	bl	80016ec <lsm6dsl_xl_full_scale_set>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e020      	b.n	80010de <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2204      	movs	r2, #4
 80010a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	331c      	adds	r3, #28
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fbc8 	bl	8001840 <lsm6dsl_gy_data_rate_set>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e010      	b.n	80010de <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	331c      	adds	r3, #28
 80010c0:	2106      	movs	r1, #6
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fb96 	bl	80017f4 <lsm6dsl_gy_full_scale_set>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	e004      	b.n	80010de <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	331c      	adds	r3, #28
 80010f4:	6839      	ldr	r1, [r7, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fbff 	bl	80018fa <lsm6dsl_device_id_get>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e000      	b.n	800110a <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001120:	2b01      	cmp	r3, #1
 8001122:	d101      	bne.n	8001128 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	e014      	b.n	8001152 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f103 021c 	add.w	r2, r3, #28
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001134:	4619      	mov	r1, r3
 8001136:	4610      	mov	r0, r2
 8001138:	f000 fb36 	bl	80017a8 <lsm6dsl_xl_data_rate_set>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e004      	b.n	8001152 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	331c      	adds	r3, #28
 800116e:	f107 020b 	add.w	r2, r7, #11
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fadf 	bl	8001738 <lsm6dsl_xl_full_scale_get>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	e023      	b.n	80011ce <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8001186:	7afb      	ldrb	r3, [r7, #11]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d81b      	bhi.n	80011c4 <LSM6DSL_ACC_GetSensitivity+0x68>
 800118c:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011a5 	.word	0x080011a5
 8001198:	080011bd 	.word	0x080011bd
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011b5 	.word	0x080011b5
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 80011a8:	601a      	str	r2, [r3, #0]
      break;
 80011aa:	e00f      	b.n	80011cc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <LSM6DSL_ACC_GetSensitivity+0x80>)
 80011b0:	601a      	str	r2, [r3, #0]
      break;
 80011b2:	e00b      	b.n	80011cc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <LSM6DSL_ACC_GetSensitivity+0x84>)
 80011b8:	601a      	str	r2, [r3, #0]
      break;
 80011ba:	e007      	b.n	80011cc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <LSM6DSL_ACC_GetSensitivity+0x88>)
 80011c0:	601a      	str	r2, [r3, #0]
      break;
 80011c2:	e003      	b.n	80011cc <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	60fb      	str	r3, [r7, #12]
      break;
 80011ca:	bf00      	nop
  }

  return ret;
 80011cc:	68fb      	ldr	r3, [r7, #12]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	3d79db23 	.word	0x3d79db23
 80011dc:	3df9db23 	.word	0x3df9db23
 80011e0:	3e79db23 	.word	0x3e79db23
 80011e4:	3ef9db23 	.word	0x3ef9db23

080011e8 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d106      	bne.n	800120c <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80011fe:	ed97 0a00 	vldr	s0, [r7]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f8fe 	bl	8001404 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8001208:	4603      	mov	r3, r0
 800120a:	e005      	b.n	8001218 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800120c:	ed97 0a00 	vldr	s0, [r7]
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f983 	bl	800151c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8001216:	4603      	mov	r3, r0
  }
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2b02      	cmp	r3, #2
 800122e:	dd0b      	ble.n	8001248 <LSM6DSL_ACC_SetFullScale+0x28>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2b04      	cmp	r3, #4
 8001234:	dd06      	ble.n	8001244 <LSM6DSL_ACC_SetFullScale+0x24>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b08      	cmp	r3, #8
 800123a:	dc01      	bgt.n	8001240 <LSM6DSL_ACC_SetFullScale+0x20>
 800123c:	2303      	movs	r3, #3
 800123e:	e004      	b.n	800124a <LSM6DSL_ACC_SetFullScale+0x2a>
 8001240:	2301      	movs	r3, #1
 8001242:	e002      	b.n	800124a <LSM6DSL_ACC_SetFullScale+0x2a>
 8001244:	2302      	movs	r3, #2
 8001246:	e000      	b.n	800124a <LSM6DSL_ACC_SetFullScale+0x2a>
 8001248:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800124a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	331c      	adds	r3, #28
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f000 fa49 	bl	80016ec <lsm6dsl_xl_full_scale_set>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	e000      	b.n	8001268 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	331c      	adds	r3, #28
 800127e:	f107 0208 	add.w	r2, r7, #8
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fb27 	bl	80018d8 <lsm6dsl_acceleration_raw_get>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
 8001294:	e00c      	b.n	80012b0 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8001296:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800129e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80012a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	331c      	adds	r3, #28
 80012cc:	f107 0210 	add.w	r2, r7, #16
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fb00 	bl	80018d8 <lsm6dsl_acceleration_raw_get>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e03c      	b.n	800135e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4619      	mov	r1, r3
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ff36 	bl	800115c <LSM6DSL_ACC_GetSensitivity>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	e030      	b.n	800135e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80012fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001308:	edd7 7a03 	vldr	s15, [r7, #12]
 800130c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001314:	ee17 2a90 	vmov	r2, s15
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800131c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001328:	edd7 7a03 	vldr	s15, [r7, #12]
 800132c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001334:	ee17 2a90 	vmov	r2, s15
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800133c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001348:	edd7 7a03 	vldr	s15, [r7, #12]
 800134c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001354:	ee17 2a90 	vmov	r2, s15
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	460b      	mov	r3, r1
 8001370:	70fb      	strb	r3, [r7, #3]
 8001372:	4613      	mov	r3, r2
 8001374:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f103 001c 	add.w	r0, r3, #28
 800137c:	1cba      	adds	r2, r7, #2
 800137e:	78f9      	ldrb	r1, [r7, #3]
 8001380:	2301      	movs	r3, #1
 8001382:	f000 f99b 	bl	80016bc <lsm6dsl_write_reg>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
 8001390:	e000      	b.n	8001394 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <LSM6DSL_ACC_Set_INT1_DRDY>:
 * @param  pObj the device pObj
 * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	331c      	adds	r3, #28
 80013ac:	f107 020c 	add.w	r2, r7, #12
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fc3b 	bl	8001c2e <lsm6dsl_pin_int1_route_get>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e01b      	b.n	80013fc <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d811      	bhi.n	80013ee <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	7b3b      	ldrb	r3, [r7, #12]
 80013d4:	f362 0300 	bfi	r3, r2, #0, #1
 80013d8:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	331c      	adds	r3, #28
 80013de:	68f9      	ldr	r1, [r7, #12]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fac1 	bl	8001968 <lsm6dsl_pin_int1_route_set>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 80013ec:	e002      	b.n	80013f4 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e003      	b.n	80013fc <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
 80013f8:	e000      	b.n	80013fc <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8001410:	edd7 7a00 	vldr	s15, [r7]
 8001414:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	d801      	bhi.n	8001426 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8001422:	2301      	movs	r3, #1
 8001424:	e058      	b.n	80014d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001426:	edd7 7a00 	vldr	s15, [r7]
 800142a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800142e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001436:	d801      	bhi.n	800143c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8001438:	2302      	movs	r3, #2
 800143a:	e04d      	b.n	80014d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800143c:	edd7 7a00 	vldr	s15, [r7]
 8001440:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001500 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8001444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144c:	d801      	bhi.n	8001452 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800144e:	2303      	movs	r3, #3
 8001450:	e042      	b.n	80014d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001452:	edd7 7a00 	vldr	s15, [r7]
 8001456:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001504 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800145a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	d801      	bhi.n	8001468 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8001464:	2304      	movs	r3, #4
 8001466:	e037      	b.n	80014d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001468:	edd7 7a00 	vldr	s15, [r7]
 800146c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001508 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8001470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001478:	d801      	bhi.n	800147e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800147a:	2305      	movs	r3, #5
 800147c:	e02c      	b.n	80014d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800147e:	edd7 7a00 	vldr	s15, [r7]
 8001482:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800150c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8001486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d801      	bhi.n	8001494 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8001490:	2306      	movs	r3, #6
 8001492:	e021      	b.n	80014d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001494:	edd7 7a00 	vldr	s15, [r7]
 8001498:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001510 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800149c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	d801      	bhi.n	80014aa <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80014a6:	2307      	movs	r3, #7
 80014a8:	e016      	b.n	80014d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80014aa:	edd7 7a00 	vldr	s15, [r7]
 80014ae:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001514 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80014b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	d801      	bhi.n	80014c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80014bc:	2308      	movs	r3, #8
 80014be:	e00b      	b.n	80014d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80014c0:	edd7 7a00 	vldr	s15, [r7]
 80014c4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001518 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80014c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	d801      	bhi.n	80014d6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80014d2:	2309      	movs	r3, #9
 80014d4:	e000      	b.n	80014d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80014d6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80014d8:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	331c      	adds	r3, #28
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f960 	bl	80017a8 <lsm6dsl_xl_data_rate_set>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e000      	b.n	80014f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	42500000 	.word	0x42500000
 8001504:	42d00000 	.word	0x42d00000
 8001508:	43500000 	.word	0x43500000
 800150c:	43d00000 	.word	0x43d00000
 8001510:	44504000 	.word	0x44504000
 8001514:	44cf8000 	.word	0x44cf8000
 8001518:	45502000 	.word	0x45502000

0800151c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8001528:	edd7 7a00 	vldr	s15, [r7]
 800152c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001538:	d801      	bhi.n	800153e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800153a:	2301      	movs	r3, #1
 800153c:	e058      	b.n	80015f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800153e:	edd7 7a00 	vldr	s15, [r7]
 8001542:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8001546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154e:	d801      	bhi.n	8001554 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8001550:	2302      	movs	r3, #2
 8001552:	e04d      	b.n	80015f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001554:	edd7 7a00 	vldr	s15, [r7]
 8001558:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001604 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800155c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d801      	bhi.n	800156a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8001566:	2303      	movs	r3, #3
 8001568:	e042      	b.n	80015f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800156a:	edd7 7a00 	vldr	s15, [r7]
 800156e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001608 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8001572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157a:	d801      	bhi.n	8001580 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 800157c:	2304      	movs	r3, #4
 800157e:	e037      	b.n	80015f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001580:	edd7 7a00 	vldr	s15, [r7]
 8001584:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800160c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8001588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001590:	d801      	bhi.n	8001596 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8001592:	2305      	movs	r3, #5
 8001594:	e02c      	b.n	80015f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001596:	edd7 7a00 	vldr	s15, [r7]
 800159a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001610 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800159e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a6:	d801      	bhi.n	80015ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80015a8:	2306      	movs	r3, #6
 80015aa:	e021      	b.n	80015f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80015ac:	edd7 7a00 	vldr	s15, [r7]
 80015b0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001614 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80015b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015bc:	d801      	bhi.n	80015c2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80015be:	2307      	movs	r3, #7
 80015c0:	e016      	b.n	80015f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80015c2:	edd7 7a00 	vldr	s15, [r7]
 80015c6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001618 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80015ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d2:	d801      	bhi.n	80015d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80015d4:	2308      	movs	r3, #8
 80015d6:	e00b      	b.n	80015f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80015d8:	edd7 7a00 	vldr	s15, [r7]
 80015dc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800161c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80015e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e8:	d801      	bhi.n	80015ee <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80015ea:	2309      	movs	r3, #9
 80015ec:	e000      	b.n	80015f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80015ee:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	42500000 	.word	0x42500000
 8001608:	42d00000 	.word	0x42d00000
 800160c:	43500000 	.word	0x43500000
 8001610:	43d00000 	.word	0x43d00000
 8001614:	44504000 	.word	0x44504000
 8001618:	44cf8000 	.word	0x44cf8000
 800161c:	45502000 	.word	0x45502000

08001620 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	461a      	mov	r2, r3
 800162c:	460b      	mov	r3, r1
 800162e:	72fb      	strb	r3, [r7, #11]
 8001630:	4613      	mov	r3, r2
 8001632:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	695c      	ldr	r4, [r3, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	7b1b      	ldrb	r3, [r3, #12]
 8001640:	b298      	uxth	r0, r3
 8001642:	7afb      	ldrb	r3, [r7, #11]
 8001644:	b299      	uxth	r1, r3
 8001646:	893b      	ldrh	r3, [r7, #8]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	47a0      	blx	r4
 800164c:	4603      	mov	r3, r0
}
 800164e:	4618      	mov	r0, r3
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd90      	pop	{r4, r7, pc}

08001656 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001656:	b590      	push	{r4, r7, lr}
 8001658:	b087      	sub	sp, #28
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	461a      	mov	r2, r3
 8001662:	460b      	mov	r3, r1
 8001664:	72fb      	strb	r3, [r7, #11]
 8001666:	4613      	mov	r3, r2
 8001668:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	691c      	ldr	r4, [r3, #16]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	7b1b      	ldrb	r3, [r3, #12]
 8001676:	b298      	uxth	r0, r3
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	b299      	uxth	r1, r3
 800167c:	893b      	ldrh	r3, [r7, #8]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	47a0      	blx	r4
 8001682:	4603      	mov	r3, r0
}
 8001684:	4618      	mov	r0, r3
 8001686:	371c      	adds	r7, #28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd90      	pop	{r4, r7, pc}

0800168c <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	461a      	mov	r2, r3
 8001698:	460b      	mov	r3, r1
 800169a:	72fb      	strb	r3, [r7, #11]
 800169c:	4613      	mov	r3, r2
 800169e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685c      	ldr	r4, [r3, #4]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6898      	ldr	r0, [r3, #8]
 80016a8:	893b      	ldrh	r3, [r7, #8]
 80016aa:	7af9      	ldrb	r1, [r7, #11]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	47a0      	blx	r4
 80016b0:	6178      	str	r0, [r7, #20]
  return ret;
 80016b2:	697b      	ldr	r3, [r7, #20]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	371c      	adds	r7, #28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}

080016bc <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	461a      	mov	r2, r3
 80016c8:	460b      	mov	r3, r1
 80016ca:	72fb      	strb	r3, [r7, #11]
 80016cc:	4613      	mov	r3, r2
 80016ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681c      	ldr	r4, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6898      	ldr	r0, [r3, #8]
 80016d8:	893b      	ldrh	r3, [r7, #8]
 80016da:	7af9      	ldrb	r1, [r7, #11]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	47a0      	blx	r4
 80016e0:	6178      	str	r0, [r7, #20]
  return ret;
 80016e2:	697b      	ldr	r3, [r7, #20]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	371c      	adds	r7, #28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd90      	pop	{r4, r7, pc}

080016ec <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80016f8:	f107 0208 	add.w	r2, r7, #8
 80016fc:	2301      	movs	r3, #1
 80016fe:	2110      	movs	r1, #16
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ffc3 	bl	800168c <lsm6dsl_read_reg>
 8001706:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10f      	bne.n	800172e <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	b2da      	uxtb	r2, r3
 8001716:	7a3b      	ldrb	r3, [r7, #8]
 8001718:	f362 0383 	bfi	r3, r2, #2, #2
 800171c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800171e:	f107 0208 	add.w	r2, r7, #8
 8001722:	2301      	movs	r3, #1
 8001724:	2110      	movs	r1, #16
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffc8 	bl	80016bc <lsm6dsl_write_reg>
 800172c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8001742:	f107 0208 	add.w	r2, r7, #8
 8001746:	2301      	movs	r3, #1
 8001748:	2110      	movs	r1, #16
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ff9e 	bl	800168c <lsm6dsl_read_reg>
 8001750:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8001752:	7a3b      	ldrb	r3, [r7, #8]
 8001754:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b03      	cmp	r3, #3
 800175c:	d81a      	bhi.n	8001794 <lsm6dsl_xl_full_scale_get+0x5c>
 800175e:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <lsm6dsl_xl_full_scale_get+0x2c>)
 8001760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001764:	08001775 	.word	0x08001775
 8001768:	0800177d 	.word	0x0800177d
 800176c:	08001785 	.word	0x08001785
 8001770:	0800178d 	.word	0x0800178d
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
      break;
 800177a:	e00f      	b.n	800179c <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
      break;
 8001782:	e00b      	b.n	800179c <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2202      	movs	r2, #2
 8001788:	701a      	strb	r2, [r3, #0]
      break;
 800178a:	e007      	b.n	800179c <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	2203      	movs	r2, #3
 8001790:	701a      	strb	r2, [r3, #0]
      break;
 8001792:	e003      	b.n	800179c <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	2204      	movs	r2, #4
 8001798:	701a      	strb	r2, [r3, #0]
      break;
 800179a:	bf00      	nop
  }

  return ret;
 800179c:	68fb      	ldr	r3, [r7, #12]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop

080017a8 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80017b4:	f107 0208 	add.w	r2, r7, #8
 80017b8:	2301      	movs	r3, #1
 80017ba:	2110      	movs	r1, #16
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff65 	bl	800168c <lsm6dsl_read_reg>
 80017c2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10f      	bne.n	80017ea <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	7a3b      	ldrb	r3, [r7, #8]
 80017d4:	f362 1307 	bfi	r3, r2, #4, #4
 80017d8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80017da:	f107 0208 	add.w	r2, r7, #8
 80017de:	2301      	movs	r3, #1
 80017e0:	2110      	movs	r1, #16
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ff6a 	bl	80016bc <lsm6dsl_write_reg>
 80017e8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8001800:	f107 0208 	add.w	r2, r7, #8
 8001804:	2301      	movs	r3, #1
 8001806:	2111      	movs	r1, #17
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff3f 	bl	800168c <lsm6dsl_read_reg>
 800180e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10f      	bne.n	8001836 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	b2da      	uxtb	r2, r3
 800181e:	7a3b      	ldrb	r3, [r7, #8]
 8001820:	f362 0343 	bfi	r3, r2, #1, #3
 8001824:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8001826:	f107 0208 	add.w	r2, r7, #8
 800182a:	2301      	movs	r3, #1
 800182c:	2111      	movs	r1, #17
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff44 	bl	80016bc <lsm6dsl_write_reg>
 8001834:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800184c:	f107 0208 	add.w	r2, r7, #8
 8001850:	2301      	movs	r3, #1
 8001852:	2111      	movs	r1, #17
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff19 	bl	800168c <lsm6dsl_read_reg>
 800185a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	f003 030f 	and.w	r3, r3, #15
 8001868:	b2da      	uxtb	r2, r3
 800186a:	7a3b      	ldrb	r3, [r7, #8]
 800186c:	f362 1307 	bfi	r3, r2, #4, #4
 8001870:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8001872:	f107 0208 	add.w	r2, r7, #8
 8001876:	2301      	movs	r3, #1
 8001878:	2111      	movs	r1, #17
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ff1e 	bl	80016bc <lsm6dsl_write_reg>
 8001880:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001882:	68fb      	ldr	r3, [r7, #12]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8001898:	f107 0208 	add.w	r2, r7, #8
 800189c:	2301      	movs	r3, #1
 800189e:	2112      	movs	r1, #18
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff fef3 	bl	800168c <lsm6dsl_read_reg>
 80018a6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10f      	bne.n	80018ce <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	7a3b      	ldrb	r3, [r7, #8]
 80018b8:	f362 1386 	bfi	r3, r2, #6, #1
 80018bc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80018be:	f107 0208 	add.w	r2, r7, #8
 80018c2:	2301      	movs	r3, #1
 80018c4:	2112      	movs	r1, #18
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fef8 	bl	80016bc <lsm6dsl_write_reg>
 80018cc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80018e2:	2306      	movs	r3, #6
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	2128      	movs	r1, #40	; 0x28
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fecf 	bl	800168c <lsm6dsl_read_reg>
 80018ee:	60f8      	str	r0, [r7, #12]
  return ret;
 80018f0:	68fb      	ldr	r3, [r7, #12]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001904:	2301      	movs	r3, #1
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	210f      	movs	r1, #15
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff febe 	bl	800168c <lsm6dsl_read_reg>
 8001910:	60f8      	str	r0, [r7, #12]
  return ret;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8001928:	f107 0208 	add.w	r2, r7, #8
 800192c:	2301      	movs	r3, #1
 800192e:	2112      	movs	r1, #18
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff feab 	bl	800168c <lsm6dsl_read_reg>
 8001936:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10f      	bne.n	800195e <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	b2da      	uxtb	r2, r3
 8001946:	7a3b      	ldrb	r3, [r7, #8]
 8001948:	f362 0382 	bfi	r3, r2, #2, #1
 800194c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800194e:	f107 0208 	add.w	r2, r7, #8
 8001952:	2301      	movs	r3, #1
 8001954:	2112      	movs	r1, #18
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff feb0 	bl	80016bc <lsm6dsl_write_reg>
 800195c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8001972:	f107 021c 	add.w	r2, r7, #28
 8001976:	2301      	movs	r3, #1
 8001978:	210d      	movs	r1, #13
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff fe86 	bl	800168c <lsm6dsl_read_reg>
 8001980:	6278      	str	r0, [r7, #36]	; 0x24
  if(ret == 0){
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	2b00      	cmp	r3, #0
 8001986:	d147      	bne.n	8001a18 <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8001988:	783b      	ldrb	r3, [r7, #0]
 800198a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800198e:	b2da      	uxtb	r2, r3
 8001990:	7f3b      	ldrb	r3, [r7, #28]
 8001992:	f362 0300 	bfi	r3, r2, #0, #1
 8001996:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8001998:	783b      	ldrb	r3, [r7, #0]
 800199a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	7f3b      	ldrb	r3, [r7, #28]
 80019a2:	f362 0341 	bfi	r3, r2, #1, #1
 80019a6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 80019a8:	783b      	ldrb	r3, [r7, #0]
 80019aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	7f3b      	ldrb	r3, [r7, #28]
 80019b2:	f362 0382 	bfi	r3, r2, #2, #1
 80019b6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 80019b8:	783b      	ldrb	r3, [r7, #0]
 80019ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	7f3b      	ldrb	r3, [r7, #28]
 80019c2:	f362 03c3 	bfi	r3, r2, #3, #1
 80019c6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 80019c8:	783b      	ldrb	r3, [r7, #0]
 80019ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	7f3b      	ldrb	r3, [r7, #28]
 80019d2:	f362 1304 	bfi	r3, r2, #4, #1
 80019d6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 80019d8:	783b      	ldrb	r3, [r7, #0]
 80019da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	7f3b      	ldrb	r3, [r7, #28]
 80019e2:	f362 1345 	bfi	r3, r2, #5, #1
 80019e6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80019e8:	783b      	ldrb	r3, [r7, #0]
 80019ea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	7f3b      	ldrb	r3, [r7, #28]
 80019f2:	f362 1386 	bfi	r3, r2, #6, #1
 80019f6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 80019f8:	783b      	ldrb	r3, [r7, #0]
 80019fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	7f3b      	ldrb	r3, [r7, #28]
 8001a02:	f362 13c7 	bfi	r3, r2, #7, #1
 8001a06:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8001a08:	f107 021c 	add.w	r2, r7, #28
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	210d      	movs	r1, #13
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fe53 	bl	80016bc <lsm6dsl_write_reg>
 8001a16:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d107      	bne.n	8001a2e <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8001a1e:	f107 0218 	add.w	r2, r7, #24
 8001a22:	2301      	movs	r3, #1
 8001a24:	215e      	movs	r1, #94	; 0x5e
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fe30 	bl	800168c <lsm6dsl_read_reg>
 8001a2c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d107      	bne.n	8001a44 <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 8001a34:	f107 0214 	add.w	r2, r7, #20
 8001a38:	2301      	movs	r3, #1
 8001a3a:	215f      	movs	r1, #95	; 0x5f
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff fe25 	bl	800168c <lsm6dsl_read_reg>
 8001a42:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d147      	bne.n	8001ada <lsm6dsl_pin_int1_route_set+0x172>
        md1_cfg.int1_timer           = val.int1_timer;
 8001a4a:	787b      	ldrb	r3, [r7, #1]
 8001a4c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	7e3b      	ldrb	r3, [r7, #24]
 8001a54:	f362 0300 	bfi	r3, r2, #0, #1
 8001a58:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_tilt            = val.int1_tilt;
 8001a5a:	787b      	ldrb	r3, [r7, #1]
 8001a5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	7e3b      	ldrb	r3, [r7, #24]
 8001a64:	f362 0341 	bfi	r3, r2, #1, #1
 8001a68:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_6d              = val.int1_6d;
 8001a6a:	787b      	ldrb	r3, [r7, #1]
 8001a6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	7e3b      	ldrb	r3, [r7, #24]
 8001a74:	f362 0382 	bfi	r3, r2, #2, #1
 8001a78:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_double_tap      = val.int1_double_tap;
 8001a7a:	787b      	ldrb	r3, [r7, #1]
 8001a7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	7e3b      	ldrb	r3, [r7, #24]
 8001a84:	f362 03c3 	bfi	r3, r2, #3, #1
 8001a88:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_ff              = val.int1_ff;
 8001a8a:	787b      	ldrb	r3, [r7, #1]
 8001a8c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	7e3b      	ldrb	r3, [r7, #24]
 8001a94:	f362 1304 	bfi	r3, r2, #4, #1
 8001a98:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_wu              = val.int1_wu;
 8001a9a:	787b      	ldrb	r3, [r7, #1]
 8001a9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	7e3b      	ldrb	r3, [r7, #24]
 8001aa4:	f362 1345 	bfi	r3, r2, #5, #1
 8001aa8:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_single_tap      = val.int1_single_tap;
 8001aaa:	787b      	ldrb	r3, [r7, #1]
 8001aac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	7e3b      	ldrb	r3, [r7, #24]
 8001ab4:	f362 1386 	bfi	r3, r2, #6, #1
 8001ab8:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_inact_state     = val.int1_inact_state;
 8001aba:	787b      	ldrb	r3, [r7, #1]
 8001abc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	7e3b      	ldrb	r3, [r7, #24]
 8001ac4:	f362 13c7 	bfi	r3, r2, #7, #1
 8001ac8:	763b      	strb	r3, [r7, #24]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8001aca:	f107 0218 	add.w	r2, r7, #24
 8001ace:	2301      	movs	r3, #1
 8001ad0:	215e      	movs	r1, #94	; 0x5e
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fdf2 	bl	80016bc <lsm6dsl_write_reg>
 8001ad8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8001ae0:	f107 0210 	add.w	r2, r7, #16
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	2113      	movs	r1, #19
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff fdcf 	bl	800168c <lsm6dsl_read_reg>
 8001aee:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10f      	bne.n	8001b16 <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8001af6:	78bb      	ldrb	r3, [r7, #2]
 8001af8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	7c3b      	ldrb	r3, [r7, #16]
 8001b00:	f362 1304 	bfi	r3, r2, #4, #1
 8001b04:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8001b06:	f107 0210 	add.w	r2, r7, #16
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	2113      	movs	r1, #19
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fdd4 	bl	80016bc <lsm6dsl_write_reg>
 8001b14:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d107      	bne.n	8001b2c <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8001b1c:	f107 0220 	add.w	r2, r7, #32
 8001b20:	2301      	movs	r3, #1
 8001b22:	211a      	movs	r1, #26
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fdb1 	bl	800168c <lsm6dsl_read_reg>
 8001b2a:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d111      	bne.n	8001b56 <lsm6dsl_pin_int1_route_set+0x1ee>
     master_config.drdy_on_int1   = val.den_drdy_int1;
 8001b32:	78bb      	ldrb	r3, [r7, #2]
 8001b34:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b3e:	f362 13c7 	bfi	r3, r2, #7, #1
 8001b42:	f887 3020 	strb.w	r3, [r7, #32]
     ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8001b46:	f107 0220 	add.w	r2, r7, #32
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	211a      	movs	r1, #26
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fdb4 	bl	80016bc <lsm6dsl_write_reg>
 8001b54:	6278      	str	r0, [r7, #36]	; 0x24
                             (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d158      	bne.n	8001c0e <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8001b5c:	f107 020c 	add.w	r2, r7, #12
 8001b60:	2301      	movs	r3, #1
 8001b62:	2158      	movs	r1, #88	; 0x58
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff fd91 	bl	800168c <lsm6dsl_read_reg>
 8001b6a:	6278      	str	r0, [r7, #36]	; 0x24
    if ((val.int1_6d != 0x00U) ||
 8001b6c:	787b      	ldrb	r3, [r7, #1]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d141      	bne.n	8001bfc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d13b      	bne.n	8001bfc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d135      	bne.n	8001bfc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8001b90:	787b      	ldrb	r3, [r7, #1]
 8001b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b96:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d12f      	bne.n	8001bfc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8001b9c:	787b      	ldrb	r3, [r7, #1]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d129      	bne.n	8001bfc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U)||
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001bae:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d123      	bne.n	8001bfc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8001bb4:	7d3b      	ldrb	r3, [r7, #20]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U)||
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d11d      	bne.n	8001bfc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8001bc0:	7d3b      	ldrb	r3, [r7, #20]
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d117      	bne.n	8001bfc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8001bcc:	7d3b      	ldrb	r3, [r7, #20]
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d111      	bne.n	8001bfc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8001bd8:	7d3b      	ldrb	r3, [r7, #20]
 8001bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bde:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10b      	bne.n	8001bfc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8001be4:	7d3b      	ldrb	r3, [r7, #20]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state!= 0x00U) ){
 8001bf0:	7d3b      	ldrb	r3, [r7, #20]
 8001bf2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001bf6:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8001bfc:	7b3b      	ldrb	r3, [r7, #12]
 8001bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c02:	733b      	strb	r3, [r7, #12]
 8001c04:	e003      	b.n	8001c0e <lsm6dsl_pin_int1_route_set+0x2a6>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8001c06:	7b3b      	ldrb	r3, [r7, #12]
 8001c08:	f36f 13c7 	bfc	r3, #7, #1
 8001c0c:	733b      	strb	r3, [r7, #12]
    }
  }
  if(ret == 0){    
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d107      	bne.n	8001c24 <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8001c14:	f107 020c 	add.w	r2, r7, #12
 8001c18:	2301      	movs	r3, #1
 8001c1a:	2158      	movs	r1, #88	; 0x58
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fd4d 	bl	80016bc <lsm6dsl_write_reg>
 8001c22:	6278      	str	r0, [r7, #36]	; 0x24
  }
  return ret;
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3728      	adds	r7, #40	; 0x28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b088      	sub	sp, #32
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;

  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8001c38:	f107 0214 	add.w	r2, r7, #20
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	210d      	movs	r1, #13
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff fd23 	bl	800168c <lsm6dsl_read_reg>
 8001c46:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 80c0 	bne.w	8001dd0 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8001c50:	7d3b      	ldrb	r3, [r7, #20]
 8001c52:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001c56:	b2d9      	uxtb	r1, r3
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	7813      	ldrb	r3, [r2, #0]
 8001c5c:	f361 0300 	bfi	r3, r1, #0, #1
 8001c60:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8001c62:	7d3b      	ldrb	r3, [r7, #20]
 8001c64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001c68:	b2d9      	uxtb	r1, r3
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	7813      	ldrb	r3, [r2, #0]
 8001c6e:	f361 0341 	bfi	r3, r1, #1, #1
 8001c72:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8001c74:	7d3b      	ldrb	r3, [r7, #20]
 8001c76:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001c7a:	b2d9      	uxtb	r1, r3
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	7813      	ldrb	r3, [r2, #0]
 8001c80:	f361 0382 	bfi	r3, r1, #2, #1
 8001c84:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8001c86:	7d3b      	ldrb	r3, [r7, #20]
 8001c88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001c8c:	b2d9      	uxtb	r1, r3
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	7813      	ldrb	r3, [r2, #0]
 8001c92:	f361 03c3 	bfi	r3, r1, #3, #1
 8001c96:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8001c98:	7d3b      	ldrb	r3, [r7, #20]
 8001c9a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001c9e:	b2d9      	uxtb	r1, r3
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	7813      	ldrb	r3, [r2, #0]
 8001ca4:	f361 1304 	bfi	r3, r1, #4, #1
 8001ca8:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 8001caa:	7d3b      	ldrb	r3, [r7, #20]
 8001cac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001cb0:	b2d9      	uxtb	r1, r3
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	7813      	ldrb	r3, [r2, #0]
 8001cb6:	f361 1345 	bfi	r3, r1, #5, #1
 8001cba:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 8001cbc:	7d3b      	ldrb	r3, [r7, #20]
 8001cbe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001cc2:	b2d9      	uxtb	r1, r3
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	7813      	ldrb	r3, [r2, #0]
 8001cc8:	f361 1386 	bfi	r3, r1, #6, #1
 8001ccc:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8001cce:	7d3b      	ldrb	r3, [r7, #20]
 8001cd0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001cd4:	b2d9      	uxtb	r1, r3
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	7813      	ldrb	r3, [r2, #0]
 8001cda:	f361 13c7 	bfi	r3, r1, #7, #1
 8001cde:	7013      	strb	r3, [r2, #0]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8001ce0:	f107 0210 	add.w	r2, r7, #16
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	215e      	movs	r1, #94	; 0x5e
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fccf 	bl	800168c <lsm6dsl_read_reg>
 8001cee:	61f8      	str	r0, [r7, #28]
    if(ret == 0){
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d16c      	bne.n	8001dd0 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_timer       = md1_cfg.int1_timer;
 8001cf6:	7c3b      	ldrb	r3, [r7, #16]
 8001cf8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001cfc:	b2d9      	uxtb	r1, r3
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	7853      	ldrb	r3, [r2, #1]
 8001d02:	f361 0300 	bfi	r3, r1, #0, #1
 8001d06:	7053      	strb	r3, [r2, #1]
    val->int1_tilt        = md1_cfg.int1_tilt;
 8001d08:	7c3b      	ldrb	r3, [r7, #16]
 8001d0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d0e:	b2d9      	uxtb	r1, r3
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	7853      	ldrb	r3, [r2, #1]
 8001d14:	f361 0341 	bfi	r3, r1, #1, #1
 8001d18:	7053      	strb	r3, [r2, #1]
    val->int1_6d          = md1_cfg.int1_6d;
 8001d1a:	7c3b      	ldrb	r3, [r7, #16]
 8001d1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d20:	b2d9      	uxtb	r1, r3
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	7853      	ldrb	r3, [r2, #1]
 8001d26:	f361 0382 	bfi	r3, r1, #2, #1
 8001d2a:	7053      	strb	r3, [r2, #1]
    val->int1_double_tap  = md1_cfg.int1_double_tap;
 8001d2c:	7c3b      	ldrb	r3, [r7, #16]
 8001d2e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d32:	b2d9      	uxtb	r1, r3
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	7853      	ldrb	r3, [r2, #1]
 8001d38:	f361 03c3 	bfi	r3, r1, #3, #1
 8001d3c:	7053      	strb	r3, [r2, #1]
    val->int1_ff          = md1_cfg.int1_ff;
 8001d3e:	7c3b      	ldrb	r3, [r7, #16]
 8001d40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d44:	b2d9      	uxtb	r1, r3
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	7853      	ldrb	r3, [r2, #1]
 8001d4a:	f361 1304 	bfi	r3, r1, #4, #1
 8001d4e:	7053      	strb	r3, [r2, #1]
    val->int1_wu          = md1_cfg.int1_wu;
 8001d50:	7c3b      	ldrb	r3, [r7, #16]
 8001d52:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d56:	b2d9      	uxtb	r1, r3
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	7853      	ldrb	r3, [r2, #1]
 8001d5c:	f361 1345 	bfi	r3, r1, #5, #1
 8001d60:	7053      	strb	r3, [r2, #1]
    val->int1_single_tap  = md1_cfg.int1_single_tap;
 8001d62:	7c3b      	ldrb	r3, [r7, #16]
 8001d64:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d68:	b2d9      	uxtb	r1, r3
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	7853      	ldrb	r3, [r2, #1]
 8001d6e:	f361 1386 	bfi	r3, r1, #6, #1
 8001d72:	7053      	strb	r3, [r2, #1]
    val->int1_inact_state = md1_cfg.int1_inact_state;
 8001d74:	7c3b      	ldrb	r3, [r7, #16]
 8001d76:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d7a:	b2d9      	uxtb	r1, r3
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	7853      	ldrb	r3, [r2, #1]
 8001d80:	f361 13c7 	bfi	r3, r1, #7, #1
 8001d84:	7053      	strb	r3, [r2, #1]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8001d86:	f107 020c 	add.w	r2, r7, #12
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	2113      	movs	r1, #19
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff fc7c 	bl	800168c <lsm6dsl_read_reg>
 8001d94:	61f8      	str	r0, [r7, #28]
      if(ret == 0){
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d119      	bne.n	8001dd0 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8001d9c:	7b3b      	ldrb	r3, [r7, #12]
 8001d9e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001da2:	b2d9      	uxtb	r1, r3
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	7893      	ldrb	r3, [r2, #2]
 8001da8:	f361 0300 	bfi	r3, r1, #0, #1
 8001dac:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8001dae:	f107 0218 	add.w	r2, r7, #24
 8001db2:	2301      	movs	r3, #1
 8001db4:	211a      	movs	r1, #26
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fc68 	bl	800168c <lsm6dsl_read_reg>
 8001dbc:	61f8      	str	r0, [r7, #28]
                               (uint8_t*)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8001dbe:	7e3b      	ldrb	r3, [r7, #24]
 8001dc0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001dc4:	b2d9      	uxtb	r1, r3
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	7893      	ldrb	r3, [r2, #2]
 8001dca:	f361 0300 	bfi	r3, r1, #0, #1
 8001dce:	7093      	strb	r3, [r2, #2]
      }
    }
  }
  return ret;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	460b      	mov	r3, r1
 8001de4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8001de6:	f107 0208 	add.w	r2, r7, #8
 8001dea:	2301      	movs	r3, #1
 8001dec:	210a      	movs	r1, #10
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff fc4c 	bl	800168c <lsm6dsl_read_reg>
 8001df4:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10f      	bne.n	8001e1c <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	7a3b      	ldrb	r3, [r7, #8]
 8001e06:	f362 0302 	bfi	r3, r2, #0, #3
 8001e0a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8001e0c:	f107 0208 	add.w	r2, r7, #8
 8001e10:	2301      	movs	r3, #1
 8001e12:	210a      	movs	r1, #10
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff fc51 	bl	80016bc <lsm6dsl_write_reg>
 8001e1a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 f93d 	bl	80020b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e36:	2000      	movs	r0, #0
 8001e38:	f000 f80e 	bl	8001e58 <HAL_InitTick>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	71fb      	strb	r3, [r7, #7]
 8001e46:	e001      	b.n	8001e4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e48:	f7fe fee0 	bl	8000c0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e64:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_InitTick+0x6c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d023      	beq.n	8001eb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e6c:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <HAL_InitTick+0x70>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <HAL_InitTick+0x6c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4619      	mov	r1, r3
 8001e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 f949 	bl	800211a <HAL_SYSTICK_Config>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10f      	bne.n	8001eae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b0f      	cmp	r3, #15
 8001e92:	d809      	bhi.n	8001ea8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e94:	2200      	movs	r2, #0
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9c:	f000 f913 	bl	80020c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <HAL_InitTick+0x74>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e007      	b.n	8001eb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
 8001eac:	e004      	b.n	8001eb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	e001      	b.n	8001eb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000004 	.word	0x20000004

08001ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_IncTick+0x20>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_IncTick+0x24>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <HAL_IncTick+0x24>)
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	200001a8 	.word	0x200001a8

08001ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return uwTick;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_GetTick+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	200001a8 	.word	0x200001a8

08001f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f42:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	60d3      	str	r3, [r2, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <__NVIC_GetPriorityGrouping+0x18>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	f003 0307 	and.w	r3, r3, #7
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	db0b      	blt.n	8001f9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	f003 021f 	and.w	r2, r3, #31
 8001f8c:	4907      	ldr	r1, [pc, #28]	; (8001fac <__NVIC_EnableIRQ+0x38>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	2001      	movs	r0, #1
 8001f96:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000e100 	.word	0xe000e100

08001fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db0a      	blt.n	8001fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	490c      	ldr	r1, [pc, #48]	; (8001ffc <__NVIC_SetPriority+0x4c>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd8:	e00a      	b.n	8001ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4908      	ldr	r1, [pc, #32]	; (8002000 <__NVIC_SetPriority+0x50>)
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3b04      	subs	r3, #4
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	440b      	add	r3, r1
 8001fee:	761a      	strb	r2, [r3, #24]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000e100 	.word	0xe000e100
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f1c3 0307 	rsb	r3, r3, #7
 800201e:	2b04      	cmp	r3, #4
 8002020:	bf28      	it	cs
 8002022:	2304      	movcs	r3, #4
 8002024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3304      	adds	r3, #4
 800202a:	2b06      	cmp	r3, #6
 800202c:	d902      	bls.n	8002034 <NVIC_EncodePriority+0x30>
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3b03      	subs	r3, #3
 8002032:	e000      	b.n	8002036 <NVIC_EncodePriority+0x32>
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	401a      	ands	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43d9      	mvns	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	4313      	orrs	r3, r2
         );
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800207c:	d301      	bcc.n	8002082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207e:	2301      	movs	r3, #1
 8002080:	e00f      	b.n	80020a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <SysTick_Config+0x40>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208a:	210f      	movs	r1, #15
 800208c:	f04f 30ff 	mov.w	r0, #4294967295
 8002090:	f7ff ff8e 	bl	8001fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <SysTick_Config+0x40>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <SysTick_Config+0x40>)
 800209c:	2207      	movs	r2, #7
 800209e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	e000e010 	.word	0xe000e010

080020b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff29 	bl	8001f10 <__NVIC_SetPriorityGrouping>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020d8:	f7ff ff3e 	bl	8001f58 <__NVIC_GetPriorityGrouping>
 80020dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	6978      	ldr	r0, [r7, #20]
 80020e4:	f7ff ff8e 	bl	8002004 <NVIC_EncodePriority>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff5d 	bl	8001fb0 <__NVIC_SetPriority>
}
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff31 	bl	8001f74 <__NVIC_EnableIRQ>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffa2 	bl	800206c <SysTick_Config>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002142:	e166      	b.n	8002412 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	4013      	ands	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8158 	beq.w	800240c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d00b      	beq.n	800217c <HAL_GPIO_Init+0x48>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d007      	beq.n	800217c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002170:	2b11      	cmp	r3, #17
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b12      	cmp	r3, #18
 800217a:	d130      	bne.n	80021de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021b2:	2201      	movs	r2, #1
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	f003 0201 	and.w	r2, r3, #1
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0xea>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b12      	cmp	r3, #18
 800221c:	d123      	bne.n	8002266 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	08da      	lsrs	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3208      	adds	r2, #8
 8002226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	220f      	movs	r2, #15
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0203 	and.w	r2, r3, #3
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80b2 	beq.w	800240c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a8:	4b61      	ldr	r3, [pc, #388]	; (8002430 <HAL_GPIO_Init+0x2fc>)
 80022aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ac:	4a60      	ldr	r2, [pc, #384]	; (8002430 <HAL_GPIO_Init+0x2fc>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6613      	str	r3, [r2, #96]	; 0x60
 80022b4:	4b5e      	ldr	r3, [pc, #376]	; (8002430 <HAL_GPIO_Init+0x2fc>)
 80022b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022c0:	4a5c      	ldr	r2, [pc, #368]	; (8002434 <HAL_GPIO_Init+0x300>)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022ea:	d02b      	beq.n	8002344 <HAL_GPIO_Init+0x210>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a52      	ldr	r2, [pc, #328]	; (8002438 <HAL_GPIO_Init+0x304>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d025      	beq.n	8002340 <HAL_GPIO_Init+0x20c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a51      	ldr	r2, [pc, #324]	; (800243c <HAL_GPIO_Init+0x308>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d01f      	beq.n	800233c <HAL_GPIO_Init+0x208>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a50      	ldr	r2, [pc, #320]	; (8002440 <HAL_GPIO_Init+0x30c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d019      	beq.n	8002338 <HAL_GPIO_Init+0x204>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a4f      	ldr	r2, [pc, #316]	; (8002444 <HAL_GPIO_Init+0x310>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <HAL_GPIO_Init+0x200>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a4e      	ldr	r2, [pc, #312]	; (8002448 <HAL_GPIO_Init+0x314>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00d      	beq.n	8002330 <HAL_GPIO_Init+0x1fc>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a4d      	ldr	r2, [pc, #308]	; (800244c <HAL_GPIO_Init+0x318>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <HAL_GPIO_Init+0x1f8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a4c      	ldr	r2, [pc, #304]	; (8002450 <HAL_GPIO_Init+0x31c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_GPIO_Init+0x1f4>
 8002324:	2307      	movs	r3, #7
 8002326:	e00e      	b.n	8002346 <HAL_GPIO_Init+0x212>
 8002328:	2308      	movs	r3, #8
 800232a:	e00c      	b.n	8002346 <HAL_GPIO_Init+0x212>
 800232c:	2306      	movs	r3, #6
 800232e:	e00a      	b.n	8002346 <HAL_GPIO_Init+0x212>
 8002330:	2305      	movs	r3, #5
 8002332:	e008      	b.n	8002346 <HAL_GPIO_Init+0x212>
 8002334:	2304      	movs	r3, #4
 8002336:	e006      	b.n	8002346 <HAL_GPIO_Init+0x212>
 8002338:	2303      	movs	r3, #3
 800233a:	e004      	b.n	8002346 <HAL_GPIO_Init+0x212>
 800233c:	2302      	movs	r3, #2
 800233e:	e002      	b.n	8002346 <HAL_GPIO_Init+0x212>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_GPIO_Init+0x212>
 8002344:	2300      	movs	r3, #0
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	f002 0203 	and.w	r2, r2, #3
 800234c:	0092      	lsls	r2, r2, #2
 800234e:	4093      	lsls	r3, r2
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002356:	4937      	ldr	r1, [pc, #220]	; (8002434 <HAL_GPIO_Init+0x300>)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002364:	4b3b      	ldr	r3, [pc, #236]	; (8002454 <HAL_GPIO_Init+0x320>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002388:	4a32      	ldr	r2, [pc, #200]	; (8002454 <HAL_GPIO_Init+0x320>)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800238e:	4b31      	ldr	r3, [pc, #196]	; (8002454 <HAL_GPIO_Init+0x320>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023b2:	4a28      	ldr	r2, [pc, #160]	; (8002454 <HAL_GPIO_Init+0x320>)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <HAL_GPIO_Init+0x320>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023dc:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <HAL_GPIO_Init+0x320>)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <HAL_GPIO_Init+0x320>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002406:	4a13      	ldr	r2, [pc, #76]	; (8002454 <HAL_GPIO_Init+0x320>)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	f47f ae91 	bne.w	8002144 <HAL_GPIO_Init+0x10>
  }
}
 8002422:	bf00      	nop
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	40010000 	.word	0x40010000
 8002438:	48000400 	.word	0x48000400
 800243c:	48000800 	.word	0x48000800
 8002440:	48000c00 	.word	0x48000c00
 8002444:	48001000 	.word	0x48001000
 8002448:	48001400 	.word	0x48001400
 800244c:	48001800 	.word	0x48001800
 8002450:	48001c00 	.word	0x48001c00
 8002454:	40010400 	.word	0x40010400

08002458 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002466:	e0c9      	b.n	80025fc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002468:	2201      	movs	r2, #1
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80bc 	beq.w	80025f6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800247e:	4a66      	ldr	r2, [pc, #408]	; (8002618 <HAL_GPIO_DeInit+0x1c0>)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3302      	adds	r3, #2
 8002486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	220f      	movs	r2, #15
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024a6:	d02b      	beq.n	8002500 <HAL_GPIO_DeInit+0xa8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a5c      	ldr	r2, [pc, #368]	; (800261c <HAL_GPIO_DeInit+0x1c4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d025      	beq.n	80024fc <HAL_GPIO_DeInit+0xa4>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a5b      	ldr	r2, [pc, #364]	; (8002620 <HAL_GPIO_DeInit+0x1c8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d01f      	beq.n	80024f8 <HAL_GPIO_DeInit+0xa0>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a5a      	ldr	r2, [pc, #360]	; (8002624 <HAL_GPIO_DeInit+0x1cc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d019      	beq.n	80024f4 <HAL_GPIO_DeInit+0x9c>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a59      	ldr	r2, [pc, #356]	; (8002628 <HAL_GPIO_DeInit+0x1d0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <HAL_GPIO_DeInit+0x98>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a58      	ldr	r2, [pc, #352]	; (800262c <HAL_GPIO_DeInit+0x1d4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00d      	beq.n	80024ec <HAL_GPIO_DeInit+0x94>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a57      	ldr	r2, [pc, #348]	; (8002630 <HAL_GPIO_DeInit+0x1d8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d007      	beq.n	80024e8 <HAL_GPIO_DeInit+0x90>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a56      	ldr	r2, [pc, #344]	; (8002634 <HAL_GPIO_DeInit+0x1dc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_GPIO_DeInit+0x8c>
 80024e0:	2307      	movs	r3, #7
 80024e2:	e00e      	b.n	8002502 <HAL_GPIO_DeInit+0xaa>
 80024e4:	2308      	movs	r3, #8
 80024e6:	e00c      	b.n	8002502 <HAL_GPIO_DeInit+0xaa>
 80024e8:	2306      	movs	r3, #6
 80024ea:	e00a      	b.n	8002502 <HAL_GPIO_DeInit+0xaa>
 80024ec:	2305      	movs	r3, #5
 80024ee:	e008      	b.n	8002502 <HAL_GPIO_DeInit+0xaa>
 80024f0:	2304      	movs	r3, #4
 80024f2:	e006      	b.n	8002502 <HAL_GPIO_DeInit+0xaa>
 80024f4:	2303      	movs	r3, #3
 80024f6:	e004      	b.n	8002502 <HAL_GPIO_DeInit+0xaa>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e002      	b.n	8002502 <HAL_GPIO_DeInit+0xaa>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_GPIO_DeInit+0xaa>
 8002500:	2300      	movs	r3, #0
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	f002 0203 	and.w	r2, r2, #3
 8002508:	0092      	lsls	r2, r2, #2
 800250a:	4093      	lsls	r3, r2
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	429a      	cmp	r2, r3
 8002510:	d132      	bne.n	8002578 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002512:	4b49      	ldr	r3, [pc, #292]	; (8002638 <HAL_GPIO_DeInit+0x1e0>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	43db      	mvns	r3, r3
 800251a:	4947      	ldr	r1, [pc, #284]	; (8002638 <HAL_GPIO_DeInit+0x1e0>)
 800251c:	4013      	ands	r3, r2
 800251e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002520:	4b45      	ldr	r3, [pc, #276]	; (8002638 <HAL_GPIO_DeInit+0x1e0>)
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	43db      	mvns	r3, r3
 8002528:	4943      	ldr	r1, [pc, #268]	; (8002638 <HAL_GPIO_DeInit+0x1e0>)
 800252a:	4013      	ands	r3, r2
 800252c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800252e:	4b42      	ldr	r3, [pc, #264]	; (8002638 <HAL_GPIO_DeInit+0x1e0>)
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	4940      	ldr	r1, [pc, #256]	; (8002638 <HAL_GPIO_DeInit+0x1e0>)
 8002538:	4013      	ands	r3, r2
 800253a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800253c:	4b3e      	ldr	r3, [pc, #248]	; (8002638 <HAL_GPIO_DeInit+0x1e0>)
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	43db      	mvns	r3, r3
 8002544:	493c      	ldr	r1, [pc, #240]	; (8002638 <HAL_GPIO_DeInit+0x1e0>)
 8002546:	4013      	ands	r3, r2
 8002548:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800255a:	4a2f      	ldr	r2, [pc, #188]	; (8002618 <HAL_GPIO_DeInit+0x1c0>)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	3302      	adds	r3, #2
 8002562:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	43da      	mvns	r2, r3
 800256a:	482b      	ldr	r0, [pc, #172]	; (8002618 <HAL_GPIO_DeInit+0x1c0>)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	400a      	ands	r2, r1
 8002572:	3302      	adds	r3, #2
 8002574:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2103      	movs	r1, #3
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	220f      	movs	r2, #15
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	08d2      	lsrs	r2, r2, #3
 80025ac:	4019      	ands	r1, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3208      	adds	r2, #8
 80025b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	2103      	movs	r1, #3
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	401a      	ands	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	2101      	movs	r1, #1
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	401a      	ands	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2103      	movs	r1, #3
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	401a      	ands	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	f47f af2f 	bne.w	8002468 <HAL_GPIO_DeInit+0x10>
  }
}
 800260a:	bf00      	nop
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40010000 	.word	0x40010000
 800261c:	48000400 	.word	0x48000400
 8002620:	48000800 	.word	0x48000800
 8002624:	48000c00 	.word	0x48000c00
 8002628:	48001000 	.word	0x48001000
 800262c:	48001400 	.word	0x48001400
 8002630:	48001800 	.word	0x48001800
 8002634:	48001c00 	.word	0x48001c00
 8002638:	40010400 	.word	0x40010400

0800263c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d006      	beq.n	8002660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fabc 	bl	8000bd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40010400 	.word	0x40010400

0800266c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e081      	b.n	8002782 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8a8 	bl	80027e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	; 0x24
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d107      	bne.n	80026e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	e006      	b.n	80026f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d104      	bne.n	8002706 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002704:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002718:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002728:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	ea42 0103 	orr.w	r1, r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	021a      	lsls	r2, r3, #8
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69d9      	ldr	r1, [r3, #28]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1a      	ldr	r2, [r3, #32]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e021      	b.n	80027e0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	; 0x24
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f821 	bl	80027fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	4608      	mov	r0, r1
 800281a:	4611      	mov	r1, r2
 800281c:	461a      	mov	r2, r3
 800281e:	4603      	mov	r3, r0
 8002820:	817b      	strh	r3, [r7, #10]
 8002822:	460b      	mov	r3, r1
 8002824:	813b      	strh	r3, [r7, #8]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b20      	cmp	r3, #32
 8002834:	f040 80f9 	bne.w	8002a2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_I2C_Mem_Write+0x34>
 800283e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800284a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0ed      	b.n	8002a2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_I2C_Mem_Write+0x4e>
 800285a:	2302      	movs	r3, #2
 800285c:	e0e6      	b.n	8002a2c <HAL_I2C_Mem_Write+0x21c>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002866:	f7ff fb47 	bl	8001ef8 <HAL_GetTick>
 800286a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2319      	movs	r3, #25
 8002872:	2201      	movs	r2, #1
 8002874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 fadd 	bl	8002e38 <I2C_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0d1      	b.n	8002a2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2221      	movs	r2, #33	; 0x21
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2240      	movs	r2, #64	; 0x40
 8002894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a3a      	ldr	r2, [r7, #32]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028b0:	88f8      	ldrh	r0, [r7, #6]
 80028b2:	893a      	ldrh	r2, [r7, #8]
 80028b4:	8979      	ldrh	r1, [r7, #10]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	4603      	mov	r3, r0
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f9ed 	bl	8002ca0 <I2C_RequestMemoryWrite>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0a9      	b.n	8002a2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2bff      	cmp	r3, #255	; 0xff
 80028e0:	d90e      	bls.n	8002900 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	22ff      	movs	r2, #255	; 0xff
 80028e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	8979      	ldrh	r1, [r7, #10]
 80028f0:	2300      	movs	r3, #0
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fbbf 	bl	800307c <I2C_TransferConfig>
 80028fe:	e00f      	b.n	8002920 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290e:	b2da      	uxtb	r2, r3
 8002910:	8979      	ldrh	r1, [r7, #10]
 8002912:	2300      	movs	r3, #0
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fbae 	bl	800307c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fac7 	bl	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e07b      	b.n	8002a2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d034      	beq.n	80029d8 <HAL_I2C_Mem_Write+0x1c8>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	2b00      	cmp	r3, #0
 8002974:	d130      	bne.n	80029d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	2200      	movs	r2, #0
 800297e:	2180      	movs	r1, #128	; 0x80
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fa59 	bl	8002e38 <I2C_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e04d      	b.n	8002a2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	2bff      	cmp	r3, #255	; 0xff
 8002998:	d90e      	bls.n	80029b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	22ff      	movs	r2, #255	; 0xff
 800299e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	8979      	ldrh	r1, [r7, #10]
 80029a8:	2300      	movs	r3, #0
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fb63 	bl	800307c <I2C_TransferConfig>
 80029b6:	e00f      	b.n	80029d8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	8979      	ldrh	r1, [r7, #10]
 80029ca:	2300      	movs	r3, #0
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 fb52 	bl	800307c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d19e      	bne.n	8002920 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 faa6 	bl	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e01a      	b.n	8002a2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2220      	movs	r2, #32
 80029fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <HAL_I2C_Mem_Write+0x224>)
 8002a0a:	400b      	ands	r3, r1
 8002a0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2220      	movs	r2, #32
 8002a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e000      	b.n	8002a2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a2a:	2302      	movs	r3, #2
  }
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	fe00e800 	.word	0xfe00e800

08002a38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	817b      	strh	r3, [r7, #10]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	813b      	strh	r3, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	f040 80fd 	bne.w	8002c5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_I2C_Mem_Read+0x34>
 8002a66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d105      	bne.n	8002a78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0f1      	b.n	8002c5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_I2C_Mem_Read+0x4e>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e0ea      	b.n	8002c5c <HAL_I2C_Mem_Read+0x224>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a8e:	f7ff fa33 	bl	8001ef8 <HAL_GetTick>
 8002a92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2319      	movs	r3, #25
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f9c9 	bl	8002e38 <I2C_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0d5      	b.n	8002c5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2222      	movs	r2, #34	; 0x22
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2240      	movs	r2, #64	; 0x40
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a3a      	ldr	r2, [r7, #32]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ad8:	88f8      	ldrh	r0, [r7, #6]
 8002ada:	893a      	ldrh	r2, [r7, #8]
 8002adc:	8979      	ldrh	r1, [r7, #10]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f92d 	bl	8002d48 <I2C_RequestMemoryRead>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0ad      	b.n	8002c5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2bff      	cmp	r3, #255	; 0xff
 8002b08:	d90e      	bls.n	8002b28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	22ff      	movs	r2, #255	; 0xff
 8002b0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	8979      	ldrh	r1, [r7, #10]
 8002b18:	4b52      	ldr	r3, [pc, #328]	; (8002c64 <HAL_I2C_Mem_Read+0x22c>)
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 faab 	bl	800307c <I2C_TransferConfig>
 8002b26:	e00f      	b.n	8002b48 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	8979      	ldrh	r1, [r7, #10]
 8002b3a:	4b4a      	ldr	r3, [pc, #296]	; (8002c64 <HAL_I2C_Mem_Read+0x22c>)
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fa9a 	bl	800307c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2104      	movs	r1, #4
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f970 	bl	8002e38 <I2C_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07c      	b.n	8002c5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d034      	beq.n	8002c08 <HAL_I2C_Mem_Read+0x1d0>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d130      	bne.n	8002c08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	2200      	movs	r2, #0
 8002bae:	2180      	movs	r1, #128	; 0x80
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f941 	bl	8002e38 <I2C_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e04d      	b.n	8002c5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2bff      	cmp	r3, #255	; 0xff
 8002bc8:	d90e      	bls.n	8002be8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	22ff      	movs	r2, #255	; 0xff
 8002bce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	8979      	ldrh	r1, [r7, #10]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fa4b 	bl	800307c <I2C_TransferConfig>
 8002be6:	e00f      	b.n	8002c08 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	8979      	ldrh	r1, [r7, #10]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 fa3a 	bl	800307c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d19a      	bne.n	8002b48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f98e 	bl	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e01a      	b.n	8002c5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_I2C_Mem_Read+0x230>)
 8002c3a:	400b      	ands	r3, r1
 8002c3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e000      	b.n	8002c5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
  }
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	80002400 	.word	0x80002400
 8002c68:	fe00e800 	.word	0xfe00e800

08002c6c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7a:	b2db      	uxtb	r3, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	4608      	mov	r0, r1
 8002caa:	4611      	mov	r1, r2
 8002cac:	461a      	mov	r2, r3
 8002cae:	4603      	mov	r3, r0
 8002cb0:	817b      	strh	r3, [r7, #10]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	813b      	strh	r3, [r7, #8]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	8979      	ldrh	r1, [r7, #10]
 8002cc0:	4b20      	ldr	r3, [pc, #128]	; (8002d44 <I2C_RequestMemoryWrite+0xa4>)
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f9d7 	bl	800307c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	69b9      	ldr	r1, [r7, #24]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f8f0 	bl	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e02c      	b.n	8002d3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce8:	893b      	ldrh	r3, [r7, #8]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	629a      	str	r2, [r3, #40]	; 0x28
 8002cf2:	e015      	b.n	8002d20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cf4:	893b      	ldrh	r3, [r7, #8]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	69b9      	ldr	r1, [r7, #24]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f8d6 	bl	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e012      	b.n	8002d3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d16:	893b      	ldrh	r3, [r7, #8]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2200      	movs	r2, #0
 8002d28:	2180      	movs	r1, #128	; 0x80
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f884 	bl	8002e38 <I2C_WaitOnFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	80002000 	.word	0x80002000

08002d48 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	4608      	mov	r0, r1
 8002d52:	4611      	mov	r1, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	817b      	strh	r3, [r7, #10]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	813b      	strh	r3, [r7, #8]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	8979      	ldrh	r1, [r7, #10]
 8002d68:	4b20      	ldr	r3, [pc, #128]	; (8002dec <I2C_RequestMemoryRead+0xa4>)
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f984 	bl	800307c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	69b9      	ldr	r1, [r7, #24]
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f89d 	bl	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e02c      	b.n	8002de2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d105      	bne.n	8002d9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d8e:	893b      	ldrh	r3, [r7, #8]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
 8002d98:	e015      	b.n	8002dc6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d9a:	893b      	ldrh	r3, [r7, #8]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	69b9      	ldr	r1, [r7, #24]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f883 	bl	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e012      	b.n	8002de2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dbc:	893b      	ldrh	r3, [r7, #8]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2140      	movs	r1, #64	; 0x40
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f831 	bl	8002e38 <I2C_WaitOnFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	80002000 	.word	0x80002000

08002df0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d103      	bne.n	8002e0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d007      	beq.n	8002e2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	619a      	str	r2, [r3, #24]
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e48:	e022      	b.n	8002e90 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e50:	d01e      	beq.n	8002e90 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e52:	f7ff f851 	bl	8001ef8 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d302      	bcc.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d113      	bne.n	8002e90 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e00f      	b.n	8002eb0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d0cd      	beq.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ec4:	e02c      	b.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f870 	bl	8002fb0 <I2C_IsAcknowledgeFailed>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e02a      	b.n	8002f30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d01e      	beq.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee2:	f7ff f809 	bl	8001ef8 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d302      	bcc.n	8002ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d113      	bne.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e007      	b.n	8002f30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d1cb      	bne.n	8002ec6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f44:	e028      	b.n	8002f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f830 	bl	8002fb0 <I2C_IsAcknowledgeFailed>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e026      	b.n	8002fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	f7fe ffcd 	bl	8001ef8 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d113      	bne.n	8002f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	f043 0220 	orr.w	r2, r3, #32
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e007      	b.n	8002fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d1cf      	bne.n	8002f46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	d151      	bne.n	800306e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fca:	e022      	b.n	8003012 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd2:	d01e      	beq.n	8003012 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd4:	f7fe ff90 	bl	8001ef8 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d302      	bcc.n	8002fea <I2C_IsAcknowledgeFailed+0x3a>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d113      	bne.n	8003012 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f043 0220 	orr.w	r2, r3, #32
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e02e      	b.n	8003070 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b20      	cmp	r3, #32
 800301e:	d1d5      	bne.n	8002fcc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2210      	movs	r2, #16
 8003026:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2220      	movs	r2, #32
 800302e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7ff fedd 	bl	8002df0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <I2C_IsAcknowledgeFailed+0xc8>)
 8003042:	400b      	ands	r3, r1
 8003044:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f043 0204 	orr.w	r2, r3, #4
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	fe00e800 	.word	0xfe00e800

0800307c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	460b      	mov	r3, r1
 8003088:	817b      	strh	r3, [r7, #10]
 800308a:	4613      	mov	r3, r2
 800308c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	0d5b      	lsrs	r3, r3, #21
 8003098:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800309c:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <I2C_TransferConfig+0x58>)
 800309e:	430b      	orrs	r3, r1
 80030a0:	43db      	mvns	r3, r3
 80030a2:	ea02 0103 	and.w	r1, r2, r3
 80030a6:	897b      	ldrh	r3, [r7, #10]
 80030a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030ac:	7a7b      	ldrb	r3, [r7, #9]
 80030ae:	041b      	lsls	r3, r3, #16
 80030b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	431a      	orrs	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	03ff63ff 	.word	0x03ff63ff

080030d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d138      	bne.n	8003160 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e032      	b.n	8003162 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2224      	movs	r2, #36	; 0x24
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800312a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b20      	cmp	r3, #32
 8003182:	d139      	bne.n	80031f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800318e:	2302      	movs	r3, #2
 8003190:	e033      	b.n	80031fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2224      	movs	r2, #36	; 0x24
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e000      	b.n	80031fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031f8:	2302      	movs	r3, #2
  }
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800320c:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <HAL_PWREx_GetVoltageRange+0x3c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003218:	d102      	bne.n	8003220 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800321a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800321e:	e00b      	b.n	8003238 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003220:	4b08      	ldr	r3, [pc, #32]	; (8003244 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800322e:	d102      	bne.n	8003236 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003234:	e000      	b.n	8003238 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003236:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40007000 	.word	0x40007000

08003248 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d141      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003256:	4b4b      	ldr	r3, [pc, #300]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800325e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003262:	d131      	bne.n	80032c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003264:	4b47      	ldr	r3, [pc, #284]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800326a:	4a46      	ldr	r2, [pc, #280]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003270:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003274:	4b43      	ldr	r3, [pc, #268]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800327c:	4a41      	ldr	r2, [pc, #260]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003282:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003284:	4b40      	ldr	r3, [pc, #256]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2232      	movs	r2, #50	; 0x32
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	4a3f      	ldr	r2, [pc, #252]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	0c9b      	lsrs	r3, r3, #18
 8003296:	3301      	adds	r3, #1
 8003298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329a:	e002      	b.n	80032a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3b01      	subs	r3, #1
 80032a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a2:	4b38      	ldr	r3, [pc, #224]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ae:	d102      	bne.n	80032b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f2      	bne.n	800329c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032b6:	4b33      	ldr	r3, [pc, #204]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c2:	d158      	bne.n	8003376 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e057      	b.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c8:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ce:	4a2d      	ldr	r2, [pc, #180]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032d8:	e04d      	b.n	8003376 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e0:	d141      	bne.n	8003366 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032e2:	4b28      	ldr	r3, [pc, #160]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ee:	d131      	bne.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032f0:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f6:	4a23      	ldr	r2, [pc, #140]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003300:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003308:	4a1e      	ldr	r2, [pc, #120]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800330e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003310:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2232      	movs	r2, #50	; 0x32
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	4a1c      	ldr	r2, [pc, #112]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	0c9b      	lsrs	r3, r3, #18
 8003322:	3301      	adds	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003326:	e002      	b.n	800332e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3b01      	subs	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332e:	4b15      	ldr	r3, [pc, #84]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333a:	d102      	bne.n	8003342 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f2      	bne.n	8003328 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334e:	d112      	bne.n	8003376 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e011      	b.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003360:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003364:	e007      	b.n	8003376 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003370:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003374:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40007000 	.word	0x40007000
 8003388:	20000000 	.word	0x20000000
 800338c:	431bde83 	.word	0x431bde83

08003390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d102      	bne.n	80033a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f000 bc16 	b.w	8003bd0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a4:	4ba0      	ldr	r3, [pc, #640]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ae:	4b9e      	ldr	r3, [pc, #632]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80e4 	beq.w	800358e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <HAL_RCC_OscConfig+0x4c>
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2b0c      	cmp	r3, #12
 80033d0:	f040 808b 	bne.w	80034ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	f040 8087 	bne.w	80034ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033dc:	4b92      	ldr	r3, [pc, #584]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_OscConfig+0x64>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e3ed      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1a      	ldr	r2, [r3, #32]
 80033f8:	4b8b      	ldr	r3, [pc, #556]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <HAL_RCC_OscConfig+0x7e>
 8003404:	4b88      	ldr	r3, [pc, #544]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800340c:	e005      	b.n	800341a <HAL_RCC_OscConfig+0x8a>
 800340e:	4b86      	ldr	r3, [pc, #536]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800341a:	4293      	cmp	r3, r2
 800341c:	d223      	bcs.n	8003466 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fdc8 	bl	8003fb8 <RCC_SetFlashLatencyFromMSIRange>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e3ce      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003432:	4b7d      	ldr	r3, [pc, #500]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a7c      	ldr	r2, [pc, #496]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003438:	f043 0308 	orr.w	r3, r3, #8
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b7a      	ldr	r3, [pc, #488]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4977      	ldr	r1, [pc, #476]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003450:	4b75      	ldr	r3, [pc, #468]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	4972      	ldr	r1, [pc, #456]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003460:	4313      	orrs	r3, r2
 8003462:	604b      	str	r3, [r1, #4]
 8003464:	e025      	b.n	80034b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003466:	4b70      	ldr	r3, [pc, #448]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6f      	ldr	r2, [pc, #444]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 800346c:	f043 0308 	orr.w	r3, r3, #8
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	4b6d      	ldr	r3, [pc, #436]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	496a      	ldr	r1, [pc, #424]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003484:	4b68      	ldr	r3, [pc, #416]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	4965      	ldr	r1, [pc, #404]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fd88 	bl	8003fb8 <RCC_SetFlashLatencyFromMSIRange>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e38e      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034b2:	f000 fcbf 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 80034b6:	4601      	mov	r1, r0
 80034b8:	4b5b      	ldr	r3, [pc, #364]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	4a5a      	ldr	r2, [pc, #360]	; (800362c <HAL_RCC_OscConfig+0x29c>)
 80034c4:	5cd3      	ldrb	r3, [r2, r3]
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	fa21 f303 	lsr.w	r3, r1, r3
 80034ce:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_RCC_OscConfig+0x2a0>)
 80034d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034d2:	4b58      	ldr	r3, [pc, #352]	; (8003634 <HAL_RCC_OscConfig+0x2a4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fcbe 	bl	8001e58 <HAL_InitTick>
 80034dc:	4603      	mov	r3, r0
 80034de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d052      	beq.n	800358c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
 80034e8:	e372      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d032      	beq.n	8003558 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034f2:	4b4d      	ldr	r3, [pc, #308]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a4c      	ldr	r2, [pc, #304]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034fe:	f7fe fcfb 	bl	8001ef8 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003506:	f7fe fcf7 	bl	8001ef8 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e35b      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003518:	4b43      	ldr	r3, [pc, #268]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003524:	4b40      	ldr	r3, [pc, #256]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a3f      	ldr	r2, [pc, #252]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 800352a:	f043 0308 	orr.w	r3, r3, #8
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b3d      	ldr	r3, [pc, #244]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	493a      	ldr	r1, [pc, #232]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003542:	4b39      	ldr	r3, [pc, #228]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	4935      	ldr	r1, [pc, #212]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]
 8003556:	e01a      	b.n	800358e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003558:	4b33      	ldr	r3, [pc, #204]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a32      	ldr	r2, [pc, #200]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003564:	f7fe fcc8 	bl	8001ef8 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800356c:	f7fe fcc4 	bl	8001ef8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e328      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800357e:	4b2a      	ldr	r3, [pc, #168]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x1dc>
 800358a:	e000      	b.n	800358e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800358c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d073      	beq.n	8003682 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d005      	beq.n	80035ac <HAL_RCC_OscConfig+0x21c>
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b0c      	cmp	r3, #12
 80035a4:	d10e      	bne.n	80035c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d10b      	bne.n	80035c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ac:	4b1e      	ldr	r3, [pc, #120]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d063      	beq.n	8003680 <HAL_RCC_OscConfig+0x2f0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d15f      	bne.n	8003680 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e305      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035cc:	d106      	bne.n	80035dc <HAL_RCC_OscConfig+0x24c>
 80035ce:	4b16      	ldr	r3, [pc, #88]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a15      	ldr	r2, [pc, #84]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e01d      	b.n	8003618 <HAL_RCC_OscConfig+0x288>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0x270>
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a0f      	ldr	r2, [pc, #60]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 80035ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a0c      	ldr	r2, [pc, #48]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e00b      	b.n	8003618 <HAL_RCC_OscConfig+0x288>
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a08      	ldr	r2, [pc, #32]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a05      	ldr	r2, [pc, #20]	; (8003628 <HAL_RCC_OscConfig+0x298>)
 8003612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01b      	beq.n	8003658 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fe fc6a 	bl	8001ef8 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003626:	e010      	b.n	800364a <HAL_RCC_OscConfig+0x2ba>
 8003628:	40021000 	.word	0x40021000
 800362c:	080067d8 	.word	0x080067d8
 8003630:	20000000 	.word	0x20000000
 8003634:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe fc5e 	bl	8001ef8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e2c2      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364a:	4baf      	ldr	r3, [pc, #700]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0x2a8>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe fc4e 	bl	8001ef8 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003660:	f7fe fc4a 	bl	8001ef8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e2ae      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003672:	4ba5      	ldr	r3, [pc, #660]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x2d0>
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d060      	beq.n	8003750 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b04      	cmp	r3, #4
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_OscConfig+0x310>
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d119      	bne.n	80036ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d116      	bne.n	80036ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a0:	4b99      	ldr	r3, [pc, #612]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_OscConfig+0x328>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e28b      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	4b93      	ldr	r3, [pc, #588]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	4990      	ldr	r1, [pc, #576]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036cc:	e040      	b.n	8003750 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d023      	beq.n	800371e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d6:	4b8c      	ldr	r3, [pc, #560]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a8b      	ldr	r2, [pc, #556]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fe fc09 	bl	8001ef8 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ea:	f7fe fc05 	bl	8001ef8 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e269      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036fc:	4b82      	ldr	r3, [pc, #520]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003708:	4b7f      	ldr	r3, [pc, #508]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	061b      	lsls	r3, r3, #24
 8003716:	497c      	ldr	r1, [pc, #496]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]
 800371c:	e018      	b.n	8003750 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800371e:	4b7a      	ldr	r3, [pc, #488]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a79      	ldr	r2, [pc, #484]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 8003724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fe fbe5 	bl	8001ef8 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003732:	f7fe fbe1 	bl	8001ef8 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e245      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003744:	4b70      	ldr	r3, [pc, #448]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f0      	bne.n	8003732 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d03c      	beq.n	80037d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01c      	beq.n	800379e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003764:	4b68      	ldr	r3, [pc, #416]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376a:	4a67      	ldr	r2, [pc, #412]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fe fbc0 	bl	8001ef8 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377c:	f7fe fbbc 	bl	8001ef8 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e220      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800378e:	4b5e      	ldr	r3, [pc, #376]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 8003790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ef      	beq.n	800377c <HAL_RCC_OscConfig+0x3ec>
 800379c:	e01b      	b.n	80037d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379e:	4b5a      	ldr	r3, [pc, #360]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80037a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a4:	4a58      	ldr	r2, [pc, #352]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7fe fba3 	bl	8001ef8 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b6:	f7fe fb9f 	bl	8001ef8 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e203      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c8:	4b4f      	ldr	r3, [pc, #316]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80037ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1ef      	bne.n	80037b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80a6 	beq.w	8003930 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e4:	2300      	movs	r3, #0
 80037e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037e8:	4b47      	ldr	r3, [pc, #284]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80037ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10d      	bne.n	8003810 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	4b44      	ldr	r3, [pc, #272]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f8:	4a43      	ldr	r2, [pc, #268]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003800:	4b41      	ldr	r3, [pc, #260]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380c:	2301      	movs	r3, #1
 800380e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003810:	4b3e      	ldr	r3, [pc, #248]	; (800390c <HAL_RCC_OscConfig+0x57c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d118      	bne.n	800384e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800381c:	4b3b      	ldr	r3, [pc, #236]	; (800390c <HAL_RCC_OscConfig+0x57c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a3a      	ldr	r2, [pc, #232]	; (800390c <HAL_RCC_OscConfig+0x57c>)
 8003822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003826:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003828:	f7fe fb66 	bl	8001ef8 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003830:	f7fe fb62 	bl	8001ef8 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e1c6      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003842:	4b32      	ldr	r3, [pc, #200]	; (800390c <HAL_RCC_OscConfig+0x57c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d108      	bne.n	8003868 <HAL_RCC_OscConfig+0x4d8>
 8003856:	4b2c      	ldr	r3, [pc, #176]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385c:	4a2a      	ldr	r2, [pc, #168]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003866:	e024      	b.n	80038b2 <HAL_RCC_OscConfig+0x522>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b05      	cmp	r3, #5
 800386e:	d110      	bne.n	8003892 <HAL_RCC_OscConfig+0x502>
 8003870:	4b25      	ldr	r3, [pc, #148]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	4a24      	ldr	r2, [pc, #144]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003880:	4b21      	ldr	r3, [pc, #132]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	4a20      	ldr	r2, [pc, #128]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003890:	e00f      	b.n	80038b2 <HAL_RCC_OscConfig+0x522>
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a2:	4b19      	ldr	r3, [pc, #100]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	4a17      	ldr	r2, [pc, #92]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80038aa:	f023 0304 	bic.w	r3, r3, #4
 80038ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d016      	beq.n	80038e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ba:	f7fe fb1d 	bl	8001ef8 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c2:	f7fe fb19 	bl	8001ef8 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e17b      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_OscConfig+0x578>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0ed      	beq.n	80038c2 <HAL_RCC_OscConfig+0x532>
 80038e6:	e01a      	b.n	800391e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e8:	f7fe fb06 	bl	8001ef8 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ee:	e00f      	b.n	8003910 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f0:	f7fe fb02 	bl	8001ef8 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d906      	bls.n	8003910 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e164      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000
 800390c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003910:	4ba8      	ldr	r3, [pc, #672]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e8      	bne.n	80038f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800391e:	7ffb      	ldrb	r3, [r7, #31]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003924:	4ba3      	ldr	r3, [pc, #652]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	4aa2      	ldr	r2, [pc, #648]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 800392a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d03c      	beq.n	80039b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01c      	beq.n	800397e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003944:	4b9b      	ldr	r3, [pc, #620]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800394a:	4a9a      	ldr	r2, [pc, #616]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003954:	f7fe fad0 	bl	8001ef8 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800395c:	f7fe facc 	bl	8001ef8 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e130      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800396e:	4b91      	ldr	r3, [pc, #580]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ef      	beq.n	800395c <HAL_RCC_OscConfig+0x5cc>
 800397c:	e01b      	b.n	80039b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800397e:	4b8d      	ldr	r3, [pc, #564]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003984:	4a8b      	ldr	r2, [pc, #556]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fe fab3 	bl	8001ef8 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003996:	f7fe faaf 	bl	8001ef8 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e113      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039a8:	4b82      	ldr	r3, [pc, #520]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 80039aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1ef      	bne.n	8003996 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8107 	beq.w	8003bce <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	f040 80cb 	bne.w	8003b60 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039ca:	4b7a      	ldr	r3, [pc, #488]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f003 0203 	and.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	429a      	cmp	r2, r3
 80039dc:	d12c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	3b01      	subs	r3, #1
 80039ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d123      	bne.n	8003a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d11b      	bne.n	8003a38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d113      	bne.n	8003a38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d109      	bne.n	8003a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	3b01      	subs	r3, #1
 8003a32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d06d      	beq.n	8003b14 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d068      	beq.n	8003b10 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a3e:	4b5d      	ldr	r3, [pc, #372]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d105      	bne.n	8003a56 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a4a:	4b5a      	ldr	r3, [pc, #360]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0ba      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a5a:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a55      	ldr	r2, [pc, #340]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003a60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a66:	f7fe fa47 	bl	8001ef8 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6e:	f7fe fa43 	bl	8001ef8 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e0a7      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a80:	4b4c      	ldr	r3, [pc, #304]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1f0      	bne.n	8003a6e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a8c:	4b49      	ldr	r3, [pc, #292]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	4b49      	ldr	r3, [pc, #292]	; (8003bb8 <HAL_RCC_OscConfig+0x828>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a9c:	3a01      	subs	r2, #1
 8003a9e:	0112      	lsls	r2, r2, #4
 8003aa0:	4311      	orrs	r1, r2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003aa6:	0212      	lsls	r2, r2, #8
 8003aa8:	4311      	orrs	r1, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003aae:	0852      	lsrs	r2, r2, #1
 8003ab0:	3a01      	subs	r2, #1
 8003ab2:	0552      	lsls	r2, r2, #21
 8003ab4:	4311      	orrs	r1, r2
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003aba:	0852      	lsrs	r2, r2, #1
 8003abc:	3a01      	subs	r2, #1
 8003abe:	0652      	lsls	r2, r2, #25
 8003ac0:	4311      	orrs	r1, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ac6:	06d2      	lsls	r2, r2, #27
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	493a      	ldr	r1, [pc, #232]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ad0:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a37      	ldr	r2, [pc, #220]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ada:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003adc:	4b35      	ldr	r3, [pc, #212]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4a34      	ldr	r2, [pc, #208]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ae6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ae8:	f7fe fa06 	bl	8001ef8 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af0:	f7fe fa02 	bl	8001ef8 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e066      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b02:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b0e:	e05e      	b.n	8003bce <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e05d      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b14:	4b27      	ldr	r3, [pc, #156]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d156      	bne.n	8003bce <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b20:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a23      	ldr	r2, [pc, #140]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b2c:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a20      	ldr	r2, [pc, #128]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b38:	f7fe f9de 	bl	8001ef8 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fe f9da 	bl	8001ef8 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e03e      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b52:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0x7b0>
 8003b5e:	e036      	b.n	8003bce <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d031      	beq.n	8003bca <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003b6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b70:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d105      	bne.n	8003b8a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	4a0c      	ldr	r2, [pc, #48]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003b84:	f023 0303 	bic.w	r3, r3, #3
 8003b88:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <HAL_RCC_OscConfig+0x824>)
 8003b90:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b98:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9a:	f7fe f9ad 	bl	8001ef8 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ba0:	e00c      	b.n	8003bbc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba2:	f7fe f9a9 	bl	8001ef8 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d905      	bls.n	8003bbc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e00d      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_RCC_OscConfig+0x848>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1ec      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x812>
 8003bc8:	e001      	b.n	8003bce <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3720      	adds	r7, #32
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000

08003bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e10f      	b.n	8003e14 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b89      	ldr	r3, [pc, #548]	; (8003e1c <HAL_RCC_ClockConfig+0x240>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d910      	bls.n	8003c24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b86      	ldr	r3, [pc, #536]	; (8003e1c <HAL_RCC_ClockConfig+0x240>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 020f 	bic.w	r2, r3, #15
 8003c0a:	4984      	ldr	r1, [pc, #528]	; (8003e1c <HAL_RCC_ClockConfig+0x240>)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c12:	4b82      	ldr	r3, [pc, #520]	; (8003e1c <HAL_RCC_ClockConfig+0x240>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0f7      	b.n	8003e14 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8089 	beq.w	8003d44 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d133      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3a:	4b79      	ldr	r3, [pc, #484]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e0e4      	b.n	8003e14 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003c4a:	f000 fa0f 	bl	800406c <RCC_GetSysClockFreqFromPLLSource>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	4b74      	ldr	r3, [pc, #464]	; (8003e24 <HAL_RCC_ClockConfig+0x248>)
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d955      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c56:	4b72      	ldr	r3, [pc, #456]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c62:	4b6f      	ldr	r3, [pc, #444]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c6a:	4a6d      	ldr	r2, [pc, #436]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c72:	2380      	movs	r3, #128	; 0x80
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	e044      	b.n	8003d02 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d03e      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x126>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d13a      	bne.n	8003d02 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c8c:	4b64      	ldr	r3, [pc, #400]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c94:	4a62      	ldr	r2, [pc, #392]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	e02f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003caa:	4b5d      	ldr	r3, [pc, #372]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d115      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e0ac      	b.n	8003e14 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d107      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cc2:	4b57      	ldr	r3, [pc, #348]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e0a0      	b.n	8003e14 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd2:	4b53      	ldr	r3, [pc, #332]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e098      	b.n	8003e14 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003ce2:	f000 f8a7 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	4b4e      	ldr	r3, [pc, #312]	; (8003e24 <HAL_RCC_ClockConfig+0x248>)
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d909      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cee:	4b4c      	ldr	r3, [pc, #304]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cf6:	4a4a      	ldr	r2, [pc, #296]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d02:	4b47      	ldr	r3, [pc, #284]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f023 0203 	bic.w	r2, r3, #3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	4944      	ldr	r1, [pc, #272]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d14:	f7fe f8f0 	bl	8001ef8 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1a:	e00a      	b.n	8003d32 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d1c:	f7fe f8ec 	bl	8001ef8 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e070      	b.n	8003e14 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d32:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 020c 	and.w	r2, r3, #12
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d1eb      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d50:	4b33      	ldr	r3, [pc, #204]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4930      	ldr	r1, [pc, #192]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	608b      	str	r3, [r1, #8]
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b80      	cmp	r3, #128	; 0x80
 8003d68:	d105      	bne.n	8003d76 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d6a:	4b2d      	ldr	r3, [pc, #180]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	4a2c      	ldr	r2, [pc, #176]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003d70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d74:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d76:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <HAL_RCC_ClockConfig+0x240>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d210      	bcs.n	8003da6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <HAL_RCC_ClockConfig+0x240>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f023 020f 	bic.w	r2, r3, #15
 8003d8c:	4923      	ldr	r1, [pc, #140]	; (8003e1c <HAL_RCC_ClockConfig+0x240>)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d94:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <HAL_RCC_ClockConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e036      	b.n	8003e14 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db2:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	4918      	ldr	r1, [pc, #96]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d009      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd0:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4910      	ldr	r1, [pc, #64]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003de4:	f000 f826 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8003de8:	4601      	mov	r1, r0
 8003dea:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <HAL_RCC_ClockConfig+0x244>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <HAL_RCC_ClockConfig+0x24c>)
 8003df6:	5cd3      	ldrb	r3, [r2, r3]
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8003e00:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <HAL_RCC_ClockConfig+0x250>)
 8003e02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e04:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <HAL_RCC_ClockConfig+0x254>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe f825 	bl	8001e58 <HAL_InitTick>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	73fb      	strb	r3, [r7, #15]

  return status;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40022000 	.word	0x40022000
 8003e20:	40021000 	.word	0x40021000
 8003e24:	04c4b400 	.word	0x04c4b400
 8003e28:	080067d8 	.word	0x080067d8
 8003e2c:	20000000 	.word	0x20000000
 8003e30:	20000004 	.word	0x20000004

08003e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b089      	sub	sp, #36	; 0x24
 8003e38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e42:	4b3d      	ldr	r3, [pc, #244]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e4c:	4b3a      	ldr	r3, [pc, #232]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0x34>
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b0c      	cmp	r3, #12
 8003e60:	d121      	bne.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d11e      	bne.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e68:	4b33      	ldr	r3, [pc, #204]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e74:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e7a:	0a1b      	lsrs	r3, r3, #8
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	e005      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e84:	4b2c      	ldr	r3, [pc, #176]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e90:	4a2a      	ldr	r2, [pc, #168]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10d      	bne.n	8003ebc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d102      	bne.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eac:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	e004      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003eb8:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	d133      	bne.n	8003f2a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d002      	beq.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xa4>
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d003      	beq.n	8003ede <HAL_RCC_GetSysClockFreq+0xaa>
 8003ed6:	e005      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ed8:	4b19      	ldr	r3, [pc, #100]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eda:	617b      	str	r3, [r7, #20]
      break;
 8003edc:	e005      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ede:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ee0:	617b      	str	r3, [r7, #20]
      break;
 8003ee2:	e002      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	617b      	str	r3, [r7, #20]
      break;
 8003ee8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eea:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	091b      	lsrs	r3, r3, #4
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	fb02 f203 	mul.w	r2, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	0e5b      	lsrs	r3, r3, #25
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3724      	adds	r7, #36	; 0x24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	080067f0 	.word	0x080067f0
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	007a1200 	.word	0x007a1200

08003f48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000000 	.word	0x20000000

08003f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f64:	f7ff fff0 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f68:	4601      	mov	r1, r0
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0a1b      	lsrs	r3, r3, #8
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f76:	5cd3      	ldrb	r3, [r2, r3]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	080067e8 	.word	0x080067e8

08003f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f90:	f7ff ffda 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f94:	4601      	mov	r1, r0
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	0adb      	lsrs	r3, r3, #11
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fa2:	5cd3      	ldrb	r3, [r2, r3]
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	080067e8 	.word	0x080067e8

08003fb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fc4:	4b27      	ldr	r3, [pc, #156]	; (8004064 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fd0:	f7ff f91a 	bl	8003208 <HAL_PWREx_GetVoltageRange>
 8003fd4:	6178      	str	r0, [r7, #20]
 8003fd6:	e014      	b.n	8004002 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fd8:	4b22      	ldr	r3, [pc, #136]	; (8004064 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	4a21      	ldr	r2, [pc, #132]	; (8004064 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe4:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ff0:	f7ff f90a 	bl	8003208 <HAL_PWREx_GetVoltageRange>
 8003ff4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ff6:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	4a1a      	ldr	r2, [pc, #104]	; (8004064 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004000:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004008:	d10b      	bne.n	8004022 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b80      	cmp	r3, #128	; 0x80
 800400e:	d913      	bls.n	8004038 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2ba0      	cmp	r3, #160	; 0xa0
 8004014:	d902      	bls.n	800401c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004016:	2302      	movs	r3, #2
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	e00d      	b.n	8004038 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800401c:	2301      	movs	r3, #1
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	e00a      	b.n	8004038 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b7f      	cmp	r3, #127	; 0x7f
 8004026:	d902      	bls.n	800402e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004028:	2302      	movs	r3, #2
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	e004      	b.n	8004038 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b70      	cmp	r3, #112	; 0x70
 8004032:	d101      	bne.n	8004038 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004034:	2301      	movs	r3, #1
 8004036:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f023 020f 	bic.w	r2, r3, #15
 8004040:	4909      	ldr	r1, [pc, #36]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004048:	4b07      	ldr	r3, [pc, #28]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	429a      	cmp	r2, r3
 8004054:	d001      	beq.n	800405a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40021000 	.word	0x40021000
 8004068:	40022000 	.word	0x40022000

0800406c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004076:	4b2d      	ldr	r3, [pc, #180]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b01      	cmp	r3, #1
 8004080:	d118      	bne.n	80040b4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004082:	4b2a      	ldr	r3, [pc, #168]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d107      	bne.n	800409e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800408e:	4b27      	ldr	r3, [pc, #156]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004094:	0a1b      	lsrs	r3, r3, #8
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e005      	b.n	80040aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800409e:	4b23      	ldr	r3, [pc, #140]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040aa:	4a21      	ldr	r2, [pc, #132]	; (8004130 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040b4:	4b1d      	ldr	r3, [pc, #116]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d002      	beq.n	80040ca <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d003      	beq.n	80040d0 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80040c8:	e005      	b.n	80040d6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80040ca:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80040cc:	613b      	str	r3, [r7, #16]
    break;
 80040ce:	e005      	b.n	80040dc <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80040d0:	4b19      	ldr	r3, [pc, #100]	; (8004138 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80040d2:	613b      	str	r3, [r7, #16]
    break;
 80040d4:	e002      	b.n	80040dc <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	613b      	str	r3, [r7, #16]
    break;
 80040da:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	3301      	adds	r3, #1
 80040e8:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	fb02 f203 	mul.w	r2, r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	0e5b      	lsrs	r3, r3, #25
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	3301      	adds	r3, #1
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	fbb2 f3f3 	udiv	r3, r2, r3
 800411a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800411c:	683b      	ldr	r3, [r7, #0]
}
 800411e:	4618      	mov	r0, r3
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	080067f0 	.word	0x080067f0
 8004134:	00f42400 	.word	0x00f42400
 8004138:	007a1200 	.word	0x007a1200

0800413c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004144:	2300      	movs	r3, #0
 8004146:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004148:	2300      	movs	r3, #0
 800414a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004154:	2b00      	cmp	r3, #0
 8004156:	d03d      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800415c:	2b40      	cmp	r3, #64	; 0x40
 800415e:	d00b      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d804      	bhi.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00e      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004168:	2b20      	cmp	r3, #32
 800416a:	d015      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800416c:	e01d      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800416e:	2b60      	cmp	r3, #96	; 0x60
 8004170:	d01e      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004172:	2b80      	cmp	r3, #128	; 0x80
 8004174:	d01c      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004176:	e018      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004178:	4b86      	ldr	r3, [pc, #536]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a85      	ldr	r2, [pc, #532]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800417e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004182:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004184:	e015      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3304      	adds	r3, #4
 800418a:	2100      	movs	r1, #0
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fafd 	bl	800478c <RCCEx_PLLSAI1_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004196:	e00c      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3320      	adds	r3, #32
 800419c:	2100      	movs	r1, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fbe4 	bl	800496c <RCCEx_PLLSAI2_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041a8:	e003      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	74fb      	strb	r3, [r7, #19]
      break;
 80041ae:	e000      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80041b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10b      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041b8:	4b76      	ldr	r3, [pc, #472]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041be:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041c6:	4973      	ldr	r1, [pc, #460]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80041ce:	e001      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d042      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e8:	d00f      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xce>
 80041ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ee:	d805      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d011      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80041f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f8:	d017      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xee>
 80041fa:	e01f      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x100>
 80041fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004200:	d01f      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004206:	d01c      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004208:	e018      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800420a:	4b62      	ldr	r3, [pc, #392]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	4a61      	ldr	r2, [pc, #388]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004214:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004216:	e015      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fab4 	bl	800478c <RCCEx_PLLSAI1_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004228:	e00c      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3320      	adds	r3, #32
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fb9b 	bl	800496c <RCCEx_PLLSAI2_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800423a:	e003      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	74fb      	strb	r3, [r7, #19]
      break;
 8004240:	e000      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8004242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10b      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800424a:	4b52      	ldr	r3, [pc, #328]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800424c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	494e      	ldr	r1, [pc, #312]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004260:	e001      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004262:	7cfb      	ldrb	r3, [r7, #19]
 8004264:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 809f 	beq.w	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004274:	2300      	movs	r3, #0
 8004276:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004278:	4b46      	ldr	r3, [pc, #280]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004288:	2300      	movs	r3, #0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00d      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428e:	4b41      	ldr	r3, [pc, #260]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	4a40      	ldr	r2, [pc, #256]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004298:	6593      	str	r3, [r2, #88]	; 0x58
 800429a:	4b3e      	ldr	r3, [pc, #248]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800429c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a6:	2301      	movs	r3, #1
 80042a8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042aa:	4b3b      	ldr	r3, [pc, #236]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a3a      	ldr	r2, [pc, #232]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042b6:	f7fd fe1f 	bl	8001ef8 <HAL_GetTick>
 80042ba:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042bc:	e009      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042be:	f7fd fe1b 	bl	8001ef8 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d902      	bls.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	74fb      	strb	r3, [r7, #19]
        break;
 80042d0:	e005      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042d2:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0ef      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d15b      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042e4:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ee:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01f      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d019      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800430e:	4b21      	ldr	r3, [pc, #132]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004314:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800431e:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800432e:	4a19      	ldr	r2, [pc, #100]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d016      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004340:	f7fd fdda 	bl	8001ef8 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004346:	e00b      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fd fdd6 	bl	8001ef8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d902      	bls.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	74fb      	strb	r3, [r7, #19]
            break;
 800435e:	e006      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004360:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0ec      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10c      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004374:	4b07      	ldr	r3, [pc, #28]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004384:	4903      	ldr	r1, [pc, #12]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800438c:	e008      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	74bb      	strb	r3, [r7, #18]
 8004392:	e005      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004394:	40021000 	.word	0x40021000
 8004398:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439c:	7cfb      	ldrb	r3, [r7, #19]
 800439e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043a0:	7c7b      	ldrb	r3, [r7, #17]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d105      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a6:	4ba0      	ldr	r3, [pc, #640]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	4a9f      	ldr	r2, [pc, #636]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043be:	4b9a      	ldr	r3, [pc, #616]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f023 0203 	bic.w	r2, r3, #3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043cc:	4996      	ldr	r1, [pc, #600]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043e0:	4b91      	ldr	r3, [pc, #580]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f023 020c 	bic.w	r2, r3, #12
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	498e      	ldr	r1, [pc, #568]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004402:	4b89      	ldr	r3, [pc, #548]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004410:	4985      	ldr	r1, [pc, #532]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004424:	4b80      	ldr	r3, [pc, #512]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004432:	497d      	ldr	r1, [pc, #500]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004446:	4b78      	ldr	r3, [pc, #480]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004454:	4974      	ldr	r1, [pc, #464]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004468:	4b6f      	ldr	r3, [pc, #444]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	496c      	ldr	r1, [pc, #432]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800448a:	4b67      	ldr	r3, [pc, #412]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004498:	4963      	ldr	r1, [pc, #396]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044ac:	4b5e      	ldr	r3, [pc, #376]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ba:	495b      	ldr	r1, [pc, #364]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044ce:	4b56      	ldr	r3, [pc, #344]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044dc:	4952      	ldr	r1, [pc, #328]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044f0:	4b4d      	ldr	r3, [pc, #308]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	494a      	ldr	r1, [pc, #296]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004512:	4b45      	ldr	r3, [pc, #276]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004520:	4941      	ldr	r1, [pc, #260]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004534:	4b3c      	ldr	r3, [pc, #240]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004536:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800453a:	f023 0203 	bic.w	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004542:	4939      	ldr	r1, [pc, #228]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d028      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004556:	4b34      	ldr	r3, [pc, #208]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004564:	4930      	ldr	r1, [pc, #192]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004574:	d106      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004576:	4b2c      	ldr	r3, [pc, #176]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	4a2b      	ldr	r2, [pc, #172]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004580:	60d3      	str	r3, [r2, #12]
 8004582:	e011      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800458c:	d10c      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3304      	adds	r3, #4
 8004592:	2101      	movs	r1, #1
 8004594:	4618      	mov	r0, r3
 8004596:	f000 f8f9 	bl	800478c <RCCEx_PLLSAI1_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800459e:	7cfb      	ldrb	r3, [r7, #19]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d04d      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045bc:	d108      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80045be:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045c4:	4a18      	ldr	r2, [pc, #96]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80045ce:	e012      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80045d0:	4b15      	ldr	r3, [pc, #84]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045d6:	4a14      	ldr	r2, [pc, #80]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80045e0:	4b11      	ldr	r3, [pc, #68]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ee:	490e      	ldr	r1, [pc, #56]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045fe:	d106      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004600:	4b09      	ldr	r3, [pc, #36]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4a08      	ldr	r2, [pc, #32]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800460a:	60d3      	str	r3, [r2, #12]
 800460c:	e020      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004616:	d109      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004618:	4b03      	ldr	r3, [pc, #12]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a02      	ldr	r2, [pc, #8]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004622:	60d3      	str	r3, [r2, #12]
 8004624:	e014      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004630:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004634:	d10c      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3304      	adds	r3, #4
 800463a:	2101      	movs	r1, #1
 800463c:	4618      	mov	r0, r3
 800463e:	f000 f8a5 	bl	800478c <RCCEx_PLLSAI1_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004646:	7cfb      	ldrb	r3, [r7, #19]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800464c:	7cfb      	ldrb	r3, [r7, #19]
 800464e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d028      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800465c:	4b4a      	ldr	r3, [pc, #296]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800466a:	4947      	ldr	r1, [pc, #284]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800467a:	d106      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800467c:	4b42      	ldr	r3, [pc, #264]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a41      	ldr	r2, [pc, #260]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004686:	60d3      	str	r3, [r2, #12]
 8004688:	e011      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800468e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004692:	d10c      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	2101      	movs	r1, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f876 	bl	800478c <RCCEx_PLLSAI1_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01e      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046ba:	4b33      	ldr	r3, [pc, #204]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ca:	492f      	ldr	r1, [pc, #188]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2102      	movs	r1, #2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f851 	bl	800478c <RCCEx_PLLSAI1_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00b      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004704:	4b20      	ldr	r3, [pc, #128]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800470a:	f023 0204 	bic.w	r2, r3, #4
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004714:	491c      	ldr	r1, [pc, #112]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004728:	4b17      	ldr	r3, [pc, #92]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800472a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800472e:	f023 0218 	bic.w	r2, r3, #24
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004738:	4913      	ldr	r1, [pc, #76]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d017      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800474e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475c:	490a      	ldr	r1, [pc, #40]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800476a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800476e:	d105      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a04      	ldr	r2, [pc, #16]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800477a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800477c:	7cbb      	ldrb	r3, [r7, #18]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000

0800478c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800479a:	4b70      	ldr	r3, [pc, #448]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00e      	beq.n	80047c4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047a6:	4b6d      	ldr	r3, [pc, #436]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f003 0203 	and.w	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d103      	bne.n	80047be <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
       ||
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d13f      	bne.n	800483e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
 80047c2:	e03c      	b.n	800483e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d00c      	beq.n	80047e6 <RCCEx_PLLSAI1_Config+0x5a>
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d013      	beq.n	80047f8 <RCCEx_PLLSAI1_Config+0x6c>
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d120      	bne.n	8004816 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047d4:	4b61      	ldr	r3, [pc, #388]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d11d      	bne.n	800481c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e4:	e01a      	b.n	800481c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047e6:	4b5d      	ldr	r3, [pc, #372]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d116      	bne.n	8004820 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047f6:	e013      	b.n	8004820 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047f8:	4b58      	ldr	r3, [pc, #352]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10f      	bne.n	8004824 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004804:	4b55      	ldr	r3, [pc, #340]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d109      	bne.n	8004824 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004814:	e006      	b.n	8004824 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	73fb      	strb	r3, [r7, #15]
      break;
 800481a:	e004      	b.n	8004826 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800481c:	bf00      	nop
 800481e:	e002      	b.n	8004826 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004824:	bf00      	nop
    }

    if(status == HAL_OK)
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d108      	bne.n	800483e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800482c:	4b4b      	ldr	r3, [pc, #300]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f023 0203 	bic.w	r2, r3, #3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4948      	ldr	r1, [pc, #288]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 800483a:	4313      	orrs	r3, r2
 800483c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f040 8086 	bne.w	8004952 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004846:	4b45      	ldr	r3, [pc, #276]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a44      	ldr	r2, [pc, #272]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 800484c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004852:	f7fd fb51 	bl	8001ef8 <HAL_GetTick>
 8004856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004858:	e009      	b.n	800486e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800485a:	f7fd fb4d 	bl	8001ef8 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d902      	bls.n	800486e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	73fb      	strb	r3, [r7, #15]
        break;
 800486c:	e005      	b.n	800487a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800486e:	4b3b      	ldr	r3, [pc, #236]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1ef      	bne.n	800485a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d168      	bne.n	8004952 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d113      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004886:	4b35      	ldr	r3, [pc, #212]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	4b35      	ldr	r3, [pc, #212]	; (8004960 <RCCEx_PLLSAI1_Config+0x1d4>)
 800488c:	4013      	ands	r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6892      	ldr	r2, [r2, #8]
 8004892:	0211      	lsls	r1, r2, #8
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	68d2      	ldr	r2, [r2, #12]
 8004898:	06d2      	lsls	r2, r2, #27
 800489a:	4311      	orrs	r1, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6852      	ldr	r2, [r2, #4]
 80048a0:	3a01      	subs	r2, #1
 80048a2:	0112      	lsls	r2, r2, #4
 80048a4:	430a      	orrs	r2, r1
 80048a6:	492d      	ldr	r1, [pc, #180]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	610b      	str	r3, [r1, #16]
 80048ac:	e02d      	b.n	800490a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d115      	bne.n	80048e0 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048b4:	4b29      	ldr	r3, [pc, #164]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6892      	ldr	r2, [r2, #8]
 80048c0:	0211      	lsls	r1, r2, #8
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6912      	ldr	r2, [r2, #16]
 80048c6:	0852      	lsrs	r2, r2, #1
 80048c8:	3a01      	subs	r2, #1
 80048ca:	0552      	lsls	r2, r2, #21
 80048cc:	4311      	orrs	r1, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6852      	ldr	r2, [r2, #4]
 80048d2:	3a01      	subs	r2, #1
 80048d4:	0112      	lsls	r2, r2, #4
 80048d6:	430a      	orrs	r2, r1
 80048d8:	4920      	ldr	r1, [pc, #128]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	610b      	str	r3, [r1, #16]
 80048de:	e014      	b.n	800490a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048e0:	4b1e      	ldr	r3, [pc, #120]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	4b20      	ldr	r3, [pc, #128]	; (8004968 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6892      	ldr	r2, [r2, #8]
 80048ec:	0211      	lsls	r1, r2, #8
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6952      	ldr	r2, [r2, #20]
 80048f2:	0852      	lsrs	r2, r2, #1
 80048f4:	3a01      	subs	r2, #1
 80048f6:	0652      	lsls	r2, r2, #25
 80048f8:	4311      	orrs	r1, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6852      	ldr	r2, [r2, #4]
 80048fe:	3a01      	subs	r2, #1
 8004900:	0112      	lsls	r2, r2, #4
 8004902:	430a      	orrs	r2, r1
 8004904:	4915      	ldr	r1, [pc, #84]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004906:	4313      	orrs	r3, r2
 8004908:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800490a:	4b14      	ldr	r3, [pc, #80]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a13      	ldr	r2, [pc, #76]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004910:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004914:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004916:	f7fd faef 	bl	8001ef8 <HAL_GetTick>
 800491a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800491c:	e009      	b.n	8004932 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800491e:	f7fd faeb 	bl	8001ef8 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d902      	bls.n	8004932 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	73fb      	strb	r3, [r7, #15]
          break;
 8004930:	e005      	b.n	800493e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0ef      	beq.n	800491e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	4903      	ldr	r1, [pc, #12]	; (800495c <RCCEx_PLLSAI1_Config+0x1d0>)
 800494e:	4313      	orrs	r3, r2
 8004950:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004952:	7bfb      	ldrb	r3, [r7, #15]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40021000 	.word	0x40021000
 8004960:	07ff800f 	.word	0x07ff800f
 8004964:	ff9f800f 	.word	0xff9f800f
 8004968:	f9ff800f 	.word	0xf9ff800f

0800496c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800497a:	4b70      	ldr	r3, [pc, #448]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00e      	beq.n	80049a4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004986:	4b6d      	ldr	r3, [pc, #436]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f003 0203 	and.w	r2, r3, #3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d103      	bne.n	800499e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
       ||
 800499a:	2b00      	cmp	r3, #0
 800499c:	d13f      	bne.n	8004a1e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
 80049a2:	e03c      	b.n	8004a1e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d00c      	beq.n	80049c6 <RCCEx_PLLSAI2_Config+0x5a>
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d013      	beq.n	80049d8 <RCCEx_PLLSAI2_Config+0x6c>
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d120      	bne.n	80049f6 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049b4:	4b61      	ldr	r3, [pc, #388]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d11d      	bne.n	80049fc <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c4:	e01a      	b.n	80049fc <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049c6:	4b5d      	ldr	r3, [pc, #372]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d116      	bne.n	8004a00 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d6:	e013      	b.n	8004a00 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049d8:	4b58      	ldr	r3, [pc, #352]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10f      	bne.n	8004a04 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049e4:	4b55      	ldr	r3, [pc, #340]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d109      	bne.n	8004a04 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049f4:	e006      	b.n	8004a04 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	73fb      	strb	r3, [r7, #15]
      break;
 80049fa:	e004      	b.n	8004a06 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80049fc:	bf00      	nop
 80049fe:	e002      	b.n	8004a06 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004a00:	bf00      	nop
 8004a02:	e000      	b.n	8004a06 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004a04:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d108      	bne.n	8004a1e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004a0c:	4b4b      	ldr	r3, [pc, #300]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f023 0203 	bic.w	r2, r3, #3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4948      	ldr	r1, [pc, #288]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f040 8086 	bne.w	8004b32 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a26:	4b45      	ldr	r3, [pc, #276]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a44      	ldr	r2, [pc, #272]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a32:	f7fd fa61 	bl	8001ef8 <HAL_GetTick>
 8004a36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a38:	e009      	b.n	8004a4e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a3a:	f7fd fa5d 	bl	8001ef8 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d902      	bls.n	8004a4e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	73fb      	strb	r3, [r7, #15]
        break;
 8004a4c:	e005      	b.n	8004a5a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a4e:	4b3b      	ldr	r3, [pc, #236]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1ef      	bne.n	8004a3a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d168      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d113      	bne.n	8004a8e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a66:	4b35      	ldr	r3, [pc, #212]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a68:	695a      	ldr	r2, [r3, #20]
 8004a6a:	4b35      	ldr	r3, [pc, #212]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d4>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6892      	ldr	r2, [r2, #8]
 8004a72:	0211      	lsls	r1, r2, #8
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68d2      	ldr	r2, [r2, #12]
 8004a78:	06d2      	lsls	r2, r2, #27
 8004a7a:	4311      	orrs	r1, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6852      	ldr	r2, [r2, #4]
 8004a80:	3a01      	subs	r2, #1
 8004a82:	0112      	lsls	r2, r2, #4
 8004a84:	430a      	orrs	r2, r1
 8004a86:	492d      	ldr	r1, [pc, #180]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	614b      	str	r3, [r1, #20]
 8004a8c:	e02d      	b.n	8004aea <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d115      	bne.n	8004ac0 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a94:	4b29      	ldr	r3, [pc, #164]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a96:	695a      	ldr	r2, [r3, #20]
 8004a98:	4b2a      	ldr	r3, [pc, #168]	; (8004b44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6892      	ldr	r2, [r2, #8]
 8004aa0:	0211      	lsls	r1, r2, #8
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6912      	ldr	r2, [r2, #16]
 8004aa6:	0852      	lsrs	r2, r2, #1
 8004aa8:	3a01      	subs	r2, #1
 8004aaa:	0552      	lsls	r2, r2, #21
 8004aac:	4311      	orrs	r1, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6852      	ldr	r2, [r2, #4]
 8004ab2:	3a01      	subs	r2, #1
 8004ab4:	0112      	lsls	r2, r2, #4
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	4920      	ldr	r1, [pc, #128]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	614b      	str	r3, [r1, #20]
 8004abe:	e014      	b.n	8004aea <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ac0:	4b1e      	ldr	r3, [pc, #120]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004ac2:	695a      	ldr	r2, [r3, #20]
 8004ac4:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6892      	ldr	r2, [r2, #8]
 8004acc:	0211      	lsls	r1, r2, #8
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6952      	ldr	r2, [r2, #20]
 8004ad2:	0852      	lsrs	r2, r2, #1
 8004ad4:	3a01      	subs	r2, #1
 8004ad6:	0652      	lsls	r2, r2, #25
 8004ad8:	4311      	orrs	r1, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6852      	ldr	r2, [r2, #4]
 8004ade:	3a01      	subs	r2, #1
 8004ae0:	0112      	lsls	r2, r2, #4
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	4915      	ldr	r1, [pc, #84]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004aea:	4b14      	ldr	r3, [pc, #80]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a13      	ldr	r2, [pc, #76]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af6:	f7fd f9ff 	bl	8001ef8 <HAL_GetTick>
 8004afa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004afc:	e009      	b.n	8004b12 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004afe:	f7fd f9fb 	bl	8001ef8 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d902      	bls.n	8004b12 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	73fb      	strb	r3, [r7, #15]
          break;
 8004b10:	e005      	b.n	8004b1e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0ef      	beq.n	8004afe <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	4903      	ldr	r1, [pc, #12]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	07ff800f 	.word	0x07ff800f
 8004b44:	ff9f800f 	.word	0xff9f800f
 8004b48:	f9ff800f 	.word	0xf9ff800f

08004b4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e042      	b.n	8004be4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7fc f86f 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2224      	movs	r2, #36	; 0x24
 8004b7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0201 	bic.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f994 	bl	8004ebc <UART_SetConfig>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e022      	b.n	8004be4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fc5a 	bl	8005460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0201 	orr.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fce1 	bl	80055a4 <UART_CheckIdleState>
 8004be2:	4603      	mov	r3, r0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	; 0x28
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	f040 8084 	bne.w	8004d10 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_UART_Transmit+0x28>
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e07c      	b.n	8004d12 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_UART_Transmit+0x3a>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e075      	b.n	8004d12 <HAL_UART_Transmit+0x126>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2221      	movs	r2, #33	; 0x21
 8004c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004c3e:	f7fd f95b 	bl	8001ef8 <HAL_GetTick>
 8004c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	88fa      	ldrh	r2, [r7, #6]
 8004c48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	88fa      	ldrh	r2, [r7, #6]
 8004c50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5c:	d108      	bne.n	8004c70 <HAL_UART_Transmit+0x84>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d104      	bne.n	8004c70 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	e003      	b.n	8004c78 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004c80:	e02d      	b.n	8004cde <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2180      	movs	r1, #128	; 0x80
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fcd1 	bl	8005634 <UART_WaitOnFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e03a      	b.n	8004d12 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10b      	bne.n	8004cba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	881a      	ldrh	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cae:	b292      	uxth	r2, r2
 8004cb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	e008      	b.n	8004ccc <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	781a      	ldrb	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	b292      	uxth	r2, r2
 8004cc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1cb      	bne.n	8004c82 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2140      	movs	r1, #64	; 0x40
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fc9d 	bl	8005634 <UART_WaitOnFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e006      	b.n	8004d12 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	e000      	b.n	8004d12 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
  }
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3720      	adds	r7, #32
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b08a      	sub	sp, #40	; 0x28
 8004d1e:	af02      	add	r7, sp, #8
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	4613      	mov	r3, r2
 8004d28:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	f040 80be 	bne.w	8004eb2 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_UART_Receive+0x28>
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e0b6      	b.n	8004eb4 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_UART_Receive+0x3a>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e0af      	b.n	8004eb4 <HAL_UART_Receive+0x19a>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2222      	movs	r2, #34	; 0x22
 8004d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004d6c:	f7fd f8c4 	bl	8001ef8 <HAL_GetTick>
 8004d70:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	88fa      	ldrh	r2, [r7, #6]
 8004d7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8a:	d10e      	bne.n	8004daa <HAL_UART_Receive+0x90>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <HAL_UART_Receive+0x86>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d9e:	e02d      	b.n	8004dfc <HAL_UART_Receive+0xe2>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	22ff      	movs	r2, #255	; 0xff
 8004da4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004da8:	e028      	b.n	8004dfc <HAL_UART_Receive+0xe2>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <HAL_UART_Receive+0xb4>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <HAL_UART_Receive+0xaa>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	22ff      	movs	r2, #255	; 0xff
 8004dbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004dc2:	e01b      	b.n	8004dfc <HAL_UART_Receive+0xe2>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	227f      	movs	r2, #127	; 0x7f
 8004dc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004dcc:	e016      	b.n	8004dfc <HAL_UART_Receive+0xe2>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dd6:	d10d      	bne.n	8004df4 <HAL_UART_Receive+0xda>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d104      	bne.n	8004dea <HAL_UART_Receive+0xd0>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	227f      	movs	r2, #127	; 0x7f
 8004de4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004de8:	e008      	b.n	8004dfc <HAL_UART_Receive+0xe2>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	223f      	movs	r2, #63	; 0x3f
 8004dee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004df2:	e003      	b.n	8004dfc <HAL_UART_Receive+0xe2>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004e02:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0c:	d108      	bne.n	8004e20 <HAL_UART_Receive+0x106>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d104      	bne.n	8004e20 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	e003      	b.n	8004e28 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e30:	e033      	b.n	8004e9a <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2120      	movs	r1, #32
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fbf9 	bl	8005634 <UART_WaitOnFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e033      	b.n	8004eb4 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10c      	bne.n	8004e6c <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	8a7b      	ldrh	r3, [r7, #18]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	3302      	adds	r3, #2
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	e00d      	b.n	8004e88 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	8a7b      	ldrh	r3, [r7, #18]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3301      	adds	r3, #1
 8004e86:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1c5      	bne.n	8004e32 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e000      	b.n	8004eb4 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
  }
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ebc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004ec0:	b088      	sub	sp, #32
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	4bb1      	ldr	r3, [pc, #708]	; (80051b8 <UART_SetConfig+0x2fc>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	69f9      	ldr	r1, [r7, #28]
 8004efc:	430b      	orrs	r3, r1
 8004efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4aa6      	ldr	r2, [pc, #664]	; (80051bc <UART_SetConfig+0x300>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f3a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	69f9      	ldr	r1, [r7, #28]
 8004f44:	430b      	orrs	r3, r1
 8004f46:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	f023 010f 	bic.w	r1, r3, #15
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a97      	ldr	r2, [pc, #604]	; (80051c0 <UART_SetConfig+0x304>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d121      	bne.n	8004fac <UART_SetConfig+0xf0>
 8004f68:	4b96      	ldr	r3, [pc, #600]	; (80051c4 <UART_SetConfig+0x308>)
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d816      	bhi.n	8004fa4 <UART_SetConfig+0xe8>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0xc0>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004f8d 	.word	0x08004f8d
 8004f80:	08004f99 	.word	0x08004f99
 8004f84:	08004f93 	.word	0x08004f93
 8004f88:	08004f9f 	.word	0x08004f9f
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	76fb      	strb	r3, [r7, #27]
 8004f90:	e0e8      	b.n	8005164 <UART_SetConfig+0x2a8>
 8004f92:	2302      	movs	r3, #2
 8004f94:	76fb      	strb	r3, [r7, #27]
 8004f96:	e0e5      	b.n	8005164 <UART_SetConfig+0x2a8>
 8004f98:	2304      	movs	r3, #4
 8004f9a:	76fb      	strb	r3, [r7, #27]
 8004f9c:	e0e2      	b.n	8005164 <UART_SetConfig+0x2a8>
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	76fb      	strb	r3, [r7, #27]
 8004fa2:	e0df      	b.n	8005164 <UART_SetConfig+0x2a8>
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	76fb      	strb	r3, [r7, #27]
 8004fa8:	bf00      	nop
 8004faa:	e0db      	b.n	8005164 <UART_SetConfig+0x2a8>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a85      	ldr	r2, [pc, #532]	; (80051c8 <UART_SetConfig+0x30c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d134      	bne.n	8005020 <UART_SetConfig+0x164>
 8004fb6:	4b83      	ldr	r3, [pc, #524]	; (80051c4 <UART_SetConfig+0x308>)
 8004fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbc:	f003 030c 	and.w	r3, r3, #12
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	d829      	bhi.n	8005018 <UART_SetConfig+0x15c>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <UART_SetConfig+0x110>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08005001 	.word	0x08005001
 8004fd0:	08005019 	.word	0x08005019
 8004fd4:	08005019 	.word	0x08005019
 8004fd8:	08005019 	.word	0x08005019
 8004fdc:	0800500d 	.word	0x0800500d
 8004fe0:	08005019 	.word	0x08005019
 8004fe4:	08005019 	.word	0x08005019
 8004fe8:	08005019 	.word	0x08005019
 8004fec:	08005007 	.word	0x08005007
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005019 	.word	0x08005019
 8004ffc:	08005013 	.word	0x08005013
 8005000:	2300      	movs	r3, #0
 8005002:	76fb      	strb	r3, [r7, #27]
 8005004:	e0ae      	b.n	8005164 <UART_SetConfig+0x2a8>
 8005006:	2302      	movs	r3, #2
 8005008:	76fb      	strb	r3, [r7, #27]
 800500a:	e0ab      	b.n	8005164 <UART_SetConfig+0x2a8>
 800500c:	2304      	movs	r3, #4
 800500e:	76fb      	strb	r3, [r7, #27]
 8005010:	e0a8      	b.n	8005164 <UART_SetConfig+0x2a8>
 8005012:	2308      	movs	r3, #8
 8005014:	76fb      	strb	r3, [r7, #27]
 8005016:	e0a5      	b.n	8005164 <UART_SetConfig+0x2a8>
 8005018:	2310      	movs	r3, #16
 800501a:	76fb      	strb	r3, [r7, #27]
 800501c:	bf00      	nop
 800501e:	e0a1      	b.n	8005164 <UART_SetConfig+0x2a8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a69      	ldr	r2, [pc, #420]	; (80051cc <UART_SetConfig+0x310>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d120      	bne.n	800506c <UART_SetConfig+0x1b0>
 800502a:	4b66      	ldr	r3, [pc, #408]	; (80051c4 <UART_SetConfig+0x308>)
 800502c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005030:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005034:	2b10      	cmp	r3, #16
 8005036:	d00f      	beq.n	8005058 <UART_SetConfig+0x19c>
 8005038:	2b10      	cmp	r3, #16
 800503a:	d802      	bhi.n	8005042 <UART_SetConfig+0x186>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <UART_SetConfig+0x190>
 8005040:	e010      	b.n	8005064 <UART_SetConfig+0x1a8>
 8005042:	2b20      	cmp	r3, #32
 8005044:	d005      	beq.n	8005052 <UART_SetConfig+0x196>
 8005046:	2b30      	cmp	r3, #48	; 0x30
 8005048:	d009      	beq.n	800505e <UART_SetConfig+0x1a2>
 800504a:	e00b      	b.n	8005064 <UART_SetConfig+0x1a8>
 800504c:	2300      	movs	r3, #0
 800504e:	76fb      	strb	r3, [r7, #27]
 8005050:	e088      	b.n	8005164 <UART_SetConfig+0x2a8>
 8005052:	2302      	movs	r3, #2
 8005054:	76fb      	strb	r3, [r7, #27]
 8005056:	e085      	b.n	8005164 <UART_SetConfig+0x2a8>
 8005058:	2304      	movs	r3, #4
 800505a:	76fb      	strb	r3, [r7, #27]
 800505c:	e082      	b.n	8005164 <UART_SetConfig+0x2a8>
 800505e:	2308      	movs	r3, #8
 8005060:	76fb      	strb	r3, [r7, #27]
 8005062:	e07f      	b.n	8005164 <UART_SetConfig+0x2a8>
 8005064:	2310      	movs	r3, #16
 8005066:	76fb      	strb	r3, [r7, #27]
 8005068:	bf00      	nop
 800506a:	e07b      	b.n	8005164 <UART_SetConfig+0x2a8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a57      	ldr	r2, [pc, #348]	; (80051d0 <UART_SetConfig+0x314>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d120      	bne.n	80050b8 <UART_SetConfig+0x1fc>
 8005076:	4b53      	ldr	r3, [pc, #332]	; (80051c4 <UART_SetConfig+0x308>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d00f      	beq.n	80050a4 <UART_SetConfig+0x1e8>
 8005084:	2b40      	cmp	r3, #64	; 0x40
 8005086:	d802      	bhi.n	800508e <UART_SetConfig+0x1d2>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <UART_SetConfig+0x1dc>
 800508c:	e010      	b.n	80050b0 <UART_SetConfig+0x1f4>
 800508e:	2b80      	cmp	r3, #128	; 0x80
 8005090:	d005      	beq.n	800509e <UART_SetConfig+0x1e2>
 8005092:	2bc0      	cmp	r3, #192	; 0xc0
 8005094:	d009      	beq.n	80050aa <UART_SetConfig+0x1ee>
 8005096:	e00b      	b.n	80050b0 <UART_SetConfig+0x1f4>
 8005098:	2300      	movs	r3, #0
 800509a:	76fb      	strb	r3, [r7, #27]
 800509c:	e062      	b.n	8005164 <UART_SetConfig+0x2a8>
 800509e:	2302      	movs	r3, #2
 80050a0:	76fb      	strb	r3, [r7, #27]
 80050a2:	e05f      	b.n	8005164 <UART_SetConfig+0x2a8>
 80050a4:	2304      	movs	r3, #4
 80050a6:	76fb      	strb	r3, [r7, #27]
 80050a8:	e05c      	b.n	8005164 <UART_SetConfig+0x2a8>
 80050aa:	2308      	movs	r3, #8
 80050ac:	76fb      	strb	r3, [r7, #27]
 80050ae:	e059      	b.n	8005164 <UART_SetConfig+0x2a8>
 80050b0:	2310      	movs	r3, #16
 80050b2:	76fb      	strb	r3, [r7, #27]
 80050b4:	bf00      	nop
 80050b6:	e055      	b.n	8005164 <UART_SetConfig+0x2a8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a45      	ldr	r2, [pc, #276]	; (80051d4 <UART_SetConfig+0x318>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d124      	bne.n	800510c <UART_SetConfig+0x250>
 80050c2:	4b40      	ldr	r3, [pc, #256]	; (80051c4 <UART_SetConfig+0x308>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d0:	d012      	beq.n	80050f8 <UART_SetConfig+0x23c>
 80050d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d6:	d802      	bhi.n	80050de <UART_SetConfig+0x222>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <UART_SetConfig+0x230>
 80050dc:	e012      	b.n	8005104 <UART_SetConfig+0x248>
 80050de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e2:	d006      	beq.n	80050f2 <UART_SetConfig+0x236>
 80050e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e8:	d009      	beq.n	80050fe <UART_SetConfig+0x242>
 80050ea:	e00b      	b.n	8005104 <UART_SetConfig+0x248>
 80050ec:	2300      	movs	r3, #0
 80050ee:	76fb      	strb	r3, [r7, #27]
 80050f0:	e038      	b.n	8005164 <UART_SetConfig+0x2a8>
 80050f2:	2302      	movs	r3, #2
 80050f4:	76fb      	strb	r3, [r7, #27]
 80050f6:	e035      	b.n	8005164 <UART_SetConfig+0x2a8>
 80050f8:	2304      	movs	r3, #4
 80050fa:	76fb      	strb	r3, [r7, #27]
 80050fc:	e032      	b.n	8005164 <UART_SetConfig+0x2a8>
 80050fe:	2308      	movs	r3, #8
 8005100:	76fb      	strb	r3, [r7, #27]
 8005102:	e02f      	b.n	8005164 <UART_SetConfig+0x2a8>
 8005104:	2310      	movs	r3, #16
 8005106:	76fb      	strb	r3, [r7, #27]
 8005108:	bf00      	nop
 800510a:	e02b      	b.n	8005164 <UART_SetConfig+0x2a8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <UART_SetConfig+0x300>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d124      	bne.n	8005160 <UART_SetConfig+0x2a4>
 8005116:	4b2b      	ldr	r3, [pc, #172]	; (80051c4 <UART_SetConfig+0x308>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005124:	d012      	beq.n	800514c <UART_SetConfig+0x290>
 8005126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800512a:	d802      	bhi.n	8005132 <UART_SetConfig+0x276>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d007      	beq.n	8005140 <UART_SetConfig+0x284>
 8005130:	e012      	b.n	8005158 <UART_SetConfig+0x29c>
 8005132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005136:	d006      	beq.n	8005146 <UART_SetConfig+0x28a>
 8005138:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800513c:	d009      	beq.n	8005152 <UART_SetConfig+0x296>
 800513e:	e00b      	b.n	8005158 <UART_SetConfig+0x29c>
 8005140:	2300      	movs	r3, #0
 8005142:	76fb      	strb	r3, [r7, #27]
 8005144:	e00e      	b.n	8005164 <UART_SetConfig+0x2a8>
 8005146:	2302      	movs	r3, #2
 8005148:	76fb      	strb	r3, [r7, #27]
 800514a:	e00b      	b.n	8005164 <UART_SetConfig+0x2a8>
 800514c:	2304      	movs	r3, #4
 800514e:	76fb      	strb	r3, [r7, #27]
 8005150:	e008      	b.n	8005164 <UART_SetConfig+0x2a8>
 8005152:	2308      	movs	r3, #8
 8005154:	76fb      	strb	r3, [r7, #27]
 8005156:	e005      	b.n	8005164 <UART_SetConfig+0x2a8>
 8005158:	2310      	movs	r3, #16
 800515a:	76fb      	strb	r3, [r7, #27]
 800515c:	bf00      	nop
 800515e:	e001      	b.n	8005164 <UART_SetConfig+0x2a8>
 8005160:	2310      	movs	r3, #16
 8005162:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a14      	ldr	r2, [pc, #80]	; (80051bc <UART_SetConfig+0x300>)
 800516a:	4293      	cmp	r3, r2
 800516c:	f040 80a1 	bne.w	80052b2 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005170:	7efb      	ldrb	r3, [r7, #27]
 8005172:	2b08      	cmp	r3, #8
 8005174:	d836      	bhi.n	80051e4 <UART_SetConfig+0x328>
 8005176:	a201      	add	r2, pc, #4	; (adr r2, 800517c <UART_SetConfig+0x2c0>)
 8005178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517c:	080051a1 	.word	0x080051a1
 8005180:	080051e5 	.word	0x080051e5
 8005184:	080051a9 	.word	0x080051a9
 8005188:	080051e5 	.word	0x080051e5
 800518c:	080051af 	.word	0x080051af
 8005190:	080051e5 	.word	0x080051e5
 8005194:	080051e5 	.word	0x080051e5
 8005198:	080051e5 	.word	0x080051e5
 800519c:	080051dd 	.word	0x080051dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a0:	f7fe fede 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 80051a4:	6178      	str	r0, [r7, #20]
        break;
 80051a6:	e022      	b.n	80051ee <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <UART_SetConfig+0x31c>)
 80051aa:	617b      	str	r3, [r7, #20]
        break;
 80051ac:	e01f      	b.n	80051ee <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ae:	f7fe fe41 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 80051b2:	6178      	str	r0, [r7, #20]
        break;
 80051b4:	e01b      	b.n	80051ee <UART_SetConfig+0x332>
 80051b6:	bf00      	nop
 80051b8:	cfff69f3 	.word	0xcfff69f3
 80051bc:	40008000 	.word	0x40008000
 80051c0:	40013800 	.word	0x40013800
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40004400 	.word	0x40004400
 80051cc:	40004800 	.word	0x40004800
 80051d0:	40004c00 	.word	0x40004c00
 80051d4:	40005000 	.word	0x40005000
 80051d8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e0:	617b      	str	r3, [r7, #20]
        break;
 80051e2:	e004      	b.n	80051ee <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	76bb      	strb	r3, [r7, #26]
        break;
 80051ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 811d 	beq.w	8005430 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	4a97      	ldr	r2, [pc, #604]	; (8005458 <UART_SetConfig+0x59c>)
 80051fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005200:	461a      	mov	r2, r3
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	fbb3 f3f2 	udiv	r3, r3, r2
 8005208:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	4413      	add	r3, r2
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	d305      	bcc.n	8005226 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	429a      	cmp	r2, r3
 8005224:	d902      	bls.n	800522c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	76bb      	strb	r3, [r7, #26]
 800522a:	e101      	b.n	8005430 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	4618      	mov	r0, r3
 8005230:	f04f 0100 	mov.w	r1, #0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	4a87      	ldr	r2, [pc, #540]	; (8005458 <UART_SetConfig+0x59c>)
 800523a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800523e:	b29b      	uxth	r3, r3
 8005240:	f04f 0400 	mov.w	r4, #0
 8005244:	461a      	mov	r2, r3
 8005246:	4623      	mov	r3, r4
 8005248:	f7fb f82a 	bl	80002a0 <__aeabi_uldivmod>
 800524c:	4603      	mov	r3, r0
 800524e:	460c      	mov	r4, r1
 8005250:	4619      	mov	r1, r3
 8005252:	4622      	mov	r2, r4
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	f04f 0400 	mov.w	r4, #0
 800525c:	0214      	lsls	r4, r2, #8
 800525e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005262:	020b      	lsls	r3, r1, #8
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6852      	ldr	r2, [r2, #4]
 8005268:	0852      	lsrs	r2, r2, #1
 800526a:	4611      	mov	r1, r2
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	eb13 0b01 	adds.w	fp, r3, r1
 8005274:	eb44 0c02 	adc.w	ip, r4, r2
 8005278:	4658      	mov	r0, fp
 800527a:	4661      	mov	r1, ip
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f04f 0400 	mov.w	r4, #0
 8005284:	461a      	mov	r2, r3
 8005286:	4623      	mov	r3, r4
 8005288:	f7fb f80a 	bl	80002a0 <__aeabi_uldivmod>
 800528c:	4603      	mov	r3, r0
 800528e:	460c      	mov	r4, r1
 8005290:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005298:	d308      	bcc.n	80052ac <UART_SetConfig+0x3f0>
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052a0:	d204      	bcs.n	80052ac <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	60da      	str	r2, [r3, #12]
 80052aa:	e0c1      	b.n	8005430 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	76bb      	strb	r3, [r7, #26]
 80052b0:	e0be      	b.n	8005430 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ba:	d164      	bne.n	8005386 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80052bc:	7efb      	ldrb	r3, [r7, #27]
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d827      	bhi.n	8005312 <UART_SetConfig+0x456>
 80052c2:	a201      	add	r2, pc, #4	; (adr r2, 80052c8 <UART_SetConfig+0x40c>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	080052ed 	.word	0x080052ed
 80052cc:	080052f5 	.word	0x080052f5
 80052d0:	080052fd 	.word	0x080052fd
 80052d4:	08005313 	.word	0x08005313
 80052d8:	08005303 	.word	0x08005303
 80052dc:	08005313 	.word	0x08005313
 80052e0:	08005313 	.word	0x08005313
 80052e4:	08005313 	.word	0x08005313
 80052e8:	0800530b 	.word	0x0800530b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ec:	f7fe fe38 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 80052f0:	6178      	str	r0, [r7, #20]
        break;
 80052f2:	e013      	b.n	800531c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f4:	f7fe fe4a 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 80052f8:	6178      	str	r0, [r7, #20]
        break;
 80052fa:	e00f      	b.n	800531c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052fc:	4b57      	ldr	r3, [pc, #348]	; (800545c <UART_SetConfig+0x5a0>)
 80052fe:	617b      	str	r3, [r7, #20]
        break;
 8005300:	e00c      	b.n	800531c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005302:	f7fe fd97 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8005306:	6178      	str	r0, [r7, #20]
        break;
 8005308:	e008      	b.n	800531c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800530a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800530e:	617b      	str	r3, [r7, #20]
        break;
 8005310:	e004      	b.n	800531c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	76bb      	strb	r3, [r7, #26]
        break;
 800531a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 8086 	beq.w	8005430 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	4a4b      	ldr	r2, [pc, #300]	; (8005458 <UART_SetConfig+0x59c>)
 800532a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800532e:	461a      	mov	r2, r3
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	fbb3 f3f2 	udiv	r3, r3, r2
 8005336:	005a      	lsls	r2, r3, #1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	085b      	lsrs	r3, r3, #1
 800533e:	441a      	add	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	b29b      	uxth	r3, r3
 800534a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b0f      	cmp	r3, #15
 8005350:	d916      	bls.n	8005380 <UART_SetConfig+0x4c4>
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005358:	d212      	bcs.n	8005380 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	b29b      	uxth	r3, r3
 800535e:	f023 030f 	bic.w	r3, r3, #15
 8005362:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	085b      	lsrs	r3, r3, #1
 8005368:	b29b      	uxth	r3, r3
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	b29a      	uxth	r2, r3
 8005370:	89fb      	ldrh	r3, [r7, #14]
 8005372:	4313      	orrs	r3, r2
 8005374:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	89fa      	ldrh	r2, [r7, #14]
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	e057      	b.n	8005430 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	76bb      	strb	r3, [r7, #26]
 8005384:	e054      	b.n	8005430 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005386:	7efb      	ldrb	r3, [r7, #27]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d828      	bhi.n	80053de <UART_SetConfig+0x522>
 800538c:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0x4d8>)
 800538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005392:	bf00      	nop
 8005394:	080053b9 	.word	0x080053b9
 8005398:	080053c1 	.word	0x080053c1
 800539c:	080053c9 	.word	0x080053c9
 80053a0:	080053df 	.word	0x080053df
 80053a4:	080053cf 	.word	0x080053cf
 80053a8:	080053df 	.word	0x080053df
 80053ac:	080053df 	.word	0x080053df
 80053b0:	080053df 	.word	0x080053df
 80053b4:	080053d7 	.word	0x080053d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b8:	f7fe fdd2 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 80053bc:	6178      	str	r0, [r7, #20]
        break;
 80053be:	e013      	b.n	80053e8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c0:	f7fe fde4 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 80053c4:	6178      	str	r0, [r7, #20]
        break;
 80053c6:	e00f      	b.n	80053e8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c8:	4b24      	ldr	r3, [pc, #144]	; (800545c <UART_SetConfig+0x5a0>)
 80053ca:	617b      	str	r3, [r7, #20]
        break;
 80053cc:	e00c      	b.n	80053e8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ce:	f7fe fd31 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 80053d2:	6178      	str	r0, [r7, #20]
        break;
 80053d4:	e008      	b.n	80053e8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053da:	617b      	str	r3, [r7, #20]
        break;
 80053dc:	e004      	b.n	80053e8 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	76bb      	strb	r3, [r7, #26]
        break;
 80053e6:	bf00      	nop
    }

    if (pclk != 0U)
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d020      	beq.n	8005430 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	4a19      	ldr	r2, [pc, #100]	; (8005458 <UART_SetConfig+0x59c>)
 80053f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053f8:	461a      	mov	r2, r3
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	085b      	lsrs	r3, r3, #1
 8005406:	441a      	add	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	b29b      	uxth	r3, r3
 8005412:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	2b0f      	cmp	r3, #15
 8005418:	d908      	bls.n	800542c <UART_SetConfig+0x570>
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005420:	d204      	bcs.n	800542c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	e001      	b.n	8005430 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800544c:	7ebb      	ldrb	r3, [r7, #26]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3720      	adds	r7, #32
 8005452:	46bd      	mov	sp, r7
 8005454:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005458:	08006820 	.word	0x08006820
 800545c:	00f42400 	.word	0x00f42400

08005460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f4:	f003 0310 	and.w	r3, r3, #16
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01a      	beq.n	8005576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800555e:	d10a      	bne.n	8005576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	605a      	str	r2, [r3, #4]
  }
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80055b4:	f7fc fca0 	bl	8001ef8 <HAL_GetTick>
 80055b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d10e      	bne.n	80055e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f82c 	bl	8005634 <UART_WaitOnFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e022      	b.n	800562c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d10e      	bne.n	8005612 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f816 	bl	8005634 <UART_WaitOnFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e00c      	b.n	800562c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	4613      	mov	r3, r2
 8005642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005644:	e062      	b.n	800570c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564c:	d05e      	beq.n	800570c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564e:	f7fc fc53 	bl	8001ef8 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	429a      	cmp	r2, r3
 800565c:	d302      	bcc.n	8005664 <UART_WaitOnFlagUntilTimeout+0x30>
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d11d      	bne.n	80056a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005672:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0201 	bic.w	r2, r2, #1
 8005682:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e045      	b.n	800572c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d02e      	beq.n	800570c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056bc:	d126      	bne.n	800570c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056d6:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0201 	bic.w	r2, r2, #1
 80056e6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e00f      	b.n	800572c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69da      	ldr	r2, [r3, #28]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4013      	ands	r3, r2
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	429a      	cmp	r2, r3
 800571a:	bf0c      	ite	eq
 800571c:	2301      	moveq	r3, #1
 800571e:	2300      	movne	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	461a      	mov	r2, r3
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	429a      	cmp	r2, r3
 8005728:	d08d      	beq.n	8005646 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_UARTEx_DisableFifoMode+0x16>
 8005746:	2302      	movs	r3, #2
 8005748:	e027      	b.n	800579a <HAL_UARTEx_DisableFifoMode+0x66>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2224      	movs	r2, #36	; 0x24
 8005756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0201 	bic.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005778:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e02d      	b.n	800581a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2224      	movs	r2, #36	; 0x24
 80057ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f850 	bl	80058a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005836:	2302      	movs	r3, #2
 8005838:	e02d      	b.n	8005896 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2224      	movs	r2, #36	; 0x24
 8005846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0201 	bic.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f812 	bl	80058a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b089      	sub	sp, #36	; 0x24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80058a8:	4a2f      	ldr	r2, [pc, #188]	; (8005968 <UARTEx_SetNbDataToProcess+0xc8>)
 80058aa:	f107 0314 	add.w	r3, r7, #20
 80058ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058b2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80058b6:	4a2d      	ldr	r2, [pc, #180]	; (800596c <UARTEx_SetNbDataToProcess+0xcc>)
 80058b8:	f107 030c 	add.w	r3, r7, #12
 80058bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058c0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d108      	bne.n	80058de <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058dc:	e03d      	b.n	800595a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058de:	2308      	movs	r3, #8
 80058e0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058e2:	2308      	movs	r3, #8
 80058e4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	0e5b      	lsrs	r3, r3, #25
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	0f5b      	lsrs	r3, r3, #29
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005906:	7fbb      	ldrb	r3, [r7, #30]
 8005908:	7f3a      	ldrb	r2, [r7, #28]
 800590a:	f107 0120 	add.w	r1, r7, #32
 800590e:	440a      	add	r2, r1
 8005910:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005914:	fb02 f303 	mul.w	r3, r2, r3
 8005918:	7f3a      	ldrb	r2, [r7, #28]
 800591a:	f107 0120 	add.w	r1, r7, #32
 800591e:	440a      	add	r2, r1
 8005920:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005924:	fb93 f3f2 	sdiv	r3, r3, r2
 8005928:	b29a      	uxth	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005930:	7ffb      	ldrb	r3, [r7, #31]
 8005932:	7f7a      	ldrb	r2, [r7, #29]
 8005934:	f107 0120 	add.w	r1, r7, #32
 8005938:	440a      	add	r2, r1
 800593a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800593e:	fb02 f303 	mul.w	r3, r2, r3
 8005942:	7f7a      	ldrb	r2, [r7, #29]
 8005944:	f107 0120 	add.w	r1, r7, #32
 8005948:	440a      	add	r2, r1
 800594a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800594e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005952:	b29a      	uxth	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800595a:	bf00      	nop
 800595c:	3724      	adds	r7, #36	; 0x24
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	080067c8 	.word	0x080067c8
 800596c:	080067d0 	.word	0x080067d0

08005970 <__errno>:
 8005970:	4b01      	ldr	r3, [pc, #4]	; (8005978 <__errno+0x8>)
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	2000000c 	.word	0x2000000c

0800597c <__libc_init_array>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	4e0d      	ldr	r6, [pc, #52]	; (80059b4 <__libc_init_array+0x38>)
 8005980:	4c0d      	ldr	r4, [pc, #52]	; (80059b8 <__libc_init_array+0x3c>)
 8005982:	1ba4      	subs	r4, r4, r6
 8005984:	10a4      	asrs	r4, r4, #2
 8005986:	2500      	movs	r5, #0
 8005988:	42a5      	cmp	r5, r4
 800598a:	d109      	bne.n	80059a0 <__libc_init_array+0x24>
 800598c:	4e0b      	ldr	r6, [pc, #44]	; (80059bc <__libc_init_array+0x40>)
 800598e:	4c0c      	ldr	r4, [pc, #48]	; (80059c0 <__libc_init_array+0x44>)
 8005990:	f000 ff04 	bl	800679c <_init>
 8005994:	1ba4      	subs	r4, r4, r6
 8005996:	10a4      	asrs	r4, r4, #2
 8005998:	2500      	movs	r5, #0
 800599a:	42a5      	cmp	r5, r4
 800599c:	d105      	bne.n	80059aa <__libc_init_array+0x2e>
 800599e:	bd70      	pop	{r4, r5, r6, pc}
 80059a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059a4:	4798      	blx	r3
 80059a6:	3501      	adds	r5, #1
 80059a8:	e7ee      	b.n	8005988 <__libc_init_array+0xc>
 80059aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059ae:	4798      	blx	r3
 80059b0:	3501      	adds	r5, #1
 80059b2:	e7f2      	b.n	800599a <__libc_init_array+0x1e>
 80059b4:	080068d8 	.word	0x080068d8
 80059b8:	080068d8 	.word	0x080068d8
 80059bc:	080068d8 	.word	0x080068d8
 80059c0:	080068dc 	.word	0x080068dc

080059c4 <memset>:
 80059c4:	4402      	add	r2, r0
 80059c6:	4603      	mov	r3, r0
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d100      	bne.n	80059ce <memset+0xa>
 80059cc:	4770      	bx	lr
 80059ce:	f803 1b01 	strb.w	r1, [r3], #1
 80059d2:	e7f9      	b.n	80059c8 <memset+0x4>

080059d4 <iprintf>:
 80059d4:	b40f      	push	{r0, r1, r2, r3}
 80059d6:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <iprintf+0x2c>)
 80059d8:	b513      	push	{r0, r1, r4, lr}
 80059da:	681c      	ldr	r4, [r3, #0]
 80059dc:	b124      	cbz	r4, 80059e8 <iprintf+0x14>
 80059de:	69a3      	ldr	r3, [r4, #24]
 80059e0:	b913      	cbnz	r3, 80059e8 <iprintf+0x14>
 80059e2:	4620      	mov	r0, r4
 80059e4:	f000 f84e 	bl	8005a84 <__sinit>
 80059e8:	ab05      	add	r3, sp, #20
 80059ea:	9a04      	ldr	r2, [sp, #16]
 80059ec:	68a1      	ldr	r1, [r4, #8]
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 f955 	bl	8005ca0 <_vfiprintf_r>
 80059f6:	b002      	add	sp, #8
 80059f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059fc:	b004      	add	sp, #16
 80059fe:	4770      	bx	lr
 8005a00:	2000000c 	.word	0x2000000c

08005a04 <std>:
 8005a04:	2300      	movs	r3, #0
 8005a06:	b510      	push	{r4, lr}
 8005a08:	4604      	mov	r4, r0
 8005a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a0e:	6083      	str	r3, [r0, #8]
 8005a10:	8181      	strh	r1, [r0, #12]
 8005a12:	6643      	str	r3, [r0, #100]	; 0x64
 8005a14:	81c2      	strh	r2, [r0, #14]
 8005a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a1a:	6183      	str	r3, [r0, #24]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	2208      	movs	r2, #8
 8005a20:	305c      	adds	r0, #92	; 0x5c
 8005a22:	f7ff ffcf 	bl	80059c4 <memset>
 8005a26:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <std+0x38>)
 8005a28:	6263      	str	r3, [r4, #36]	; 0x24
 8005a2a:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <std+0x3c>)
 8005a2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a2e:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <std+0x40>)
 8005a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a32:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <std+0x44>)
 8005a34:	6224      	str	r4, [r4, #32]
 8005a36:	6323      	str	r3, [r4, #48]	; 0x30
 8005a38:	bd10      	pop	{r4, pc}
 8005a3a:	bf00      	nop
 8005a3c:	080061fd 	.word	0x080061fd
 8005a40:	0800621f 	.word	0x0800621f
 8005a44:	08006257 	.word	0x08006257
 8005a48:	0800627b 	.word	0x0800627b

08005a4c <_cleanup_r>:
 8005a4c:	4901      	ldr	r1, [pc, #4]	; (8005a54 <_cleanup_r+0x8>)
 8005a4e:	f000 b885 	b.w	8005b5c <_fwalk_reent>
 8005a52:	bf00      	nop
 8005a54:	08006555 	.word	0x08006555

08005a58 <__sfmoreglue>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	1e4a      	subs	r2, r1, #1
 8005a5c:	2568      	movs	r5, #104	; 0x68
 8005a5e:	4355      	muls	r5, r2
 8005a60:	460e      	mov	r6, r1
 8005a62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a66:	f000 f897 	bl	8005b98 <_malloc_r>
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	b140      	cbz	r0, 8005a80 <__sfmoreglue+0x28>
 8005a6e:	2100      	movs	r1, #0
 8005a70:	e9c0 1600 	strd	r1, r6, [r0]
 8005a74:	300c      	adds	r0, #12
 8005a76:	60a0      	str	r0, [r4, #8]
 8005a78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a7c:	f7ff ffa2 	bl	80059c4 <memset>
 8005a80:	4620      	mov	r0, r4
 8005a82:	bd70      	pop	{r4, r5, r6, pc}

08005a84 <__sinit>:
 8005a84:	6983      	ldr	r3, [r0, #24]
 8005a86:	b510      	push	{r4, lr}
 8005a88:	4604      	mov	r4, r0
 8005a8a:	bb33      	cbnz	r3, 8005ada <__sinit+0x56>
 8005a8c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005a90:	6503      	str	r3, [r0, #80]	; 0x50
 8005a92:	4b12      	ldr	r3, [pc, #72]	; (8005adc <__sinit+0x58>)
 8005a94:	4a12      	ldr	r2, [pc, #72]	; (8005ae0 <__sinit+0x5c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6282      	str	r2, [r0, #40]	; 0x28
 8005a9a:	4298      	cmp	r0, r3
 8005a9c:	bf04      	itt	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	6183      	streq	r3, [r0, #24]
 8005aa2:	f000 f81f 	bl	8005ae4 <__sfp>
 8005aa6:	6060      	str	r0, [r4, #4]
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 f81b 	bl	8005ae4 <__sfp>
 8005aae:	60a0      	str	r0, [r4, #8]
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 f817 	bl	8005ae4 <__sfp>
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	60e0      	str	r0, [r4, #12]
 8005aba:	2104      	movs	r1, #4
 8005abc:	6860      	ldr	r0, [r4, #4]
 8005abe:	f7ff ffa1 	bl	8005a04 <std>
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	2109      	movs	r1, #9
 8005ac6:	68a0      	ldr	r0, [r4, #8]
 8005ac8:	f7ff ff9c 	bl	8005a04 <std>
 8005acc:	2202      	movs	r2, #2
 8005ace:	2112      	movs	r1, #18
 8005ad0:	68e0      	ldr	r0, [r4, #12]
 8005ad2:	f7ff ff97 	bl	8005a04 <std>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	61a3      	str	r3, [r4, #24]
 8005ada:	bd10      	pop	{r4, pc}
 8005adc:	08006838 	.word	0x08006838
 8005ae0:	08005a4d 	.word	0x08005a4d

08005ae4 <__sfp>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <__sfp+0x70>)
 8005ae8:	681e      	ldr	r6, [r3, #0]
 8005aea:	69b3      	ldr	r3, [r6, #24]
 8005aec:	4607      	mov	r7, r0
 8005aee:	b913      	cbnz	r3, 8005af6 <__sfp+0x12>
 8005af0:	4630      	mov	r0, r6
 8005af2:	f7ff ffc7 	bl	8005a84 <__sinit>
 8005af6:	3648      	adds	r6, #72	; 0x48
 8005af8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	d503      	bpl.n	8005b08 <__sfp+0x24>
 8005b00:	6833      	ldr	r3, [r6, #0]
 8005b02:	b133      	cbz	r3, 8005b12 <__sfp+0x2e>
 8005b04:	6836      	ldr	r6, [r6, #0]
 8005b06:	e7f7      	b.n	8005af8 <__sfp+0x14>
 8005b08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b0c:	b16d      	cbz	r5, 8005b2a <__sfp+0x46>
 8005b0e:	3468      	adds	r4, #104	; 0x68
 8005b10:	e7f4      	b.n	8005afc <__sfp+0x18>
 8005b12:	2104      	movs	r1, #4
 8005b14:	4638      	mov	r0, r7
 8005b16:	f7ff ff9f 	bl	8005a58 <__sfmoreglue>
 8005b1a:	6030      	str	r0, [r6, #0]
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d1f1      	bne.n	8005b04 <__sfp+0x20>
 8005b20:	230c      	movs	r3, #12
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	4604      	mov	r4, r0
 8005b26:	4620      	mov	r0, r4
 8005b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <__sfp+0x74>)
 8005b2c:	6665      	str	r5, [r4, #100]	; 0x64
 8005b2e:	e9c4 5500 	strd	r5, r5, [r4]
 8005b32:	60a5      	str	r5, [r4, #8]
 8005b34:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005b38:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	4629      	mov	r1, r5
 8005b40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b44:	f7ff ff3e 	bl	80059c4 <memset>
 8005b48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b50:	e7e9      	b.n	8005b26 <__sfp+0x42>
 8005b52:	bf00      	nop
 8005b54:	08006838 	.word	0x08006838
 8005b58:	ffff0001 	.word	0xffff0001

08005b5c <_fwalk_reent>:
 8005b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b60:	4680      	mov	r8, r0
 8005b62:	4689      	mov	r9, r1
 8005b64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b68:	2600      	movs	r6, #0
 8005b6a:	b914      	cbnz	r4, 8005b72 <_fwalk_reent+0x16>
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b72:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005b76:	3f01      	subs	r7, #1
 8005b78:	d501      	bpl.n	8005b7e <_fwalk_reent+0x22>
 8005b7a:	6824      	ldr	r4, [r4, #0]
 8005b7c:	e7f5      	b.n	8005b6a <_fwalk_reent+0xe>
 8005b7e:	89ab      	ldrh	r3, [r5, #12]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d907      	bls.n	8005b94 <_fwalk_reent+0x38>
 8005b84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	d003      	beq.n	8005b94 <_fwalk_reent+0x38>
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	4640      	mov	r0, r8
 8005b90:	47c8      	blx	r9
 8005b92:	4306      	orrs	r6, r0
 8005b94:	3568      	adds	r5, #104	; 0x68
 8005b96:	e7ee      	b.n	8005b76 <_fwalk_reent+0x1a>

08005b98 <_malloc_r>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	1ccd      	adds	r5, r1, #3
 8005b9c:	f025 0503 	bic.w	r5, r5, #3
 8005ba0:	3508      	adds	r5, #8
 8005ba2:	2d0c      	cmp	r5, #12
 8005ba4:	bf38      	it	cc
 8005ba6:	250c      	movcc	r5, #12
 8005ba8:	2d00      	cmp	r5, #0
 8005baa:	4606      	mov	r6, r0
 8005bac:	db01      	blt.n	8005bb2 <_malloc_r+0x1a>
 8005bae:	42a9      	cmp	r1, r5
 8005bb0:	d903      	bls.n	8005bba <_malloc_r+0x22>
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	6033      	str	r3, [r6, #0]
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	bd70      	pop	{r4, r5, r6, pc}
 8005bba:	f000 fd6b 	bl	8006694 <__malloc_lock>
 8005bbe:	4a21      	ldr	r2, [pc, #132]	; (8005c44 <_malloc_r+0xac>)
 8005bc0:	6814      	ldr	r4, [r2, #0]
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	b991      	cbnz	r1, 8005bec <_malloc_r+0x54>
 8005bc6:	4c20      	ldr	r4, [pc, #128]	; (8005c48 <_malloc_r+0xb0>)
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	b91b      	cbnz	r3, 8005bd4 <_malloc_r+0x3c>
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f000 fb05 	bl	80061dc <_sbrk_r>
 8005bd2:	6020      	str	r0, [r4, #0]
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f000 fb00 	bl	80061dc <_sbrk_r>
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	d124      	bne.n	8005c2a <_malloc_r+0x92>
 8005be0:	230c      	movs	r3, #12
 8005be2:	6033      	str	r3, [r6, #0]
 8005be4:	4630      	mov	r0, r6
 8005be6:	f000 fd56 	bl	8006696 <__malloc_unlock>
 8005bea:	e7e4      	b.n	8005bb6 <_malloc_r+0x1e>
 8005bec:	680b      	ldr	r3, [r1, #0]
 8005bee:	1b5b      	subs	r3, r3, r5
 8005bf0:	d418      	bmi.n	8005c24 <_malloc_r+0x8c>
 8005bf2:	2b0b      	cmp	r3, #11
 8005bf4:	d90f      	bls.n	8005c16 <_malloc_r+0x7e>
 8005bf6:	600b      	str	r3, [r1, #0]
 8005bf8:	50cd      	str	r5, [r1, r3]
 8005bfa:	18cc      	adds	r4, r1, r3
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	f000 fd4a 	bl	8006696 <__malloc_unlock>
 8005c02:	f104 000b 	add.w	r0, r4, #11
 8005c06:	1d23      	adds	r3, r4, #4
 8005c08:	f020 0007 	bic.w	r0, r0, #7
 8005c0c:	1ac3      	subs	r3, r0, r3
 8005c0e:	d0d3      	beq.n	8005bb8 <_malloc_r+0x20>
 8005c10:	425a      	negs	r2, r3
 8005c12:	50e2      	str	r2, [r4, r3]
 8005c14:	e7d0      	b.n	8005bb8 <_malloc_r+0x20>
 8005c16:	428c      	cmp	r4, r1
 8005c18:	684b      	ldr	r3, [r1, #4]
 8005c1a:	bf16      	itet	ne
 8005c1c:	6063      	strne	r3, [r4, #4]
 8005c1e:	6013      	streq	r3, [r2, #0]
 8005c20:	460c      	movne	r4, r1
 8005c22:	e7eb      	b.n	8005bfc <_malloc_r+0x64>
 8005c24:	460c      	mov	r4, r1
 8005c26:	6849      	ldr	r1, [r1, #4]
 8005c28:	e7cc      	b.n	8005bc4 <_malloc_r+0x2c>
 8005c2a:	1cc4      	adds	r4, r0, #3
 8005c2c:	f024 0403 	bic.w	r4, r4, #3
 8005c30:	42a0      	cmp	r0, r4
 8005c32:	d005      	beq.n	8005c40 <_malloc_r+0xa8>
 8005c34:	1a21      	subs	r1, r4, r0
 8005c36:	4630      	mov	r0, r6
 8005c38:	f000 fad0 	bl	80061dc <_sbrk_r>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d0cf      	beq.n	8005be0 <_malloc_r+0x48>
 8005c40:	6025      	str	r5, [r4, #0]
 8005c42:	e7db      	b.n	8005bfc <_malloc_r+0x64>
 8005c44:	20000094 	.word	0x20000094
 8005c48:	20000098 	.word	0x20000098

08005c4c <__sfputc_r>:
 8005c4c:	6893      	ldr	r3, [r2, #8]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	b410      	push	{r4}
 8005c54:	6093      	str	r3, [r2, #8]
 8005c56:	da08      	bge.n	8005c6a <__sfputc_r+0x1e>
 8005c58:	6994      	ldr	r4, [r2, #24]
 8005c5a:	42a3      	cmp	r3, r4
 8005c5c:	db01      	blt.n	8005c62 <__sfputc_r+0x16>
 8005c5e:	290a      	cmp	r1, #10
 8005c60:	d103      	bne.n	8005c6a <__sfputc_r+0x1e>
 8005c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c66:	f000 bb0d 	b.w	8006284 <__swbuf_r>
 8005c6a:	6813      	ldr	r3, [r2, #0]
 8005c6c:	1c58      	adds	r0, r3, #1
 8005c6e:	6010      	str	r0, [r2, #0]
 8005c70:	7019      	strb	r1, [r3, #0]
 8005c72:	4608      	mov	r0, r1
 8005c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <__sfputs_r>:
 8005c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	460f      	mov	r7, r1
 8005c80:	4614      	mov	r4, r2
 8005c82:	18d5      	adds	r5, r2, r3
 8005c84:	42ac      	cmp	r4, r5
 8005c86:	d101      	bne.n	8005c8c <__sfputs_r+0x12>
 8005c88:	2000      	movs	r0, #0
 8005c8a:	e007      	b.n	8005c9c <__sfputs_r+0x22>
 8005c8c:	463a      	mov	r2, r7
 8005c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c92:	4630      	mov	r0, r6
 8005c94:	f7ff ffda 	bl	8005c4c <__sfputc_r>
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	d1f3      	bne.n	8005c84 <__sfputs_r+0xa>
 8005c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ca0 <_vfiprintf_r>:
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	b09d      	sub	sp, #116	; 0x74
 8005ca8:	4617      	mov	r7, r2
 8005caa:	461d      	mov	r5, r3
 8005cac:	4606      	mov	r6, r0
 8005cae:	b118      	cbz	r0, 8005cb8 <_vfiprintf_r+0x18>
 8005cb0:	6983      	ldr	r3, [r0, #24]
 8005cb2:	b90b      	cbnz	r3, 8005cb8 <_vfiprintf_r+0x18>
 8005cb4:	f7ff fee6 	bl	8005a84 <__sinit>
 8005cb8:	4b7c      	ldr	r3, [pc, #496]	; (8005eac <_vfiprintf_r+0x20c>)
 8005cba:	429c      	cmp	r4, r3
 8005cbc:	d158      	bne.n	8005d70 <_vfiprintf_r+0xd0>
 8005cbe:	6874      	ldr	r4, [r6, #4]
 8005cc0:	89a3      	ldrh	r3, [r4, #12]
 8005cc2:	0718      	lsls	r0, r3, #28
 8005cc4:	d55e      	bpl.n	8005d84 <_vfiprintf_r+0xe4>
 8005cc6:	6923      	ldr	r3, [r4, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d05b      	beq.n	8005d84 <_vfiprintf_r+0xe4>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cd6:	2330      	movs	r3, #48	; 0x30
 8005cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cdc:	9503      	str	r5, [sp, #12]
 8005cde:	f04f 0b01 	mov.w	fp, #1
 8005ce2:	46b8      	mov	r8, r7
 8005ce4:	4645      	mov	r5, r8
 8005ce6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005cea:	b10b      	cbz	r3, 8005cf0 <_vfiprintf_r+0x50>
 8005cec:	2b25      	cmp	r3, #37	; 0x25
 8005cee:	d154      	bne.n	8005d9a <_vfiprintf_r+0xfa>
 8005cf0:	ebb8 0a07 	subs.w	sl, r8, r7
 8005cf4:	d00b      	beq.n	8005d0e <_vfiprintf_r+0x6e>
 8005cf6:	4653      	mov	r3, sl
 8005cf8:	463a      	mov	r2, r7
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f7ff ffbc 	bl	8005c7a <__sfputs_r>
 8005d02:	3001      	adds	r0, #1
 8005d04:	f000 80c2 	beq.w	8005e8c <_vfiprintf_r+0x1ec>
 8005d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d0a:	4453      	add	r3, sl
 8005d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d0e:	f898 3000 	ldrb.w	r3, [r8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 80ba 	beq.w	8005e8c <_vfiprintf_r+0x1ec>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d22:	9304      	str	r3, [sp, #16]
 8005d24:	9307      	str	r3, [sp, #28]
 8005d26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d2a:	931a      	str	r3, [sp, #104]	; 0x68
 8005d2c:	46a8      	mov	r8, r5
 8005d2e:	2205      	movs	r2, #5
 8005d30:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005d34:	485e      	ldr	r0, [pc, #376]	; (8005eb0 <_vfiprintf_r+0x210>)
 8005d36:	f7fa fa63 	bl	8000200 <memchr>
 8005d3a:	9b04      	ldr	r3, [sp, #16]
 8005d3c:	bb78      	cbnz	r0, 8005d9e <_vfiprintf_r+0xfe>
 8005d3e:	06d9      	lsls	r1, r3, #27
 8005d40:	bf44      	itt	mi
 8005d42:	2220      	movmi	r2, #32
 8005d44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d48:	071a      	lsls	r2, r3, #28
 8005d4a:	bf44      	itt	mi
 8005d4c:	222b      	movmi	r2, #43	; 0x2b
 8005d4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d52:	782a      	ldrb	r2, [r5, #0]
 8005d54:	2a2a      	cmp	r2, #42	; 0x2a
 8005d56:	d02a      	beq.n	8005dae <_vfiprintf_r+0x10e>
 8005d58:	9a07      	ldr	r2, [sp, #28]
 8005d5a:	46a8      	mov	r8, r5
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	250a      	movs	r5, #10
 8005d60:	4641      	mov	r1, r8
 8005d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d66:	3b30      	subs	r3, #48	; 0x30
 8005d68:	2b09      	cmp	r3, #9
 8005d6a:	d969      	bls.n	8005e40 <_vfiprintf_r+0x1a0>
 8005d6c:	b360      	cbz	r0, 8005dc8 <_vfiprintf_r+0x128>
 8005d6e:	e024      	b.n	8005dba <_vfiprintf_r+0x11a>
 8005d70:	4b50      	ldr	r3, [pc, #320]	; (8005eb4 <_vfiprintf_r+0x214>)
 8005d72:	429c      	cmp	r4, r3
 8005d74:	d101      	bne.n	8005d7a <_vfiprintf_r+0xda>
 8005d76:	68b4      	ldr	r4, [r6, #8]
 8005d78:	e7a2      	b.n	8005cc0 <_vfiprintf_r+0x20>
 8005d7a:	4b4f      	ldr	r3, [pc, #316]	; (8005eb8 <_vfiprintf_r+0x218>)
 8005d7c:	429c      	cmp	r4, r3
 8005d7e:	bf08      	it	eq
 8005d80:	68f4      	ldreq	r4, [r6, #12]
 8005d82:	e79d      	b.n	8005cc0 <_vfiprintf_r+0x20>
 8005d84:	4621      	mov	r1, r4
 8005d86:	4630      	mov	r0, r6
 8005d88:	f000 fae0 	bl	800634c <__swsetup_r>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d09d      	beq.n	8005ccc <_vfiprintf_r+0x2c>
 8005d90:	f04f 30ff 	mov.w	r0, #4294967295
 8005d94:	b01d      	add	sp, #116	; 0x74
 8005d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9a:	46a8      	mov	r8, r5
 8005d9c:	e7a2      	b.n	8005ce4 <_vfiprintf_r+0x44>
 8005d9e:	4a44      	ldr	r2, [pc, #272]	; (8005eb0 <_vfiprintf_r+0x210>)
 8005da0:	1a80      	subs	r0, r0, r2
 8005da2:	fa0b f000 	lsl.w	r0, fp, r0
 8005da6:	4318      	orrs	r0, r3
 8005da8:	9004      	str	r0, [sp, #16]
 8005daa:	4645      	mov	r5, r8
 8005dac:	e7be      	b.n	8005d2c <_vfiprintf_r+0x8c>
 8005dae:	9a03      	ldr	r2, [sp, #12]
 8005db0:	1d11      	adds	r1, r2, #4
 8005db2:	6812      	ldr	r2, [r2, #0]
 8005db4:	9103      	str	r1, [sp, #12]
 8005db6:	2a00      	cmp	r2, #0
 8005db8:	db01      	blt.n	8005dbe <_vfiprintf_r+0x11e>
 8005dba:	9207      	str	r2, [sp, #28]
 8005dbc:	e004      	b.n	8005dc8 <_vfiprintf_r+0x128>
 8005dbe:	4252      	negs	r2, r2
 8005dc0:	f043 0302 	orr.w	r3, r3, #2
 8005dc4:	9207      	str	r2, [sp, #28]
 8005dc6:	9304      	str	r3, [sp, #16]
 8005dc8:	f898 3000 	ldrb.w	r3, [r8]
 8005dcc:	2b2e      	cmp	r3, #46	; 0x2e
 8005dce:	d10e      	bne.n	8005dee <_vfiprintf_r+0x14e>
 8005dd0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8005dd6:	d138      	bne.n	8005e4a <_vfiprintf_r+0x1aa>
 8005dd8:	9b03      	ldr	r3, [sp, #12]
 8005dda:	1d1a      	adds	r2, r3, #4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	9203      	str	r2, [sp, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	bfb8      	it	lt
 8005de4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005de8:	f108 0802 	add.w	r8, r8, #2
 8005dec:	9305      	str	r3, [sp, #20]
 8005dee:	4d33      	ldr	r5, [pc, #204]	; (8005ebc <_vfiprintf_r+0x21c>)
 8005df0:	f898 1000 	ldrb.w	r1, [r8]
 8005df4:	2203      	movs	r2, #3
 8005df6:	4628      	mov	r0, r5
 8005df8:	f7fa fa02 	bl	8000200 <memchr>
 8005dfc:	b140      	cbz	r0, 8005e10 <_vfiprintf_r+0x170>
 8005dfe:	2340      	movs	r3, #64	; 0x40
 8005e00:	1b40      	subs	r0, r0, r5
 8005e02:	fa03 f000 	lsl.w	r0, r3, r0
 8005e06:	9b04      	ldr	r3, [sp, #16]
 8005e08:	4303      	orrs	r3, r0
 8005e0a:	f108 0801 	add.w	r8, r8, #1
 8005e0e:	9304      	str	r3, [sp, #16]
 8005e10:	f898 1000 	ldrb.w	r1, [r8]
 8005e14:	482a      	ldr	r0, [pc, #168]	; (8005ec0 <_vfiprintf_r+0x220>)
 8005e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e1a:	2206      	movs	r2, #6
 8005e1c:	f108 0701 	add.w	r7, r8, #1
 8005e20:	f7fa f9ee 	bl	8000200 <memchr>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d037      	beq.n	8005e98 <_vfiprintf_r+0x1f8>
 8005e28:	4b26      	ldr	r3, [pc, #152]	; (8005ec4 <_vfiprintf_r+0x224>)
 8005e2a:	bb1b      	cbnz	r3, 8005e74 <_vfiprintf_r+0x1d4>
 8005e2c:	9b03      	ldr	r3, [sp, #12]
 8005e2e:	3307      	adds	r3, #7
 8005e30:	f023 0307 	bic.w	r3, r3, #7
 8005e34:	3308      	adds	r3, #8
 8005e36:	9303      	str	r3, [sp, #12]
 8005e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3a:	444b      	add	r3, r9
 8005e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e3e:	e750      	b.n	8005ce2 <_vfiprintf_r+0x42>
 8005e40:	fb05 3202 	mla	r2, r5, r2, r3
 8005e44:	2001      	movs	r0, #1
 8005e46:	4688      	mov	r8, r1
 8005e48:	e78a      	b.n	8005d60 <_vfiprintf_r+0xc0>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f108 0801 	add.w	r8, r8, #1
 8005e50:	9305      	str	r3, [sp, #20]
 8005e52:	4619      	mov	r1, r3
 8005e54:	250a      	movs	r5, #10
 8005e56:	4640      	mov	r0, r8
 8005e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e5c:	3a30      	subs	r2, #48	; 0x30
 8005e5e:	2a09      	cmp	r2, #9
 8005e60:	d903      	bls.n	8005e6a <_vfiprintf_r+0x1ca>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0c3      	beq.n	8005dee <_vfiprintf_r+0x14e>
 8005e66:	9105      	str	r1, [sp, #20]
 8005e68:	e7c1      	b.n	8005dee <_vfiprintf_r+0x14e>
 8005e6a:	fb05 2101 	mla	r1, r5, r1, r2
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4680      	mov	r8, r0
 8005e72:	e7f0      	b.n	8005e56 <_vfiprintf_r+0x1b6>
 8005e74:	ab03      	add	r3, sp, #12
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	4622      	mov	r2, r4
 8005e7a:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <_vfiprintf_r+0x228>)
 8005e7c:	a904      	add	r1, sp, #16
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f3af 8000 	nop.w
 8005e84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e88:	4681      	mov	r9, r0
 8005e8a:	d1d5      	bne.n	8005e38 <_vfiprintf_r+0x198>
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	065b      	lsls	r3, r3, #25
 8005e90:	f53f af7e 	bmi.w	8005d90 <_vfiprintf_r+0xf0>
 8005e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e96:	e77d      	b.n	8005d94 <_vfiprintf_r+0xf4>
 8005e98:	ab03      	add	r3, sp, #12
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <_vfiprintf_r+0x228>)
 8005ea0:	a904      	add	r1, sp, #16
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	f000 f888 	bl	8005fb8 <_printf_i>
 8005ea8:	e7ec      	b.n	8005e84 <_vfiprintf_r+0x1e4>
 8005eaa:	bf00      	nop
 8005eac:	0800685c 	.word	0x0800685c
 8005eb0:	0800689c 	.word	0x0800689c
 8005eb4:	0800687c 	.word	0x0800687c
 8005eb8:	0800683c 	.word	0x0800683c
 8005ebc:	080068a2 	.word	0x080068a2
 8005ec0:	080068a6 	.word	0x080068a6
 8005ec4:	00000000 	.word	0x00000000
 8005ec8:	08005c7b 	.word	0x08005c7b

08005ecc <_printf_common>:
 8005ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed0:	4691      	mov	r9, r2
 8005ed2:	461f      	mov	r7, r3
 8005ed4:	688a      	ldr	r2, [r1, #8]
 8005ed6:	690b      	ldr	r3, [r1, #16]
 8005ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005edc:	4293      	cmp	r3, r2
 8005ede:	bfb8      	it	lt
 8005ee0:	4613      	movlt	r3, r2
 8005ee2:	f8c9 3000 	str.w	r3, [r9]
 8005ee6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eea:	4606      	mov	r6, r0
 8005eec:	460c      	mov	r4, r1
 8005eee:	b112      	cbz	r2, 8005ef6 <_printf_common+0x2a>
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	f8c9 3000 	str.w	r3, [r9]
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	0699      	lsls	r1, r3, #26
 8005efa:	bf42      	ittt	mi
 8005efc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f00:	3302      	addmi	r3, #2
 8005f02:	f8c9 3000 	strmi.w	r3, [r9]
 8005f06:	6825      	ldr	r5, [r4, #0]
 8005f08:	f015 0506 	ands.w	r5, r5, #6
 8005f0c:	d107      	bne.n	8005f1e <_printf_common+0x52>
 8005f0e:	f104 0a19 	add.w	sl, r4, #25
 8005f12:	68e3      	ldr	r3, [r4, #12]
 8005f14:	f8d9 2000 	ldr.w	r2, [r9]
 8005f18:	1a9b      	subs	r3, r3, r2
 8005f1a:	42ab      	cmp	r3, r5
 8005f1c:	dc28      	bgt.n	8005f70 <_printf_common+0xa4>
 8005f1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f22:	6822      	ldr	r2, [r4, #0]
 8005f24:	3300      	adds	r3, #0
 8005f26:	bf18      	it	ne
 8005f28:	2301      	movne	r3, #1
 8005f2a:	0692      	lsls	r2, r2, #26
 8005f2c:	d42d      	bmi.n	8005f8a <_printf_common+0xbe>
 8005f2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f32:	4639      	mov	r1, r7
 8005f34:	4630      	mov	r0, r6
 8005f36:	47c0      	blx	r8
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d020      	beq.n	8005f7e <_printf_common+0xb2>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	68e5      	ldr	r5, [r4, #12]
 8005f40:	f8d9 2000 	ldr.w	r2, [r9]
 8005f44:	f003 0306 	and.w	r3, r3, #6
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	bf08      	it	eq
 8005f4c:	1aad      	subeq	r5, r5, r2
 8005f4e:	68a3      	ldr	r3, [r4, #8]
 8005f50:	6922      	ldr	r2, [r4, #16]
 8005f52:	bf0c      	ite	eq
 8005f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f58:	2500      	movne	r5, #0
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	bfc4      	itt	gt
 8005f5e:	1a9b      	subgt	r3, r3, r2
 8005f60:	18ed      	addgt	r5, r5, r3
 8005f62:	f04f 0900 	mov.w	r9, #0
 8005f66:	341a      	adds	r4, #26
 8005f68:	454d      	cmp	r5, r9
 8005f6a:	d11a      	bne.n	8005fa2 <_printf_common+0xd6>
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	e008      	b.n	8005f82 <_printf_common+0xb6>
 8005f70:	2301      	movs	r3, #1
 8005f72:	4652      	mov	r2, sl
 8005f74:	4639      	mov	r1, r7
 8005f76:	4630      	mov	r0, r6
 8005f78:	47c0      	blx	r8
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	d103      	bne.n	8005f86 <_printf_common+0xba>
 8005f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f86:	3501      	adds	r5, #1
 8005f88:	e7c3      	b.n	8005f12 <_printf_common+0x46>
 8005f8a:	18e1      	adds	r1, r4, r3
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	2030      	movs	r0, #48	; 0x30
 8005f90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f94:	4422      	add	r2, r4
 8005f96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f9e:	3302      	adds	r3, #2
 8005fa0:	e7c5      	b.n	8005f2e <_printf_common+0x62>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	4630      	mov	r0, r6
 8005faa:	47c0      	blx	r8
 8005fac:	3001      	adds	r0, #1
 8005fae:	d0e6      	beq.n	8005f7e <_printf_common+0xb2>
 8005fb0:	f109 0901 	add.w	r9, r9, #1
 8005fb4:	e7d8      	b.n	8005f68 <_printf_common+0x9c>
	...

08005fb8 <_printf_i>:
 8005fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	7e09      	ldrb	r1, [r1, #24]
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	296e      	cmp	r1, #110	; 0x6e
 8005fc8:	4617      	mov	r7, r2
 8005fca:	4606      	mov	r6, r0
 8005fcc:	4698      	mov	r8, r3
 8005fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fd0:	f000 80b3 	beq.w	800613a <_printf_i+0x182>
 8005fd4:	d822      	bhi.n	800601c <_printf_i+0x64>
 8005fd6:	2963      	cmp	r1, #99	; 0x63
 8005fd8:	d036      	beq.n	8006048 <_printf_i+0x90>
 8005fda:	d80a      	bhi.n	8005ff2 <_printf_i+0x3a>
 8005fdc:	2900      	cmp	r1, #0
 8005fde:	f000 80b9 	beq.w	8006154 <_printf_i+0x19c>
 8005fe2:	2958      	cmp	r1, #88	; 0x58
 8005fe4:	f000 8083 	beq.w	80060ee <_printf_i+0x136>
 8005fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ff0:	e032      	b.n	8006058 <_printf_i+0xa0>
 8005ff2:	2964      	cmp	r1, #100	; 0x64
 8005ff4:	d001      	beq.n	8005ffa <_printf_i+0x42>
 8005ff6:	2969      	cmp	r1, #105	; 0x69
 8005ff8:	d1f6      	bne.n	8005fe8 <_printf_i+0x30>
 8005ffa:	6820      	ldr	r0, [r4, #0]
 8005ffc:	6813      	ldr	r3, [r2, #0]
 8005ffe:	0605      	lsls	r5, r0, #24
 8006000:	f103 0104 	add.w	r1, r3, #4
 8006004:	d52a      	bpl.n	800605c <_printf_i+0xa4>
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6011      	str	r1, [r2, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	da03      	bge.n	8006016 <_printf_i+0x5e>
 800600e:	222d      	movs	r2, #45	; 0x2d
 8006010:	425b      	negs	r3, r3
 8006012:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006016:	486f      	ldr	r0, [pc, #444]	; (80061d4 <_printf_i+0x21c>)
 8006018:	220a      	movs	r2, #10
 800601a:	e039      	b.n	8006090 <_printf_i+0xd8>
 800601c:	2973      	cmp	r1, #115	; 0x73
 800601e:	f000 809d 	beq.w	800615c <_printf_i+0x1a4>
 8006022:	d808      	bhi.n	8006036 <_printf_i+0x7e>
 8006024:	296f      	cmp	r1, #111	; 0x6f
 8006026:	d020      	beq.n	800606a <_printf_i+0xb2>
 8006028:	2970      	cmp	r1, #112	; 0x70
 800602a:	d1dd      	bne.n	8005fe8 <_printf_i+0x30>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	f043 0320 	orr.w	r3, r3, #32
 8006032:	6023      	str	r3, [r4, #0]
 8006034:	e003      	b.n	800603e <_printf_i+0x86>
 8006036:	2975      	cmp	r1, #117	; 0x75
 8006038:	d017      	beq.n	800606a <_printf_i+0xb2>
 800603a:	2978      	cmp	r1, #120	; 0x78
 800603c:	d1d4      	bne.n	8005fe8 <_printf_i+0x30>
 800603e:	2378      	movs	r3, #120	; 0x78
 8006040:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006044:	4864      	ldr	r0, [pc, #400]	; (80061d8 <_printf_i+0x220>)
 8006046:	e055      	b.n	80060f4 <_printf_i+0x13c>
 8006048:	6813      	ldr	r3, [r2, #0]
 800604a:	1d19      	adds	r1, r3, #4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6011      	str	r1, [r2, #0]
 8006050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006058:	2301      	movs	r3, #1
 800605a:	e08c      	b.n	8006176 <_printf_i+0x1be>
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6011      	str	r1, [r2, #0]
 8006060:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006064:	bf18      	it	ne
 8006066:	b21b      	sxthne	r3, r3
 8006068:	e7cf      	b.n	800600a <_printf_i+0x52>
 800606a:	6813      	ldr	r3, [r2, #0]
 800606c:	6825      	ldr	r5, [r4, #0]
 800606e:	1d18      	adds	r0, r3, #4
 8006070:	6010      	str	r0, [r2, #0]
 8006072:	0628      	lsls	r0, r5, #24
 8006074:	d501      	bpl.n	800607a <_printf_i+0xc2>
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	e002      	b.n	8006080 <_printf_i+0xc8>
 800607a:	0668      	lsls	r0, r5, #25
 800607c:	d5fb      	bpl.n	8006076 <_printf_i+0xbe>
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	4854      	ldr	r0, [pc, #336]	; (80061d4 <_printf_i+0x21c>)
 8006082:	296f      	cmp	r1, #111	; 0x6f
 8006084:	bf14      	ite	ne
 8006086:	220a      	movne	r2, #10
 8006088:	2208      	moveq	r2, #8
 800608a:	2100      	movs	r1, #0
 800608c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006090:	6865      	ldr	r5, [r4, #4]
 8006092:	60a5      	str	r5, [r4, #8]
 8006094:	2d00      	cmp	r5, #0
 8006096:	f2c0 8095 	blt.w	80061c4 <_printf_i+0x20c>
 800609a:	6821      	ldr	r1, [r4, #0]
 800609c:	f021 0104 	bic.w	r1, r1, #4
 80060a0:	6021      	str	r1, [r4, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d13d      	bne.n	8006122 <_printf_i+0x16a>
 80060a6:	2d00      	cmp	r5, #0
 80060a8:	f040 808e 	bne.w	80061c8 <_printf_i+0x210>
 80060ac:	4665      	mov	r5, ip
 80060ae:	2a08      	cmp	r2, #8
 80060b0:	d10b      	bne.n	80060ca <_printf_i+0x112>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	07db      	lsls	r3, r3, #31
 80060b6:	d508      	bpl.n	80060ca <_printf_i+0x112>
 80060b8:	6923      	ldr	r3, [r4, #16]
 80060ba:	6862      	ldr	r2, [r4, #4]
 80060bc:	429a      	cmp	r2, r3
 80060be:	bfde      	ittt	le
 80060c0:	2330      	movle	r3, #48	; 0x30
 80060c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060ca:	ebac 0305 	sub.w	r3, ip, r5
 80060ce:	6123      	str	r3, [r4, #16]
 80060d0:	f8cd 8000 	str.w	r8, [sp]
 80060d4:	463b      	mov	r3, r7
 80060d6:	aa03      	add	r2, sp, #12
 80060d8:	4621      	mov	r1, r4
 80060da:	4630      	mov	r0, r6
 80060dc:	f7ff fef6 	bl	8005ecc <_printf_common>
 80060e0:	3001      	adds	r0, #1
 80060e2:	d14d      	bne.n	8006180 <_printf_i+0x1c8>
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295
 80060e8:	b005      	add	sp, #20
 80060ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060ee:	4839      	ldr	r0, [pc, #228]	; (80061d4 <_printf_i+0x21c>)
 80060f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80060f4:	6813      	ldr	r3, [r2, #0]
 80060f6:	6821      	ldr	r1, [r4, #0]
 80060f8:	1d1d      	adds	r5, r3, #4
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6015      	str	r5, [r2, #0]
 80060fe:	060a      	lsls	r2, r1, #24
 8006100:	d50b      	bpl.n	800611a <_printf_i+0x162>
 8006102:	07ca      	lsls	r2, r1, #31
 8006104:	bf44      	itt	mi
 8006106:	f041 0120 	orrmi.w	r1, r1, #32
 800610a:	6021      	strmi	r1, [r4, #0]
 800610c:	b91b      	cbnz	r3, 8006116 <_printf_i+0x15e>
 800610e:	6822      	ldr	r2, [r4, #0]
 8006110:	f022 0220 	bic.w	r2, r2, #32
 8006114:	6022      	str	r2, [r4, #0]
 8006116:	2210      	movs	r2, #16
 8006118:	e7b7      	b.n	800608a <_printf_i+0xd2>
 800611a:	064d      	lsls	r5, r1, #25
 800611c:	bf48      	it	mi
 800611e:	b29b      	uxthmi	r3, r3
 8006120:	e7ef      	b.n	8006102 <_printf_i+0x14a>
 8006122:	4665      	mov	r5, ip
 8006124:	fbb3 f1f2 	udiv	r1, r3, r2
 8006128:	fb02 3311 	mls	r3, r2, r1, r3
 800612c:	5cc3      	ldrb	r3, [r0, r3]
 800612e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006132:	460b      	mov	r3, r1
 8006134:	2900      	cmp	r1, #0
 8006136:	d1f5      	bne.n	8006124 <_printf_i+0x16c>
 8006138:	e7b9      	b.n	80060ae <_printf_i+0xf6>
 800613a:	6813      	ldr	r3, [r2, #0]
 800613c:	6825      	ldr	r5, [r4, #0]
 800613e:	6961      	ldr	r1, [r4, #20]
 8006140:	1d18      	adds	r0, r3, #4
 8006142:	6010      	str	r0, [r2, #0]
 8006144:	0628      	lsls	r0, r5, #24
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	d501      	bpl.n	800614e <_printf_i+0x196>
 800614a:	6019      	str	r1, [r3, #0]
 800614c:	e002      	b.n	8006154 <_printf_i+0x19c>
 800614e:	066a      	lsls	r2, r5, #25
 8006150:	d5fb      	bpl.n	800614a <_printf_i+0x192>
 8006152:	8019      	strh	r1, [r3, #0]
 8006154:	2300      	movs	r3, #0
 8006156:	6123      	str	r3, [r4, #16]
 8006158:	4665      	mov	r5, ip
 800615a:	e7b9      	b.n	80060d0 <_printf_i+0x118>
 800615c:	6813      	ldr	r3, [r2, #0]
 800615e:	1d19      	adds	r1, r3, #4
 8006160:	6011      	str	r1, [r2, #0]
 8006162:	681d      	ldr	r5, [r3, #0]
 8006164:	6862      	ldr	r2, [r4, #4]
 8006166:	2100      	movs	r1, #0
 8006168:	4628      	mov	r0, r5
 800616a:	f7fa f849 	bl	8000200 <memchr>
 800616e:	b108      	cbz	r0, 8006174 <_printf_i+0x1bc>
 8006170:	1b40      	subs	r0, r0, r5
 8006172:	6060      	str	r0, [r4, #4]
 8006174:	6863      	ldr	r3, [r4, #4]
 8006176:	6123      	str	r3, [r4, #16]
 8006178:	2300      	movs	r3, #0
 800617a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800617e:	e7a7      	b.n	80060d0 <_printf_i+0x118>
 8006180:	6923      	ldr	r3, [r4, #16]
 8006182:	462a      	mov	r2, r5
 8006184:	4639      	mov	r1, r7
 8006186:	4630      	mov	r0, r6
 8006188:	47c0      	blx	r8
 800618a:	3001      	adds	r0, #1
 800618c:	d0aa      	beq.n	80060e4 <_printf_i+0x12c>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	079b      	lsls	r3, r3, #30
 8006192:	d413      	bmi.n	80061bc <_printf_i+0x204>
 8006194:	68e0      	ldr	r0, [r4, #12]
 8006196:	9b03      	ldr	r3, [sp, #12]
 8006198:	4298      	cmp	r0, r3
 800619a:	bfb8      	it	lt
 800619c:	4618      	movlt	r0, r3
 800619e:	e7a3      	b.n	80060e8 <_printf_i+0x130>
 80061a0:	2301      	movs	r3, #1
 80061a2:	464a      	mov	r2, r9
 80061a4:	4639      	mov	r1, r7
 80061a6:	4630      	mov	r0, r6
 80061a8:	47c0      	blx	r8
 80061aa:	3001      	adds	r0, #1
 80061ac:	d09a      	beq.n	80060e4 <_printf_i+0x12c>
 80061ae:	3501      	adds	r5, #1
 80061b0:	68e3      	ldr	r3, [r4, #12]
 80061b2:	9a03      	ldr	r2, [sp, #12]
 80061b4:	1a9b      	subs	r3, r3, r2
 80061b6:	42ab      	cmp	r3, r5
 80061b8:	dcf2      	bgt.n	80061a0 <_printf_i+0x1e8>
 80061ba:	e7eb      	b.n	8006194 <_printf_i+0x1dc>
 80061bc:	2500      	movs	r5, #0
 80061be:	f104 0919 	add.w	r9, r4, #25
 80061c2:	e7f5      	b.n	80061b0 <_printf_i+0x1f8>
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1ac      	bne.n	8006122 <_printf_i+0x16a>
 80061c8:	7803      	ldrb	r3, [r0, #0]
 80061ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d2:	e76c      	b.n	80060ae <_printf_i+0xf6>
 80061d4:	080068ad 	.word	0x080068ad
 80061d8:	080068be 	.word	0x080068be

080061dc <_sbrk_r>:
 80061dc:	b538      	push	{r3, r4, r5, lr}
 80061de:	4c06      	ldr	r4, [pc, #24]	; (80061f8 <_sbrk_r+0x1c>)
 80061e0:	2300      	movs	r3, #0
 80061e2:	4605      	mov	r5, r0
 80061e4:	4608      	mov	r0, r1
 80061e6:	6023      	str	r3, [r4, #0]
 80061e8:	f7fa fe18 	bl	8000e1c <_sbrk>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_sbrk_r+0x1a>
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_sbrk_r+0x1a>
 80061f4:	602b      	str	r3, [r5, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	200001ac 	.word	0x200001ac

080061fc <__sread>:
 80061fc:	b510      	push	{r4, lr}
 80061fe:	460c      	mov	r4, r1
 8006200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006204:	f000 fa96 	bl	8006734 <_read_r>
 8006208:	2800      	cmp	r0, #0
 800620a:	bfab      	itete	ge
 800620c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800620e:	89a3      	ldrhlt	r3, [r4, #12]
 8006210:	181b      	addge	r3, r3, r0
 8006212:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006216:	bfac      	ite	ge
 8006218:	6563      	strge	r3, [r4, #84]	; 0x54
 800621a:	81a3      	strhlt	r3, [r4, #12]
 800621c:	bd10      	pop	{r4, pc}

0800621e <__swrite>:
 800621e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006222:	461f      	mov	r7, r3
 8006224:	898b      	ldrh	r3, [r1, #12]
 8006226:	05db      	lsls	r3, r3, #23
 8006228:	4605      	mov	r5, r0
 800622a:	460c      	mov	r4, r1
 800622c:	4616      	mov	r6, r2
 800622e:	d505      	bpl.n	800623c <__swrite+0x1e>
 8006230:	2302      	movs	r3, #2
 8006232:	2200      	movs	r2, #0
 8006234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006238:	f000 f9b6 	bl	80065a8 <_lseek_r>
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	4632      	mov	r2, r6
 800624a:	463b      	mov	r3, r7
 800624c:	4628      	mov	r0, r5
 800624e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006252:	f000 b869 	b.w	8006328 <_write_r>

08006256 <__sseek>:
 8006256:	b510      	push	{r4, lr}
 8006258:	460c      	mov	r4, r1
 800625a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800625e:	f000 f9a3 	bl	80065a8 <_lseek_r>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	bf15      	itete	ne
 8006268:	6560      	strne	r0, [r4, #84]	; 0x54
 800626a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800626e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006272:	81a3      	strheq	r3, [r4, #12]
 8006274:	bf18      	it	ne
 8006276:	81a3      	strhne	r3, [r4, #12]
 8006278:	bd10      	pop	{r4, pc}

0800627a <__sclose>:
 800627a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800627e:	f000 b8d3 	b.w	8006428 <_close_r>
	...

08006284 <__swbuf_r>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	460e      	mov	r6, r1
 8006288:	4614      	mov	r4, r2
 800628a:	4605      	mov	r5, r0
 800628c:	b118      	cbz	r0, 8006296 <__swbuf_r+0x12>
 800628e:	6983      	ldr	r3, [r0, #24]
 8006290:	b90b      	cbnz	r3, 8006296 <__swbuf_r+0x12>
 8006292:	f7ff fbf7 	bl	8005a84 <__sinit>
 8006296:	4b21      	ldr	r3, [pc, #132]	; (800631c <__swbuf_r+0x98>)
 8006298:	429c      	cmp	r4, r3
 800629a:	d12a      	bne.n	80062f2 <__swbuf_r+0x6e>
 800629c:	686c      	ldr	r4, [r5, #4]
 800629e:	69a3      	ldr	r3, [r4, #24]
 80062a0:	60a3      	str	r3, [r4, #8]
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	071a      	lsls	r2, r3, #28
 80062a6:	d52e      	bpl.n	8006306 <__swbuf_r+0x82>
 80062a8:	6923      	ldr	r3, [r4, #16]
 80062aa:	b363      	cbz	r3, 8006306 <__swbuf_r+0x82>
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	6820      	ldr	r0, [r4, #0]
 80062b0:	1ac0      	subs	r0, r0, r3
 80062b2:	6963      	ldr	r3, [r4, #20]
 80062b4:	b2f6      	uxtb	r6, r6
 80062b6:	4283      	cmp	r3, r0
 80062b8:	4637      	mov	r7, r6
 80062ba:	dc04      	bgt.n	80062c6 <__swbuf_r+0x42>
 80062bc:	4621      	mov	r1, r4
 80062be:	4628      	mov	r0, r5
 80062c0:	f000 f948 	bl	8006554 <_fflush_r>
 80062c4:	bb28      	cbnz	r0, 8006312 <__swbuf_r+0x8e>
 80062c6:	68a3      	ldr	r3, [r4, #8]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	60a3      	str	r3, [r4, #8]
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	6022      	str	r2, [r4, #0]
 80062d2:	701e      	strb	r6, [r3, #0]
 80062d4:	6963      	ldr	r3, [r4, #20]
 80062d6:	3001      	adds	r0, #1
 80062d8:	4283      	cmp	r3, r0
 80062da:	d004      	beq.n	80062e6 <__swbuf_r+0x62>
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	07db      	lsls	r3, r3, #31
 80062e0:	d519      	bpl.n	8006316 <__swbuf_r+0x92>
 80062e2:	2e0a      	cmp	r6, #10
 80062e4:	d117      	bne.n	8006316 <__swbuf_r+0x92>
 80062e6:	4621      	mov	r1, r4
 80062e8:	4628      	mov	r0, r5
 80062ea:	f000 f933 	bl	8006554 <_fflush_r>
 80062ee:	b190      	cbz	r0, 8006316 <__swbuf_r+0x92>
 80062f0:	e00f      	b.n	8006312 <__swbuf_r+0x8e>
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <__swbuf_r+0x9c>)
 80062f4:	429c      	cmp	r4, r3
 80062f6:	d101      	bne.n	80062fc <__swbuf_r+0x78>
 80062f8:	68ac      	ldr	r4, [r5, #8]
 80062fa:	e7d0      	b.n	800629e <__swbuf_r+0x1a>
 80062fc:	4b09      	ldr	r3, [pc, #36]	; (8006324 <__swbuf_r+0xa0>)
 80062fe:	429c      	cmp	r4, r3
 8006300:	bf08      	it	eq
 8006302:	68ec      	ldreq	r4, [r5, #12]
 8006304:	e7cb      	b.n	800629e <__swbuf_r+0x1a>
 8006306:	4621      	mov	r1, r4
 8006308:	4628      	mov	r0, r5
 800630a:	f000 f81f 	bl	800634c <__swsetup_r>
 800630e:	2800      	cmp	r0, #0
 8006310:	d0cc      	beq.n	80062ac <__swbuf_r+0x28>
 8006312:	f04f 37ff 	mov.w	r7, #4294967295
 8006316:	4638      	mov	r0, r7
 8006318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800631a:	bf00      	nop
 800631c:	0800685c 	.word	0x0800685c
 8006320:	0800687c 	.word	0x0800687c
 8006324:	0800683c 	.word	0x0800683c

08006328 <_write_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4c07      	ldr	r4, [pc, #28]	; (8006348 <_write_r+0x20>)
 800632c:	4605      	mov	r5, r0
 800632e:	4608      	mov	r0, r1
 8006330:	4611      	mov	r1, r2
 8006332:	2200      	movs	r2, #0
 8006334:	6022      	str	r2, [r4, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	f7fa fd1f 	bl	8000d7a <_write>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d102      	bne.n	8006346 <_write_r+0x1e>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	b103      	cbz	r3, 8006346 <_write_r+0x1e>
 8006344:	602b      	str	r3, [r5, #0]
 8006346:	bd38      	pop	{r3, r4, r5, pc}
 8006348:	200001ac 	.word	0x200001ac

0800634c <__swsetup_r>:
 800634c:	4b32      	ldr	r3, [pc, #200]	; (8006418 <__swsetup_r+0xcc>)
 800634e:	b570      	push	{r4, r5, r6, lr}
 8006350:	681d      	ldr	r5, [r3, #0]
 8006352:	4606      	mov	r6, r0
 8006354:	460c      	mov	r4, r1
 8006356:	b125      	cbz	r5, 8006362 <__swsetup_r+0x16>
 8006358:	69ab      	ldr	r3, [r5, #24]
 800635a:	b913      	cbnz	r3, 8006362 <__swsetup_r+0x16>
 800635c:	4628      	mov	r0, r5
 800635e:	f7ff fb91 	bl	8005a84 <__sinit>
 8006362:	4b2e      	ldr	r3, [pc, #184]	; (800641c <__swsetup_r+0xd0>)
 8006364:	429c      	cmp	r4, r3
 8006366:	d10f      	bne.n	8006388 <__swsetup_r+0x3c>
 8006368:	686c      	ldr	r4, [r5, #4]
 800636a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800636e:	b29a      	uxth	r2, r3
 8006370:	0715      	lsls	r5, r2, #28
 8006372:	d42c      	bmi.n	80063ce <__swsetup_r+0x82>
 8006374:	06d0      	lsls	r0, r2, #27
 8006376:	d411      	bmi.n	800639c <__swsetup_r+0x50>
 8006378:	2209      	movs	r2, #9
 800637a:	6032      	str	r2, [r6, #0]
 800637c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006380:	81a3      	strh	r3, [r4, #12]
 8006382:	f04f 30ff 	mov.w	r0, #4294967295
 8006386:	e03e      	b.n	8006406 <__swsetup_r+0xba>
 8006388:	4b25      	ldr	r3, [pc, #148]	; (8006420 <__swsetup_r+0xd4>)
 800638a:	429c      	cmp	r4, r3
 800638c:	d101      	bne.n	8006392 <__swsetup_r+0x46>
 800638e:	68ac      	ldr	r4, [r5, #8]
 8006390:	e7eb      	b.n	800636a <__swsetup_r+0x1e>
 8006392:	4b24      	ldr	r3, [pc, #144]	; (8006424 <__swsetup_r+0xd8>)
 8006394:	429c      	cmp	r4, r3
 8006396:	bf08      	it	eq
 8006398:	68ec      	ldreq	r4, [r5, #12]
 800639a:	e7e6      	b.n	800636a <__swsetup_r+0x1e>
 800639c:	0751      	lsls	r1, r2, #29
 800639e:	d512      	bpl.n	80063c6 <__swsetup_r+0x7a>
 80063a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063a2:	b141      	cbz	r1, 80063b6 <__swsetup_r+0x6a>
 80063a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063a8:	4299      	cmp	r1, r3
 80063aa:	d002      	beq.n	80063b2 <__swsetup_r+0x66>
 80063ac:	4630      	mov	r0, r6
 80063ae:	f000 f973 	bl	8006698 <_free_r>
 80063b2:	2300      	movs	r3, #0
 80063b4:	6363      	str	r3, [r4, #52]	; 0x34
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063bc:	81a3      	strh	r3, [r4, #12]
 80063be:	2300      	movs	r3, #0
 80063c0:	6063      	str	r3, [r4, #4]
 80063c2:	6923      	ldr	r3, [r4, #16]
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	f043 0308 	orr.w	r3, r3, #8
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	b94b      	cbnz	r3, 80063e6 <__swsetup_r+0x9a>
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063dc:	d003      	beq.n	80063e6 <__swsetup_r+0x9a>
 80063de:	4621      	mov	r1, r4
 80063e0:	4630      	mov	r0, r6
 80063e2:	f000 f917 	bl	8006614 <__smakebuf_r>
 80063e6:	89a2      	ldrh	r2, [r4, #12]
 80063e8:	f012 0301 	ands.w	r3, r2, #1
 80063ec:	d00c      	beq.n	8006408 <__swsetup_r+0xbc>
 80063ee:	2300      	movs	r3, #0
 80063f0:	60a3      	str	r3, [r4, #8]
 80063f2:	6963      	ldr	r3, [r4, #20]
 80063f4:	425b      	negs	r3, r3
 80063f6:	61a3      	str	r3, [r4, #24]
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	b953      	cbnz	r3, 8006412 <__swsetup_r+0xc6>
 80063fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006400:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006404:	d1ba      	bne.n	800637c <__swsetup_r+0x30>
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	0792      	lsls	r2, r2, #30
 800640a:	bf58      	it	pl
 800640c:	6963      	ldrpl	r3, [r4, #20]
 800640e:	60a3      	str	r3, [r4, #8]
 8006410:	e7f2      	b.n	80063f8 <__swsetup_r+0xac>
 8006412:	2000      	movs	r0, #0
 8006414:	e7f7      	b.n	8006406 <__swsetup_r+0xba>
 8006416:	bf00      	nop
 8006418:	2000000c 	.word	0x2000000c
 800641c:	0800685c 	.word	0x0800685c
 8006420:	0800687c 	.word	0x0800687c
 8006424:	0800683c 	.word	0x0800683c

08006428 <_close_r>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	4c06      	ldr	r4, [pc, #24]	; (8006444 <_close_r+0x1c>)
 800642c:	2300      	movs	r3, #0
 800642e:	4605      	mov	r5, r0
 8006430:	4608      	mov	r0, r1
 8006432:	6023      	str	r3, [r4, #0]
 8006434:	f7fa fcbd 	bl	8000db2 <_close>
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	d102      	bne.n	8006442 <_close_r+0x1a>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	b103      	cbz	r3, 8006442 <_close_r+0x1a>
 8006440:	602b      	str	r3, [r5, #0]
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	200001ac 	.word	0x200001ac

08006448 <__sflush_r>:
 8006448:	898a      	ldrh	r2, [r1, #12]
 800644a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800644e:	4605      	mov	r5, r0
 8006450:	0710      	lsls	r0, r2, #28
 8006452:	460c      	mov	r4, r1
 8006454:	d458      	bmi.n	8006508 <__sflush_r+0xc0>
 8006456:	684b      	ldr	r3, [r1, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	dc05      	bgt.n	8006468 <__sflush_r+0x20>
 800645c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	dc02      	bgt.n	8006468 <__sflush_r+0x20>
 8006462:	2000      	movs	r0, #0
 8006464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800646a:	2e00      	cmp	r6, #0
 800646c:	d0f9      	beq.n	8006462 <__sflush_r+0x1a>
 800646e:	2300      	movs	r3, #0
 8006470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006474:	682f      	ldr	r7, [r5, #0]
 8006476:	6a21      	ldr	r1, [r4, #32]
 8006478:	602b      	str	r3, [r5, #0]
 800647a:	d032      	beq.n	80064e2 <__sflush_r+0x9a>
 800647c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	075a      	lsls	r2, r3, #29
 8006482:	d505      	bpl.n	8006490 <__sflush_r+0x48>
 8006484:	6863      	ldr	r3, [r4, #4]
 8006486:	1ac0      	subs	r0, r0, r3
 8006488:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800648a:	b10b      	cbz	r3, 8006490 <__sflush_r+0x48>
 800648c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800648e:	1ac0      	subs	r0, r0, r3
 8006490:	2300      	movs	r3, #0
 8006492:	4602      	mov	r2, r0
 8006494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006496:	6a21      	ldr	r1, [r4, #32]
 8006498:	4628      	mov	r0, r5
 800649a:	47b0      	blx	r6
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	d106      	bne.n	80064b0 <__sflush_r+0x68>
 80064a2:	6829      	ldr	r1, [r5, #0]
 80064a4:	291d      	cmp	r1, #29
 80064a6:	d848      	bhi.n	800653a <__sflush_r+0xf2>
 80064a8:	4a29      	ldr	r2, [pc, #164]	; (8006550 <__sflush_r+0x108>)
 80064aa:	40ca      	lsrs	r2, r1
 80064ac:	07d6      	lsls	r6, r2, #31
 80064ae:	d544      	bpl.n	800653a <__sflush_r+0xf2>
 80064b0:	2200      	movs	r2, #0
 80064b2:	6062      	str	r2, [r4, #4]
 80064b4:	04d9      	lsls	r1, r3, #19
 80064b6:	6922      	ldr	r2, [r4, #16]
 80064b8:	6022      	str	r2, [r4, #0]
 80064ba:	d504      	bpl.n	80064c6 <__sflush_r+0x7e>
 80064bc:	1c42      	adds	r2, r0, #1
 80064be:	d101      	bne.n	80064c4 <__sflush_r+0x7c>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	b903      	cbnz	r3, 80064c6 <__sflush_r+0x7e>
 80064c4:	6560      	str	r0, [r4, #84]	; 0x54
 80064c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064c8:	602f      	str	r7, [r5, #0]
 80064ca:	2900      	cmp	r1, #0
 80064cc:	d0c9      	beq.n	8006462 <__sflush_r+0x1a>
 80064ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064d2:	4299      	cmp	r1, r3
 80064d4:	d002      	beq.n	80064dc <__sflush_r+0x94>
 80064d6:	4628      	mov	r0, r5
 80064d8:	f000 f8de 	bl	8006698 <_free_r>
 80064dc:	2000      	movs	r0, #0
 80064de:	6360      	str	r0, [r4, #52]	; 0x34
 80064e0:	e7c0      	b.n	8006464 <__sflush_r+0x1c>
 80064e2:	2301      	movs	r3, #1
 80064e4:	4628      	mov	r0, r5
 80064e6:	47b0      	blx	r6
 80064e8:	1c41      	adds	r1, r0, #1
 80064ea:	d1c8      	bne.n	800647e <__sflush_r+0x36>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0c5      	beq.n	800647e <__sflush_r+0x36>
 80064f2:	2b1d      	cmp	r3, #29
 80064f4:	d001      	beq.n	80064fa <__sflush_r+0xb2>
 80064f6:	2b16      	cmp	r3, #22
 80064f8:	d101      	bne.n	80064fe <__sflush_r+0xb6>
 80064fa:	602f      	str	r7, [r5, #0]
 80064fc:	e7b1      	b.n	8006462 <__sflush_r+0x1a>
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006504:	81a3      	strh	r3, [r4, #12]
 8006506:	e7ad      	b.n	8006464 <__sflush_r+0x1c>
 8006508:	690f      	ldr	r7, [r1, #16]
 800650a:	2f00      	cmp	r7, #0
 800650c:	d0a9      	beq.n	8006462 <__sflush_r+0x1a>
 800650e:	0793      	lsls	r3, r2, #30
 8006510:	680e      	ldr	r6, [r1, #0]
 8006512:	bf08      	it	eq
 8006514:	694b      	ldreq	r3, [r1, #20]
 8006516:	600f      	str	r7, [r1, #0]
 8006518:	bf18      	it	ne
 800651a:	2300      	movne	r3, #0
 800651c:	eba6 0807 	sub.w	r8, r6, r7
 8006520:	608b      	str	r3, [r1, #8]
 8006522:	f1b8 0f00 	cmp.w	r8, #0
 8006526:	dd9c      	ble.n	8006462 <__sflush_r+0x1a>
 8006528:	4643      	mov	r3, r8
 800652a:	463a      	mov	r2, r7
 800652c:	6a21      	ldr	r1, [r4, #32]
 800652e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006530:	4628      	mov	r0, r5
 8006532:	47b0      	blx	r6
 8006534:	2800      	cmp	r0, #0
 8006536:	dc06      	bgt.n	8006546 <__sflush_r+0xfe>
 8006538:	89a3      	ldrh	r3, [r4, #12]
 800653a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800653e:	81a3      	strh	r3, [r4, #12]
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	e78e      	b.n	8006464 <__sflush_r+0x1c>
 8006546:	4407      	add	r7, r0
 8006548:	eba8 0800 	sub.w	r8, r8, r0
 800654c:	e7e9      	b.n	8006522 <__sflush_r+0xda>
 800654e:	bf00      	nop
 8006550:	20400001 	.word	0x20400001

08006554 <_fflush_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	690b      	ldr	r3, [r1, #16]
 8006558:	4605      	mov	r5, r0
 800655a:	460c      	mov	r4, r1
 800655c:	b1db      	cbz	r3, 8006596 <_fflush_r+0x42>
 800655e:	b118      	cbz	r0, 8006568 <_fflush_r+0x14>
 8006560:	6983      	ldr	r3, [r0, #24]
 8006562:	b90b      	cbnz	r3, 8006568 <_fflush_r+0x14>
 8006564:	f7ff fa8e 	bl	8005a84 <__sinit>
 8006568:	4b0c      	ldr	r3, [pc, #48]	; (800659c <_fflush_r+0x48>)
 800656a:	429c      	cmp	r4, r3
 800656c:	d109      	bne.n	8006582 <_fflush_r+0x2e>
 800656e:	686c      	ldr	r4, [r5, #4]
 8006570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006574:	b17b      	cbz	r3, 8006596 <_fflush_r+0x42>
 8006576:	4621      	mov	r1, r4
 8006578:	4628      	mov	r0, r5
 800657a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800657e:	f7ff bf63 	b.w	8006448 <__sflush_r>
 8006582:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <_fflush_r+0x4c>)
 8006584:	429c      	cmp	r4, r3
 8006586:	d101      	bne.n	800658c <_fflush_r+0x38>
 8006588:	68ac      	ldr	r4, [r5, #8]
 800658a:	e7f1      	b.n	8006570 <_fflush_r+0x1c>
 800658c:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <_fflush_r+0x50>)
 800658e:	429c      	cmp	r4, r3
 8006590:	bf08      	it	eq
 8006592:	68ec      	ldreq	r4, [r5, #12]
 8006594:	e7ec      	b.n	8006570 <_fflush_r+0x1c>
 8006596:	2000      	movs	r0, #0
 8006598:	bd38      	pop	{r3, r4, r5, pc}
 800659a:	bf00      	nop
 800659c:	0800685c 	.word	0x0800685c
 80065a0:	0800687c 	.word	0x0800687c
 80065a4:	0800683c 	.word	0x0800683c

080065a8 <_lseek_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4c07      	ldr	r4, [pc, #28]	; (80065c8 <_lseek_r+0x20>)
 80065ac:	4605      	mov	r5, r0
 80065ae:	4608      	mov	r0, r1
 80065b0:	4611      	mov	r1, r2
 80065b2:	2200      	movs	r2, #0
 80065b4:	6022      	str	r2, [r4, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f7fa fc22 	bl	8000e00 <_lseek>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_lseek_r+0x1e>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_lseek_r+0x1e>
 80065c4:	602b      	str	r3, [r5, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	200001ac 	.word	0x200001ac

080065cc <__swhatbuf_r>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	460e      	mov	r6, r1
 80065d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d4:	2900      	cmp	r1, #0
 80065d6:	b096      	sub	sp, #88	; 0x58
 80065d8:	4614      	mov	r4, r2
 80065da:	461d      	mov	r5, r3
 80065dc:	da07      	bge.n	80065ee <__swhatbuf_r+0x22>
 80065de:	2300      	movs	r3, #0
 80065e0:	602b      	str	r3, [r5, #0]
 80065e2:	89b3      	ldrh	r3, [r6, #12]
 80065e4:	061a      	lsls	r2, r3, #24
 80065e6:	d410      	bmi.n	800660a <__swhatbuf_r+0x3e>
 80065e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065ec:	e00e      	b.n	800660c <__swhatbuf_r+0x40>
 80065ee:	466a      	mov	r2, sp
 80065f0:	f000 f8b2 	bl	8006758 <_fstat_r>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	dbf2      	blt.n	80065de <__swhatbuf_r+0x12>
 80065f8:	9a01      	ldr	r2, [sp, #4]
 80065fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006602:	425a      	negs	r2, r3
 8006604:	415a      	adcs	r2, r3
 8006606:	602a      	str	r2, [r5, #0]
 8006608:	e7ee      	b.n	80065e8 <__swhatbuf_r+0x1c>
 800660a:	2340      	movs	r3, #64	; 0x40
 800660c:	2000      	movs	r0, #0
 800660e:	6023      	str	r3, [r4, #0]
 8006610:	b016      	add	sp, #88	; 0x58
 8006612:	bd70      	pop	{r4, r5, r6, pc}

08006614 <__smakebuf_r>:
 8006614:	898b      	ldrh	r3, [r1, #12]
 8006616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006618:	079d      	lsls	r5, r3, #30
 800661a:	4606      	mov	r6, r0
 800661c:	460c      	mov	r4, r1
 800661e:	d507      	bpl.n	8006630 <__smakebuf_r+0x1c>
 8006620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	6123      	str	r3, [r4, #16]
 8006628:	2301      	movs	r3, #1
 800662a:	6163      	str	r3, [r4, #20]
 800662c:	b002      	add	sp, #8
 800662e:	bd70      	pop	{r4, r5, r6, pc}
 8006630:	ab01      	add	r3, sp, #4
 8006632:	466a      	mov	r2, sp
 8006634:	f7ff ffca 	bl	80065cc <__swhatbuf_r>
 8006638:	9900      	ldr	r1, [sp, #0]
 800663a:	4605      	mov	r5, r0
 800663c:	4630      	mov	r0, r6
 800663e:	f7ff faab 	bl	8005b98 <_malloc_r>
 8006642:	b948      	cbnz	r0, 8006658 <__smakebuf_r+0x44>
 8006644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006648:	059a      	lsls	r2, r3, #22
 800664a:	d4ef      	bmi.n	800662c <__smakebuf_r+0x18>
 800664c:	f023 0303 	bic.w	r3, r3, #3
 8006650:	f043 0302 	orr.w	r3, r3, #2
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	e7e3      	b.n	8006620 <__smakebuf_r+0xc>
 8006658:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <__smakebuf_r+0x7c>)
 800665a:	62b3      	str	r3, [r6, #40]	; 0x28
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	6020      	str	r0, [r4, #0]
 8006660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006664:	81a3      	strh	r3, [r4, #12]
 8006666:	9b00      	ldr	r3, [sp, #0]
 8006668:	6163      	str	r3, [r4, #20]
 800666a:	9b01      	ldr	r3, [sp, #4]
 800666c:	6120      	str	r0, [r4, #16]
 800666e:	b15b      	cbz	r3, 8006688 <__smakebuf_r+0x74>
 8006670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006674:	4630      	mov	r0, r6
 8006676:	f000 f881 	bl	800677c <_isatty_r>
 800667a:	b128      	cbz	r0, 8006688 <__smakebuf_r+0x74>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	f023 0303 	bic.w	r3, r3, #3
 8006682:	f043 0301 	orr.w	r3, r3, #1
 8006686:	81a3      	strh	r3, [r4, #12]
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	431d      	orrs	r5, r3
 800668c:	81a5      	strh	r5, [r4, #12]
 800668e:	e7cd      	b.n	800662c <__smakebuf_r+0x18>
 8006690:	08005a4d 	.word	0x08005a4d

08006694 <__malloc_lock>:
 8006694:	4770      	bx	lr

08006696 <__malloc_unlock>:
 8006696:	4770      	bx	lr

08006698 <_free_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4605      	mov	r5, r0
 800669c:	2900      	cmp	r1, #0
 800669e:	d045      	beq.n	800672c <_free_r+0x94>
 80066a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066a4:	1f0c      	subs	r4, r1, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bfb8      	it	lt
 80066aa:	18e4      	addlt	r4, r4, r3
 80066ac:	f7ff fff2 	bl	8006694 <__malloc_lock>
 80066b0:	4a1f      	ldr	r2, [pc, #124]	; (8006730 <_free_r+0x98>)
 80066b2:	6813      	ldr	r3, [r2, #0]
 80066b4:	4610      	mov	r0, r2
 80066b6:	b933      	cbnz	r3, 80066c6 <_free_r+0x2e>
 80066b8:	6063      	str	r3, [r4, #4]
 80066ba:	6014      	str	r4, [r2, #0]
 80066bc:	4628      	mov	r0, r5
 80066be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066c2:	f7ff bfe8 	b.w	8006696 <__malloc_unlock>
 80066c6:	42a3      	cmp	r3, r4
 80066c8:	d90c      	bls.n	80066e4 <_free_r+0x4c>
 80066ca:	6821      	ldr	r1, [r4, #0]
 80066cc:	1862      	adds	r2, r4, r1
 80066ce:	4293      	cmp	r3, r2
 80066d0:	bf04      	itt	eq
 80066d2:	681a      	ldreq	r2, [r3, #0]
 80066d4:	685b      	ldreq	r3, [r3, #4]
 80066d6:	6063      	str	r3, [r4, #4]
 80066d8:	bf04      	itt	eq
 80066da:	1852      	addeq	r2, r2, r1
 80066dc:	6022      	streq	r2, [r4, #0]
 80066de:	6004      	str	r4, [r0, #0]
 80066e0:	e7ec      	b.n	80066bc <_free_r+0x24>
 80066e2:	4613      	mov	r3, r2
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	b10a      	cbz	r2, 80066ec <_free_r+0x54>
 80066e8:	42a2      	cmp	r2, r4
 80066ea:	d9fa      	bls.n	80066e2 <_free_r+0x4a>
 80066ec:	6819      	ldr	r1, [r3, #0]
 80066ee:	1858      	adds	r0, r3, r1
 80066f0:	42a0      	cmp	r0, r4
 80066f2:	d10b      	bne.n	800670c <_free_r+0x74>
 80066f4:	6820      	ldr	r0, [r4, #0]
 80066f6:	4401      	add	r1, r0
 80066f8:	1858      	adds	r0, r3, r1
 80066fa:	4282      	cmp	r2, r0
 80066fc:	6019      	str	r1, [r3, #0]
 80066fe:	d1dd      	bne.n	80066bc <_free_r+0x24>
 8006700:	6810      	ldr	r0, [r2, #0]
 8006702:	6852      	ldr	r2, [r2, #4]
 8006704:	605a      	str	r2, [r3, #4]
 8006706:	4401      	add	r1, r0
 8006708:	6019      	str	r1, [r3, #0]
 800670a:	e7d7      	b.n	80066bc <_free_r+0x24>
 800670c:	d902      	bls.n	8006714 <_free_r+0x7c>
 800670e:	230c      	movs	r3, #12
 8006710:	602b      	str	r3, [r5, #0]
 8006712:	e7d3      	b.n	80066bc <_free_r+0x24>
 8006714:	6820      	ldr	r0, [r4, #0]
 8006716:	1821      	adds	r1, r4, r0
 8006718:	428a      	cmp	r2, r1
 800671a:	bf04      	itt	eq
 800671c:	6811      	ldreq	r1, [r2, #0]
 800671e:	6852      	ldreq	r2, [r2, #4]
 8006720:	6062      	str	r2, [r4, #4]
 8006722:	bf04      	itt	eq
 8006724:	1809      	addeq	r1, r1, r0
 8006726:	6021      	streq	r1, [r4, #0]
 8006728:	605c      	str	r4, [r3, #4]
 800672a:	e7c7      	b.n	80066bc <_free_r+0x24>
 800672c:	bd38      	pop	{r3, r4, r5, pc}
 800672e:	bf00      	nop
 8006730:	20000094 	.word	0x20000094

08006734 <_read_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4c07      	ldr	r4, [pc, #28]	; (8006754 <_read_r+0x20>)
 8006738:	4605      	mov	r5, r0
 800673a:	4608      	mov	r0, r1
 800673c:	4611      	mov	r1, r2
 800673e:	2200      	movs	r2, #0
 8006740:	6022      	str	r2, [r4, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f7fa fafc 	bl	8000d40 <_read>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_read_r+0x1e>
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	b103      	cbz	r3, 8006752 <_read_r+0x1e>
 8006750:	602b      	str	r3, [r5, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	200001ac 	.word	0x200001ac

08006758 <_fstat_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4c07      	ldr	r4, [pc, #28]	; (8006778 <_fstat_r+0x20>)
 800675c:	2300      	movs	r3, #0
 800675e:	4605      	mov	r5, r0
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	f7fa fb30 	bl	8000dca <_fstat>
 800676a:	1c43      	adds	r3, r0, #1
 800676c:	d102      	bne.n	8006774 <_fstat_r+0x1c>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	b103      	cbz	r3, 8006774 <_fstat_r+0x1c>
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	bd38      	pop	{r3, r4, r5, pc}
 8006776:	bf00      	nop
 8006778:	200001ac 	.word	0x200001ac

0800677c <_isatty_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	4c06      	ldr	r4, [pc, #24]	; (8006798 <_isatty_r+0x1c>)
 8006780:	2300      	movs	r3, #0
 8006782:	4605      	mov	r5, r0
 8006784:	4608      	mov	r0, r1
 8006786:	6023      	str	r3, [r4, #0]
 8006788:	f7fa fb2f 	bl	8000dea <_isatty>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	d102      	bne.n	8006796 <_isatty_r+0x1a>
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	b103      	cbz	r3, 8006796 <_isatty_r+0x1a>
 8006794:	602b      	str	r3, [r5, #0]
 8006796:	bd38      	pop	{r3, r4, r5, pc}
 8006798:	200001ac 	.word	0x200001ac

0800679c <_init>:
 800679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679e:	bf00      	nop
 80067a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a2:	bc08      	pop	{r3}
 80067a4:	469e      	mov	lr, r3
 80067a6:	4770      	bx	lr

080067a8 <_fini>:
 80067a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067aa:	bf00      	nop
 80067ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ae:	bc08      	pop	{r3}
 80067b0:	469e      	mov	lr, r3
 80067b2:	4770      	bx	lr
